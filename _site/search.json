[
  {
    "objectID": "inicio.old.html",
    "href": "inicio.old.html",
    "title": "Início",
    "section": "",
    "text": "Como diriam no telemarketing … !\n\nVocê está cansado de buscar fontes diferente de livros e internete pra manter o interesse da Turma ?\nVocê acha que as imagens dos livros que ensina poderiam ser “vivificadas” pra mostrar moléculas, gráficos e mapas de modo mais interessante ?\nVocê acha que moléculas observadas em 3D poderiam tornar as aulas mais “amigáveis” ?\nVocê acredita que suas aulas teriam mais combustível se você pudesse também interagir com as moléculas, possibilitando alterações visuais e animações ?\nVocê gostaria de aprender como fazer isso usando somente um programa online ?\nVocê não se sente “desprotegido” quando tenta ensinar uma relação gráfica meio abstrata de uma figura de livro pra Turma ?\nSeus alunos não acham meio chato quando precisam estudar alguma informação de cada região de um mapa num livro ?\nVocê acharia interessante apresentar aos alunos(as) gráficos dos livros, embora animados, com interatividade e mesmo simulações ?\nVocê acredita que um mapa informativo mas interativo, do Brasil, do mundo ou qualquer região do planeta, poderia contribuir pra atenção de seus “pimpolhos(as)” ?\nVocê gostaria de aprender um única ferramenta que possibilitasse tudo isso e mais, como analisar dados dos mais divesos campos de estudo, construir belíssimos gráficos, simular situações de sua área, elaborar textos com qualidade de publicação técnico-científica, construir páginas de internete com imagens, vídeos, hiperlinks, criar livros inteiros, blogs ou mesmo um website completo ?\nE isso tudo por um único programa instalado em seu computador ou melhor, pela internete, e sem pagar nada ?!?\n\n\n…Então…seus problemas acabaram !!!"
  },
  {
    "objectID": "comandos.html",
    "href": "comandos.html",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "",
    "text": "Supondo que você já tenha aberto em seu navegador a janela para o applet do JSmol mas que, contrariamente ao que foi feito antes (nome da molécula ao final do site PubChem, você queira:\n\ncarregar uma molécula a partir de outro banco de dados;\ncarregar uma molécula cujo arquivo já esteja em seu computador\n\n      Bom, nesse caso você pode usar o mouse ou uma linha de comando, como preferir.\n\n\n      Para isto basta clicar com o botão direito do mouse no ecrã, como anteriormente, e selecionar File–&gt;Load. As opções que se apresentam são:\n\n* Open local file # abre janela para buscar o arquivo do modelo no computador;\n* Open URL # abre janela para buscar o endereço de internete que possui o arquivo\n* Get PDB file # abre janela para inserir um código de macromolécula do site homônimo (proteínas, ácidos nucleicos, principalmente)\n* Get MOL file # abre janela para buscar um arquivo *.mol\n* Open script # abre janela para buscar um trecho de código no computador\n\n      A primeira opção é autoexplicativa (Open local file), a segunda opção (Open URL) depende do endereço correto para um determinado modelo molecular, a terceira (Get PDB file) refere-se ao banco de dados Protein Data Brookhaven para biopolímeros, a quarta (Get MOL file) envolve a busca online em banco de dados específico para pequenas moléculas, e a última (Open script), a busca de um arquivo que contenha linhas de código do Jmol para um conjunto de ações.\n      Como os livros didáticos permeiam estruturas moleculares pequenas, normalmente associadas aos grupos funcionais da Química Inorgânica e Orgânica, bem como exemplos específicos em áreas como Saúde, Biotecnologia e Indústria, incluindo também alguns modelos de macromoléculas, pode-se concluir que é mais provável que você utilize a busca remota de pequenas moléculas (Get MOL file), moléculas contidas em seu computador (Open local file), e/ou biomacromoléculas (Get PDB file).\n      O carregamento de pequenas moléculas é idêntico ao que foi experimentado adicionando-se o nome do modelo ao final do endereço do JSmol. O carregamento remoto para modelos de proteínas, enzimas e ácidos nucleicos envolve o conhecimento do código PDB desses, ou busca de palavras-chave no sítio Protein Data Brookhaven.\n      Já o carregamento de moléculas guardadas no PC envolve algumas poucas etapas, a saber:\n\nObtém-se o modelo da molécula pela internete, ou o constroi;\nBaixa-se o arquivo correspondente ao modelo (geralmente com um atributo *.mol, *.cif, *.cml, *.sdf, entre mais de 60 formatos);\nCarrega-se na página do JSmol por dois meios alternativos:\n\n\n1. Por clique de mouse: File --&gt; Load --&gt; Open local file ;\n2. Por arraste do arquivo da pasta onde se encontre para a aba do JSmol no navegador.\n\n\n    Exemplificando, digamos que você queira visualizar a estrutura da aspirina baixada em seu computador.\n\n1. Baixe o modelo estrutural da aspirina em algum site, como o PubChem ;\n2. Abra o Console do JSmol no navegador (clique no ecrã com o botão direito do mouse e selecione \"Console\");\n3. Alternativamente:\n  a. Localize o arquivo no PC por \"File--&gt;Load--&gt;Open local file\", clicando depois em \"Load\" para o carregamento;\n  b. Clique no arquivo baixado (\"aspirin.sdf\", por ex) e arraste-o diretamente para a janela do JSmol. \n\n\n\n\nExemplo do modelo da aspirina para download no PubChem.\n\n\n\n\n\n      O carregamento de um modelo em particular por linha de comando restringe-se à sua busca pela internete, em banco de dados ou páginas da web. Para isso, abre-se o Console como já explicado. A parte de cima serve para apresentação dos resultados dos comandos, e a parte de baixo, para sua digitação. Nesse caso, clique no quadro inferior do Console e digite o comando de carregamento, aqui exemplificado para um alcano:\n\nload $alkane\n\n      O Console do Jmol, ainda que constitua uma linguagem própria de programação de comandos, possui uma vantagem interessante sobre demais linguagens de programação: é possível efetuar o comando pelo Console tanto com letras maiúsculas como minúculas, e tanto no singular como no plural.\n      Você pode tentar com outras moléculas, como aspirin, cholesterol, phenol etc (nomes em inglês, por conta do banco de dados). Para recuperar uma linha de comando que foi escrita antes, basta navegar entre os comandos que foram utilizados com as setas para cima e para baixo do teclado.\nOs modelos moleculares são carregados a partir do banco de dados Cactus - CADD Group Chemoinformatics Tools and User Services.\n\n\n      SMILES-Simplified Molecular Input Line Entry System trata de uma notação química que permite representar as moléculas inserindo-se o nome de cada átomo em sequência em ligações simples, bem como o local de ligações insaturadas, ou ligações aromáticas.\n      O PubChem possui também a notação SMILES como alternativa para carregamento de modelos. Seguem alguns exemplos da notação para carregamento da molécula no Console do Jmol.\n      Para hidrocarbonetos sem ligações insaturadas (alcanos) é possível carregar a molécula digitando somente a sequência de carbonos, como segue:\n\n# Para carregar um metano\nload $C # carrega o modelo\n\n\n# Para carregar um hexano\nload $CCCCCC # carrega o modelo\n\n      Agora, para carregar hidrocarbonetos com uma ligação insaturada (alcenos), basta inserir o sinal de igualdade (=) onde aparece a insaturação:\n\n# Para carregar um propeno (propileno)\nload $CC=C # carrega o modelo\n\n      Para carregar um modelo com ligação tripla, segue-se a notação #:\n\n# Para carregar um metilacetileno (ou ....propina !)\nload $CC#C # carrega o modelo\n\n      Para carregar uma estrutura aromática, já um pouco mais chatinho:\n\n# Para carregar um benzeno\nload $C1=CC=CC=C1 \n\n\n\n\n\n      Como mecionado acima, o carregamento de macromoléculas biológicas dá-se por identificação de um código alfanumérico da mesma frente ao banco de dados PDB-Protein Data Bank. Após obter esse código, o comando de carregamento é:\n\nload=XXXX # onde XXXX é o código da macromolécula110\n# Obs: Perceba que o sinal de \"$\" é trocado por \"=\" para o PDB\n\n      Isso pode ser ilustrado por carregamento remoto da proteína espícula (spike) do vírus Sars-Cov-2, tal como segue:\n\n1. Entre no site do PDB-Protein Data Bank - https://www.rcsb.org/ ; \n2. No campo de busca, digite \"spike sars-cov-2\" ;\n3. Selecione a 1a opção (o site vai direcionar para várias estruturas da proteína espícula) ;\n4. Memorize o código da 1a. opção (embora qualquer uma também sirva), ou seja, \"7FCD\" ;\n5. Digite a linha para carregar a proteína: \"load=7FCD\" (tanto faz se maiúsculas ou minúsculas)\n\n      A representação padrão para proteínas no Jmol é a de arame (wireframe). Para visualizar a proteína do vírus de modo mais “amigável” e semelhante ao que aparece em textos ou na internete, digite os comandos abaixo.\n\ncartoon only  # representação exclusiva de desenho da estrutura de biopolímeros\ncolor chain #  coloração por \"cadeias\" da proteína\n\n\n\n\nRepresentação da proteína spike do vírus de Sars-Cov-2 (coloração por número de cadeias.\n\n\n      Proteínas, enzimas, ácidos nucleicos, e associações macromoleculares são mais pertinentes ao estudo da Bioquímica estrutural. Nesse sentido lhe convido a visitar uma parte do website autoral que possui descrições e representações detalhadas de estruturas bioquímicas com auxílio do Jmol, o site Bioquanti\n\n\n\nBioquanti, um website autoral para estudos quantitativos em Bioquímica, e que inclui diversos modelos moleculares para o Jmol."
  },
  {
    "objectID": "comandos.html#como-carregar-uma-molécula-no-jsmol",
    "href": "comandos.html#como-carregar-uma-molécula-no-jsmol",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "",
    "text": "Supondo que você já tenha aberto em seu navegador a janela para o applet do JSmol mas que, contrariamente ao que foi feito antes (nome da molécula ao final do site PubChem, você queira:\n\ncarregar uma molécula a partir de outro banco de dados;\ncarregar uma molécula cujo arquivo já esteja em seu computador\n\n      Bom, nesse caso você pode usar o mouse ou uma linha de comando, como preferir.\n\n\n      Para isto basta clicar com o botão direito do mouse no ecrã, como anteriormente, e selecionar File–&gt;Load. As opções que se apresentam são:\n\n* Open local file # abre janela para buscar o arquivo do modelo no computador;\n* Open URL # abre janela para buscar o endereço de internete que possui o arquivo\n* Get PDB file # abre janela para inserir um código de macromolécula do site homônimo (proteínas, ácidos nucleicos, principalmente)\n* Get MOL file # abre janela para buscar um arquivo *.mol\n* Open script # abre janela para buscar um trecho de código no computador\n\n      A primeira opção é autoexplicativa (Open local file), a segunda opção (Open URL) depende do endereço correto para um determinado modelo molecular, a terceira (Get PDB file) refere-se ao banco de dados Protein Data Brookhaven para biopolímeros, a quarta (Get MOL file) envolve a busca online em banco de dados específico para pequenas moléculas, e a última (Open script), a busca de um arquivo que contenha linhas de código do Jmol para um conjunto de ações.\n      Como os livros didáticos permeiam estruturas moleculares pequenas, normalmente associadas aos grupos funcionais da Química Inorgânica e Orgânica, bem como exemplos específicos em áreas como Saúde, Biotecnologia e Indústria, incluindo também alguns modelos de macromoléculas, pode-se concluir que é mais provável que você utilize a busca remota de pequenas moléculas (Get MOL file), moléculas contidas em seu computador (Open local file), e/ou biomacromoléculas (Get PDB file).\n      O carregamento de pequenas moléculas é idêntico ao que foi experimentado adicionando-se o nome do modelo ao final do endereço do JSmol. O carregamento remoto para modelos de proteínas, enzimas e ácidos nucleicos envolve o conhecimento do código PDB desses, ou busca de palavras-chave no sítio Protein Data Brookhaven.\n      Já o carregamento de moléculas guardadas no PC envolve algumas poucas etapas, a saber:\n\nObtém-se o modelo da molécula pela internete, ou o constroi;\nBaixa-se o arquivo correspondente ao modelo (geralmente com um atributo *.mol, *.cif, *.cml, *.sdf, entre mais de 60 formatos);\nCarrega-se na página do JSmol por dois meios alternativos:\n\n\n1. Por clique de mouse: File --&gt; Load --&gt; Open local file ;\n2. Por arraste do arquivo da pasta onde se encontre para a aba do JSmol no navegador.\n\n\n    Exemplificando, digamos que você queira visualizar a estrutura da aspirina baixada em seu computador.\n\n1. Baixe o modelo estrutural da aspirina em algum site, como o PubChem ;\n2. Abra o Console do JSmol no navegador (clique no ecrã com o botão direito do mouse e selecione \"Console\");\n3. Alternativamente:\n  a. Localize o arquivo no PC por \"File--&gt;Load--&gt;Open local file\", clicando depois em \"Load\" para o carregamento;\n  b. Clique no arquivo baixado (\"aspirin.sdf\", por ex) e arraste-o diretamente para a janela do JSmol. \n\n\n\n\nExemplo do modelo da aspirina para download no PubChem.\n\n\n\n\n\n      O carregamento de um modelo em particular por linha de comando restringe-se à sua busca pela internete, em banco de dados ou páginas da web. Para isso, abre-se o Console como já explicado. A parte de cima serve para apresentação dos resultados dos comandos, e a parte de baixo, para sua digitação. Nesse caso, clique no quadro inferior do Console e digite o comando de carregamento, aqui exemplificado para um alcano:\n\nload $alkane\n\n      O Console do Jmol, ainda que constitua uma linguagem própria de programação de comandos, possui uma vantagem interessante sobre demais linguagens de programação: é possível efetuar o comando pelo Console tanto com letras maiúsculas como minúculas, e tanto no singular como no plural.\n      Você pode tentar com outras moléculas, como aspirin, cholesterol, phenol etc (nomes em inglês, por conta do banco de dados). Para recuperar uma linha de comando que foi escrita antes, basta navegar entre os comandos que foram utilizados com as setas para cima e para baixo do teclado.\nOs modelos moleculares são carregados a partir do banco de dados Cactus - CADD Group Chemoinformatics Tools and User Services.\n\n\n      SMILES-Simplified Molecular Input Line Entry System trata de uma notação química que permite representar as moléculas inserindo-se o nome de cada átomo em sequência em ligações simples, bem como o local de ligações insaturadas, ou ligações aromáticas.\n      O PubChem possui também a notação SMILES como alternativa para carregamento de modelos. Seguem alguns exemplos da notação para carregamento da molécula no Console do Jmol.\n      Para hidrocarbonetos sem ligações insaturadas (alcanos) é possível carregar a molécula digitando somente a sequência de carbonos, como segue:\n\n# Para carregar um metano\nload $C # carrega o modelo\n\n\n# Para carregar um hexano\nload $CCCCCC # carrega o modelo\n\n      Agora, para carregar hidrocarbonetos com uma ligação insaturada (alcenos), basta inserir o sinal de igualdade (=) onde aparece a insaturação:\n\n# Para carregar um propeno (propileno)\nload $CC=C # carrega o modelo\n\n      Para carregar um modelo com ligação tripla, segue-se a notação #:\n\n# Para carregar um metilacetileno (ou ....propina !)\nload $CC#C # carrega o modelo\n\n      Para carregar uma estrutura aromática, já um pouco mais chatinho:\n\n# Para carregar um benzeno\nload $C1=CC=CC=C1 \n\n\n\n\n\n      Como mecionado acima, o carregamento de macromoléculas biológicas dá-se por identificação de um código alfanumérico da mesma frente ao banco de dados PDB-Protein Data Bank. Após obter esse código, o comando de carregamento é:\n\nload=XXXX # onde XXXX é o código da macromolécula110\n# Obs: Perceba que o sinal de \"$\" é trocado por \"=\" para o PDB\n\n      Isso pode ser ilustrado por carregamento remoto da proteína espícula (spike) do vírus Sars-Cov-2, tal como segue:\n\n1. Entre no site do PDB-Protein Data Bank - https://www.rcsb.org/ ; \n2. No campo de busca, digite \"spike sars-cov-2\" ;\n3. Selecione a 1a opção (o site vai direcionar para várias estruturas da proteína espícula) ;\n4. Memorize o código da 1a. opção (embora qualquer uma também sirva), ou seja, \"7FCD\" ;\n5. Digite a linha para carregar a proteína: \"load=7FCD\" (tanto faz se maiúsculas ou minúsculas)\n\n      A representação padrão para proteínas no Jmol é a de arame (wireframe). Para visualizar a proteína do vírus de modo mais “amigável” e semelhante ao que aparece em textos ou na internete, digite os comandos abaixo.\n\ncartoon only  # representação exclusiva de desenho da estrutura de biopolímeros\ncolor chain #  coloração por \"cadeias\" da proteína\n\n\n\n\nRepresentação da proteína spike do vírus de Sars-Cov-2 (coloração por número de cadeias.\n\n\n      Proteínas, enzimas, ácidos nucleicos, e associações macromoleculares são mais pertinentes ao estudo da Bioquímica estrutural. Nesse sentido lhe convido a visitar uma parte do website autoral que possui descrições e representações detalhadas de estruturas bioquímicas com auxílio do Jmol, o site Bioquanti\n\n\n\nBioquanti, um website autoral para estudos quantitativos em Bioquímica, e que inclui diversos modelos moleculares para o Jmol."
  },
  {
    "objectID": "comandos.html#agora-que-a-molécula-está-na-página-do-navegador-o-que-posso-fazer-com-ela",
    "href": "comandos.html#agora-que-a-molécula-está-na-página-do-navegador-o-que-posso-fazer-com-ela",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Agora que a molécula está na página do navegador, o que posso fazer com ela ?",
    "text": "Agora que a molécula está na página do navegador, o que posso fazer com ela ?\n      Muuuuuiiita coisa !!!\n      O Jmol possui um menu com diversas operações, e centenas de comandos, e talvez outra centena de tutoriais pela internete. Para observações estruturais mais diretas e imediatas, contudo, pode-se resumir as operações em:\n\nMovimentos com mouse (rotação, translação, zoom)\nRepresentações do modelo (bola e varetas, espaço preenchido, arame)\nCores (modelo e plano de fundo)\nMedidas (distâncias e ângulos)\nCaracterísticas moleculares (ligações de H, nuvem de van der Waals, carga parcial e efetiva)\nSuperfícies (molecular, eletrostática)\nSeleção de átomos e visualização (água, hidrogênio)\nAnimações (zoom, rotação automática), cortes"
  },
  {
    "objectID": "comandos.html#salvamento-do-modelo-no-computador-ou-dispositivo-móvel",
    "href": "comandos.html#salvamento-do-modelo-no-computador-ou-dispositivo-móvel",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Salvamento do modelo no computador ou dispositivo móvel",
    "text": "Salvamento do modelo no computador ou dispositivo móvel\n      Todas as ações realizadas com a molécula produzem um novo modelo que pode ser baixado para o computador. E isso é bem legal porque a molécula modificada (com alteração de cores, representações, animações, por ex) pode ser carregada no Jmol ou na JSmol (internet) como já mencionado. Para tanto, pode-se usar cliques de mouse ou linhas de comando, como segue:\n\n1. Botão direito no ecrã -&gt; File -&gt; Save -&gt; Save as PNG/JMOL # por mouse\n2. write nome_da_molecula # por linha de comando no Console\n\nObs: a opção PNG/JMOL é muito interessante, já que permite visualizar o modelo trabalhado em qualquer editor de imagem, bem como no Jmol.\n      Para exemplificar essas ações, usaremos inicialmente o modelo da vitamina C, carregando-o com o comando load $ascorbate. Mas se você quiser saber todos os comandos possíveis, faça uma visita ao site de referência do Jmol."
  },
  {
    "objectID": "comandos.html#movimentos-com-mouse",
    "href": "comandos.html#movimentos-com-mouse",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Movimentos com mouse",
    "text": "Movimentos com mouse\n      Para rotação e translação do modelo, bem como ampliação:\n\nzoom - botão do meio do mouse; se não houver o botão, Shift+botão esquerdo\nrotação - botão esquerdo do mouse\ntranslação - Ctrl+botão direito\nrotação no eixo - Shift+botão direito"
  },
  {
    "objectID": "comandos.html#representações-do-modelo",
    "href": "comandos.html#representações-do-modelo",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Representações do modelo",
    "text": "Representações do modelo\n      As representações referem-se ao aspecto visual do modelo (renderização). Assim, o Jmol pode renderizar o modelo como vareta, arame, espaço preenchido, bola e vareta, traço, e desenho. Experimente renderizar o nesses tipos, incluindo a opção only. Essa opção permite que a ação não seja sobreposta às anteriores (no caso, a sobreposição das representações).\n\nwireframe only # arame\ncpk only # espaço preenchido\ntrace only # traço\ncartoon only # desenho\n\n      Observe também que representação em cartoon não resulta numa renderização para o modelo da vitamina C. Isso decorre porque a representação em cartoon é restrita para biopolímeros, ou seja, proteínas e ácidos nucleicos.\n      Contudo, se quiser experimentar o cartoon, será necessário conhecer o código alfanumérico de uma proteína ou ácido nucleico. Exemplificando para a mioglobina, proteína transportadora de oxigênio em mamíferos (código: 1mcy)\n\nload=1mcy # carregando a mioglobina\n\n      Veja que a renderização padrão para grandes moléculas é a de bolas e varetas, pouco didática para o aprendiz. Nesse caso, pode-se representá-la como desenho exclusivo, digitando-se:\n\ncartoon only # renderizando em desenho\n\n      Para se conseguir esse e outros códigos de proteínas e ácidos nucleicos, deve-se entrar no banco de dados do PDB - Protein Data Bank, RCSB, e digitar o nome no campo de busca (no caso, myoglobin). O sistema retorna diversos modelos estruturais e seus códigos, bastando transcrever um desses códigos ao Console do JSmol."
  },
  {
    "objectID": "comandos.html#cores",
    "href": "comandos.html#cores",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Cores",
    "text": "Cores\n      Existe grande flexibilidade de cores para o Jmol (e, por consequência, para o JSmol), tanto para os modelos inteiros, partes do modelo (átomos específicos ou um conjunto), e plano de fundo. A visualização padrão de cores segue a convenção CPK (Corey–Pauling–Koltun). Exemplificando para o modelo anterior de vitamina C (load $ascorbate), experimente a variação que segue:\n\ncolor pink\ncolor blue\ncolor ligthgreen\nbackground yellow # plano de fundo\n\n      O último comando da lista acima permite variar a coloração do plano de fundo.\n      Adicionalmente, também é possível a coloração de ligações entre os átomos, como segue:\n\ncolor bonds LightSeaGreen\n\n      Para um grande espectro de cores, você pode consultar a referência do Jmol Colors, ou um link mais “mastigado”, de nossa autoria junto ao aprendizado do programa no ensino superior, o portal Bioquanti e, mais especificamente, o tópico de cores para o Jmol."
  },
  {
    "objectID": "comandos.html#medidas",
    "href": "comandos.html#medidas",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Medidas",
    "text": "Medidas\n      O Jmol permite calcular distâncias e ângulos em um modelo molecular. Para exemplificar isso, talvez seja interessante o carregamento de um modelo de água (load $water), e cujas distâncias e ângulos estão presentes em alguns livros de Química.\n\nPara distâncias\n      No exemplo da molécula de água, para se determinar a distância de uma ligação O-H, por exemplo:\n\n1. Duplo-clique do mouse no 1o. átomo;\n2. Arraste do mouse ao 2o. átomo;\n3. Clique do mouse no 2o. átomo\n\n      Experimentando para a distância da ligação O-H, o programa retorna o valor de 0,097 nm, ou 0,97 Angstroms, o valor convencial para esse tipo de ligação covalente.\n\n\n\nMedindo distância dentro da molécula.\n\n\n\n\nPara ângulos\n      Para a mesma molécula de água, experimente determinar o ângulo de ligação:\n\n1. Duplo clique no 1o. átomo (ex: H);\n2. Arrasta ao 2o. átomo (ex: O);\n3. Clique no 2o. átomo;\n4. Arraste ao 3o. átomo (ex: o outro H);\n5. Clique no 3o. átomo\n\n      Perceba que o sistema retorna o valor de 114\\(^{o}\\), um valor próximo do previsto para a molécula (109.5\\(^{o}\\)), ou medido (104.5\\(^{o}\\)). Essa aproximação é decorrente da construção do modelo de água.\n\n\n\nMedindo ângulo dentro da molécula.\n\n\n      Para limpar as medidas, use o comando:\n\nmeasure off"
  },
  {
    "objectID": "comandos.html#características-moleculares",
    "href": "comandos.html#características-moleculares",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Características moleculares",
    "text": "Características moleculares\n      São diveras as informações tangíveis a um modelo molecular no Jmol. Exemplificando as mais básicas para a molécula de um componente do molho shoyo, o glutamato:\n\nCargas\n      Há dois tipos de cargas oferecidas pelo Jmol, carga efetiva (formaCharge) e carga parcial (partialcharge). Exemplificando, digite no Console os comandos abaixo:\n\ncalculate partialCharges # cálculo de cargas parciais do modelo\nlabel %P # apresentação das cargas (etiquetagem)\n\n      Uma característica do Jmol que o torna mais eficiente a execução de suas ações é a disposição sequencial de comandos. Dessa forma, não é necessário clicar em Enter para cada comando, bastando separar os comando por ponto e vírgula (;) como ilustrado abaixo:\n\n\n\nAprentação de cargas parciais no modelo de glutamato, um componente do molho Shoyo, também ilustrando uma sequência de ações no Jmol.\n\n\n      Da mesma forma pode-se ilutrar a obtenção de cargas formais no modelo. Nessa, adicionou-se a coloração transparente, para melhor visualização da carga unitária negativa do ácido carboxílico:\n\ncalculate formalcharges # cálculo de cargas parciais do modelo\nlabel %C # apresentação das cargas (etiquetagem)\n\n\n\n\nIlustração dos comandos em sequência para visualização de cargas formais na molécula de glutamato.\n\n\n      Perceba que os comando da figura mistura maiúscula e minúsculas, de modo diferente da linha de comando que a antecede. Essa é uma característica bem legal do Jmol, que não se importa com a capitalização ou não da fonte. Ou seja, tanto faz se minúsculo, maiúsculo ou uma combinação de ambos; o Jmol executa a ação do mesmo modo.\n\nScripts & Ensino Reprodutível\n      O exemplo acima apresenta uma maneira simples de concatenar comandos, facilitando a execução automático e sequencial de um conjunto desses. No entanto, a visualização da linha de comando fica um pouco prejudicada com a separação por “;”, o que pode acarretar uma poluição visual quando houver vários comandos.\n      A situação de contorno envolve a disposição dos comandos no formato de um script. Esse nada mais é do que um trecho de código contendo um comando por linha, o que melhora a visualização do código como um todo. Além disso, o script possui a vantagem adicional de se inserir comentários entre as linhas de comando, permitindo também uma melhor apropriação do código e de seu aprendizado.\n      Essas características de um comando por linha com comentários explicativos conferem ao Jmol seu aspecto para programação de ações sequenciais, e enraiza por consequência uma das premissas básicas para um Ensino Reprodutível: a redação de trechos de códigos em comandos unitários por linha, escritos como num bloco de notas, e com comentários sobre as ações do programa em cada linha. Exemplificando para um script envolvendo as ações para o glutamato acima, apenas copie o trecho abaixo e cole-o no Console do JSmol, executando-o.\n\nload $glu # carregamento de micromolécula \nwireframe only # renderização exclusiva de varetas\ncalculate partialCharge # carga parcial\nlabel %P \n\n      Outro aspecto inerente à iniciativa de Ensino Reprodutível reside na possibilidade de se avaliar o código com alguma alteração, objetivando um produto final ligeiramente modificado. Tente repetir o trecho acima, mas para cargas efetivas, ou seja:\n\nload $glu # carregamento de micromolécula \ncpk only # renderização exclusiva por espaço preenchido\ncalculate formalCharge # carga efetiva \nlabel %C \n\n      Complementarmente, pode-se atuar alterando mais comandos do código, de modo a criar um resultado completamente diferente do original. Isso define outra característica do Ensino Reprodutível, qual seja, a de criação de trecho de código. Ilustrando, segue um trecho baseado no anterior, mas para minimização de energia e reestruturação dos orbitais da molécula.\n\nload $glu # carregamento de micromolécula \ncpk only # renderização exclusiva por espaço preenchido\nminimize # comando para minimização de energia da estrutura"
  },
  {
    "objectID": "comandos.html#características-moleculares-1",
    "href": "comandos.html#características-moleculares-1",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Características moleculares",
    "text": "Características moleculares\n      Além de previsão estrutural para carga parcial e carga formal (embora essa última dependa na prática de informação adicional, o valor de pH do meio), o Jmol também permite evidenciar forças fracas no modelo, tais como nuvem de van der Waals e ligações de hidrogênio, como segue.\n\nNuvem de van der Waals\n\ndots on # nuvem de van der Waals nos átomos do modelo (retira-se com \"dots off\")\ncalculate hbonds # identifica ligações de hidrogênio no modelo\n\n      Ilustrando, copie e cole o trecho que segue no Console:\n\nload $water\ndots on # nuvem de van der Waals na estrutura da água\ndots ionic # nuvem iônica sobre o modelo\n\n\n\n\nExemplificando a sobreposição de nuvens de van der Waals nos átomos da molécula de água.\n\n\n ### Ligações de hidrogênio\n\nload=1djf # carrega um modelo de peptídio\ncalculate hbonds # apresenta as ligações de H presentes na estrutura\n\n\n\n\nExemplificando ligações de hidrogênio num modelo de peptídio."
  },
  {
    "objectID": "comandos.html#superfícies",
    "href": "comandos.html#superfícies",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Superfícies",
    "text": "Superfícies\n      Além da superfície de van der Walls (dots on) vista acima, o Jmol é capaz de representar algumas superfícies para modelos moleculares. Quanto maior a molécula, maior o cálculo interno para gerar a superfície, o que pode dificultar sua visualização. Assim, ilustrando algumas superfícies para a molécula de água:\n\nisosurface molecular # superfície molecular que inclui o solvente\n\n\n\n\nSuperfície molecular para o modelo da água.\n\n\n\nisosurface mep # superfície de potencial eletrostático molecular\n\n\n\n\nExemplo de superfície de potencial eletrostático para a água.\n\n\n\nisosurface resolution 6 molecular map mep # superfície de potencial eletrostático molecular com atributos\n\n\n\n\nExemplo de superfície molecular da água que inclui seu potencial eletrostático.\n\n\n      Várias outras combinações de superfície podem ser obtidas no [site de referência do Jmol.(https://chemapps.stolaf.edu/jmol/docs/)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "questoes.html",
    "href": "questoes.html",
    "title": "Algumas questões prévias",
    "section": "",
    "text": "Bom, como diz o título, de vivificar imagens e relações numéricas encontrados em livros-texto. Em palavras mais abstratas…da tentativa de se oferecer algumas ferramentas para compor objetos didáticos para o Ensino Médio, principalmente para temas de Física, Química e Biologia contidos em Ciências da Natureza e Suas Tecnologias, também com aplicações da Matemática e baseadas em premissas de Ensino Reprodutível.\n      Agora, de modo mais claro, de instrumentalizar professores ao uso de dois programas básicos de computador, um para visualização de moléculas em 3D, e outro para vivificar algumas relações estáticas encontradas em livros-texto por animações, interatividade, e simulações."
  },
  {
    "objectID": "questoes.html#de-que-se-trata-esse-material",
    "href": "questoes.html#de-que-se-trata-esse-material",
    "title": "Algumas questões prévias",
    "section": "",
    "text": "Bom, como diz o título, de vivificar imagens e relações numéricas encontrados em livros-texto. Em palavras mais abstratas…da tentativa de se oferecer algumas ferramentas para compor objetos didáticos para o Ensino Médio, principalmente para temas de Física, Química e Biologia contidos em Ciências da Natureza e Suas Tecnologias, também com aplicações da Matemática e baseadas em premissas de Ensino Reprodutível.\n      Agora, de modo mais claro, de instrumentalizar professores ao uso de dois programas básicos de computador, um para visualização de moléculas em 3D, e outro para vivificar algumas relações estáticas encontradas em livros-texto por animações, interatividade, e simulações."
  },
  {
    "objectID": "questoes.html#qual-a-vantagem-em-se-familiarizar-com-esses-programas",
    "href": "questoes.html#qual-a-vantagem-em-se-familiarizar-com-esses-programas",
    "title": "Algumas questões prévias",
    "section": "Qual a vantagem em se familiarizar com esses programas ?",
    "text": "Qual a vantagem em se familiarizar com esses programas ?\n      Também em módicos termos, para oferecer aos alunos uma visão mais paupável e amigável de conteúdos trazidos de livros-texto do nível educacional da proposta."
  },
  {
    "objectID": "questoes.html#como-alunos-do-ensino-médio-podem-beneficiar-se-da-oferta-das-ferramentas-que-serão-tratadas-aqui",
    "href": "questoes.html#como-alunos-do-ensino-médio-podem-beneficiar-se-da-oferta-das-ferramentas-que-serão-tratadas-aqui",
    "title": "Algumas questões prévias",
    "section": "Como alunos do ensino médio podem beneficiar-se da oferta das ferramentas que serão tratadas aqui ?",
    "text": "Como alunos do ensino médio podem beneficiar-se da oferta das ferramentas que serão tratadas aqui ?\n      Isto tem muito a ver com o conceito de letramento visual (visual literacy) e também com letramento científico. Em síntese, os livros-texto oferecem formas distintas de apresentação de conteúdos, e que exigem do estudante diferentes níveis de abstração, como o simbólico (fórmula estrutural, equação), esquemático (fluxogramas, geovisualização), gráfico (relação entre variáveis), realístico (resultado experimental), e de cartoon (estrutura molecular).\n      Assim, pretende-se oferecer uma ferramenta para auxiliar na abstração de cartoon, e outra para o simbólico, esquemático, gráfico, e de análise de dados presente na abstração realística. Essa segunda ferramenta permitirá acessar o conteúdo de livros-texto por animações e simulações.\n      Na prática imediata e de curto prazo, essas ferramentas poderão possibilitar um menor nível de abstração para alguns conteúdos encontrados em livros-texto do Ensino Médio, por exemplo:\n\npermitindo a visualização de uma molécula em 3D, sua rotação, tamanho, estudo estrutural e químico, funções orgânicas, relações de estrutura e função, e animações.\npermitindo a elaboração de gráficos animados a partir de equações, visualização interativa de gráficos, e simulações."
  },
  {
    "objectID": "questoes.html#e-quais-são-essas-ferramentas",
    "href": "questoes.html#e-quais-são-essas-ferramentas",
    "title": "Algumas questões prévias",
    "section": "E quais são essas ferramentas ?",
    "text": "E quais são essas ferramentas ?\n      Para a visualização de moléculas em 3D será empregado o Jmol, e para os demais mencionados o programa R com sua interface gráfica RStudio. São programas gratuitos para instalação em computador de mesa ou notebook, embora também acessáveis por navegador de internete, e nesse caso, sem necessidade de instalação."
  },
  {
    "objectID": "questoes.html#se-este-material-envolve-o-uso-de-livros-texto-qual-bibliografia-será-utilizada",
    "href": "questoes.html#se-este-material-envolve-o-uso-de-livros-texto-qual-bibliografia-será-utilizada",
    "title": "Algumas questões prévias",
    "section": "Se este material envolve o uso de livros-texto, qual bibliografia será utilizada ?",
    "text": "Se este material envolve o uso de livros-texto, qual bibliografia será utilizada ?\n      Será utilizado algum conteúdo geral presente no Material de Apoio Pedagógico para Aprendizagens - MAPA para habilidades previstas no Currículo Referência de Minas Gerais, e pertinente principalmente à Ciências da Natureza, Matemática, e Suas Tecnologias."
  },
  {
    "objectID": "questoes.html#além-dos-conteúdos-específicos-com-algum-potencial-para-melhorar-o-aprendizado-do-estudante-há-outra-vantagem-no-aprendizado-dos-programas",
    "href": "questoes.html#além-dos-conteúdos-específicos-com-algum-potencial-para-melhorar-o-aprendizado-do-estudante-há-outra-vantagem-no-aprendizado-dos-programas",
    "title": "Algumas questões prévias",
    "section": "Além dos conteúdos específicos com algum potencial para melhorar o aprendizado do estudante, há outra vantagem no aprendizado dos programas ?",
    "text": "Além dos conteúdos específicos com algum potencial para melhorar o aprendizado do estudante, há outra vantagem no aprendizado dos programas ?\n      Diversas. De início, a familiarização com conceitos de programação computacional. O Jmol é mais fechado, já que trabalha somente com a renderização de modelos moleculares. O que já é muito bom para se visualizar a imensidade de moléculas presentes em livros-texto. Já o R é outra história.\n      O R permite uma infinidade de ações, quer voltadas à pesquisa ou ao ensino. É utilizado por diversas Universidades ao redor do mundo, bem por diversas Universidades e empresas (ex: Google, Facebook, LinkedIn, Twitter, Bank of America, Lenovo, Bing). Embora tenha sido originalmente desenvolvido para análise de dados, possui hoje mais de 20 mil pacotes adicionais.\n      Essa expansibilidade permite, por exemplo, recursos de matemática, estatística, gráficos e tabelas avançados, animações e simulações, análise de imagem e de texto, criação musical e artística, ciência de dados, inteligência artificial, comunicação com placas microcontroladores (ex: Arduino), internete das coias (IoT), criação de blogs, de websites, e de livros (tal como usado para produzir este material)."
  },
  {
    "objectID": "questoes.html#e-o-tal-ensino-reprodutível-de-que-se-trata",
    "href": "questoes.html#e-o-tal-ensino-reprodutível-de-que-se-trata",
    "title": "Algumas questões prévias",
    "section": "E o tal Ensino Reprodutível, de que se trata ?",
    "text": "E o tal Ensino Reprodutível, de que se trata ?\n      Ensino Reprodutível (ER) uma metodologia ativa em ensino-aprendizagem ainda em formação, e que mistura trechos de algoritmos com conteúdos temáticos, ambos editáveis num simples bloco de notas. Na prática, o ER envolve aplicar códigos escritos em um programa específico para a produção de um objeto didático, incluindo aí um modelo molecular, um gráfico, uma tabela, uma mídia, um texto formatado com saída em DOCX, PDF ou EPUB, uma animação, e/ou uma simulação, dentre vários.\n      Dessa forma é possível imaginar que um aprendiz agregue valor a seu aprendizado ao 1) repetir a execução do código num programa específico, 2) alterar algum trecho do código para observar um resultado diferente, ou mesmo 3) criar um novo código buscando outro produto final. Nesse caso, a reprodutibiidade está centrada na criação/modificação do objeto didático, e que pode ser realizada por qualquer pessoa que tenha o programa e o código."
  },
  {
    "objectID": "textoXmouse.html",
    "href": "textoXmouse.html",
    "title": "Cliques de mouse versus linhas de comando",
    "section": "",
    "text": "Qualquer programa de computador que você já tenha usado, ou mesmo de dispositivos móveis, tem sua usabilidade centrada na facilidade de uso por cliques e arrastes com mouse, touchpad, e mesmo os dedos (telas capacitivas). Isso facilita muito as ações rápidas pretendidas. Exemplificando para editores de texto, é comum se clicar num ícone de formatação (itálico, negrio, por ex) ou mesmo digitar seu atalho, para concluir o que se deseja no texto.\n      Simples, prático, e rápido. Dessa mesma forma, pode-se utilizar o Jmol, tanto na versão baixada no computador, como na versão online. Para a versão baixada basta observar a gama de ítens de menus e submenus. Já para versão de navegador, veja que não há menu !\n\n      Não obstante, a versão online permite visualizar a mesma informação, embora com outra formatação, bastando-se clicar com o botão direito do mouse em qualquer área do ecrã (nome chique pra tela contendo alguma informação, a molécula, no caso)."
  },
  {
    "objectID": "textoXmouse.html#cliques-de-mouse",
    "href": "textoXmouse.html#cliques-de-mouse",
    "title": "Cliques de mouse versus linhas de comando",
    "section": "",
    "text": "Qualquer programa de computador que você já tenha usado, ou mesmo de dispositivos móveis, tem sua usabilidade centrada na facilidade de uso por cliques e arrastes com mouse, touchpad, e mesmo os dedos (telas capacitivas). Isso facilita muito as ações rápidas pretendidas. Exemplificando para editores de texto, é comum se clicar num ícone de formatação (itálico, negrio, por ex) ou mesmo digitar seu atalho, para concluir o que se deseja no texto.\n      Simples, prático, e rápido. Dessa mesma forma, pode-se utilizar o Jmol, tanto na versão baixada no computador, como na versão online. Para a versão baixada basta observar a gama de ítens de menus e submenus. Já para versão de navegador, veja que não há menu !\n\n      Não obstante, a versão online permite visualizar a mesma informação, embora com outra formatação, bastando-se clicar com o botão direito do mouse em qualquer área do ecrã (nome chique pra tela contendo alguma informação, a molécula, no caso)."
  },
  {
    "objectID": "textoXmouse.html#sec-linhasComando",
    "href": "textoXmouse.html#sec-linhasComando",
    "title": "Cliques de mouse versus linhas de comando",
    "section": "Linhas de comando",
    "text": "Linhas de comando\n      Assim como para cliques de mouse, também é possível acessar um campo de texto para digitar comandos do Jmol, tanto na versão baixada (standalone), como na versão de navegador (applet JSmol). Para a primeira, clique em File–&gt;Console, e surgirá uma janela para inserção de texto. Na versão online, clique com o botão direito do mouse em qualquer ponto do ecrã e escolha Console."
  },
  {
    "objectID": "textoXmouse.html#cliques-de-mouse-versus-linhas-de-comando",
    "href": "textoXmouse.html#cliques-de-mouse-versus-linhas-de-comando",
    "title": "Cliques de mouse versus linhas de comando",
    "section": "Cliques de mouse versus linhas de comando",
    "text": "Cliques de mouse versus linhas de comando\n      Ainda que seja possível utilizar o Jmol tanto cliques de mouse como por comandos de texto, qual é o melhor ?\n      Para auxiliar na resposta, exemplifiquemos com o uso de uma planilha eletrônica, como o Excel do pacote MS-Office, ou o Calc do pacote Libreoffice, ou o Planilhas da suite Google. Suponha que você deseje fazer um gráfico simples, pegando duas colunas, cada qual para uma variável (independente ou x, e dependente, ou y). O usual seria clicar em um ítem de menu para gráficos, selecionar as colunas desejadas em campos específicos da janela que se abre, selecionar o tipo de gráfico, clicar em avançar ou algum termo similar, selecionar outras características (etiquetas em x e y, por ex), e finalmente clicar em concluir (ou OK, ou termo de significado similar). Simples, rápido, e prático.\n      Mas (sempre tem um “mas”)…e se você precisasse, além de construir o gráfico, realizar ações adicionais, como obter o ajuste linear dos dados, apresentar a reta resultante com determinada cor e estilo, inserir a equação de reta em um ponto específico do gráfico, colocar um título, e alterar o símbolo dos pontos, tanto o tipo, quanto o tamanho e a cor. Ufa !!!\n      Sem problema, também…desde que você tenha um bom tutorial ao lado, claro ! Ou que já esteja familiarizado com o programa da planilha, menus e ações pertinentes aos vários cliques de mouse que serão necessário para se obter um belo gráfico de regressão linear ao final.\n      Agora…mais uma pequena variável a inserir ao exemplo levantado: suponha que não seja você a construir o gráfico, mas um aluno(a)(a) de sua disciplina, e que não foi treinado nem no uso da planilha, e nem nos cálculos pretendidos !\n      Perceba que agora haverá um certo desconforto, posto que:\n\nO aluno(a) não possui conhecimento prévio no uso da planilha;\nO aluno(a) não possui conhecimento prévio nos cálculos pretendidos;\nVocê terá de treinar o aluno(a), ou oferecer-lhe um guia de treinamento correlato;\nCaso já tenha ocorrido o treinamento, mas não se esteja com o guia em mãos, tanto você como aluno(a) dependerão da capacidade de retenção de memória para efetivar com sucesso a empreita.\n\n      Agora, e se as orientações para a execução do produto final estivessem, não num guia para a repetição de clique de mouse, mas sim num pequeno texto contendo tanto os comandos em sequência como os comentários explicativos de cada ação individual, e que quando inserido no programa gerasse o gráfico todo formatado ?"
  },
  {
    "objectID": "textoXmouse.html#vantagens-do-uso-de-linhas-de-comando-sobre-o-uso-de-cliques",
    "href": "textoXmouse.html#vantagens-do-uso-de-linhas-de-comando-sobre-o-uso-de-cliques",
    "title": "Cliques de mouse versus linhas de comando",
    "section": "Vantagens do uso de linhas de comando sobre o uso de cliques",
    "text": "Vantagens do uso de linhas de comando sobre o uso de cliques\n      Pelo exemplo hipotético acima, perceba que um pequeno texto contendo as linhas de comando em sequência e os comentários referentes a esses permitem:\n\nque o produto final seja elaborado sem prévio conhecimento do aluno(a); basta executar o código no programa;\nque o produto final seja elaborado independentemente da memória dos envolvidos (sequência de cliques, por ex);\numa quantidade virtualmente infinita de ações sequenciais, sem necessidade de se decorar a ordem dos cliques de mouse;\no aprendizado de cada comando utilizado em linguagem humana, posto que existem comentários do autor para cada linha;\nque o produto possa ser modificado para gerar um objeto diferente (alteração de cor, etiquetas de eixos, outro título, por ex)\nque se reproduza o mesmo gráfico, só que com outros valores para as variáveis (x e y);\nque o aprendiz experimente outros comandos para agregar formatações e/ou cálculos distintos ao produto;\nque você ou o aluno(a) consigam reproduzir o produto sem recorrer à memória e até por séculos depois, se as previsões de extinção em massa não vingarem;\nque qualquer pessoa consiga reproduzir o objeto, independentemente de seu grau de instrução técnica ou de operabilidade do programa;\nenfim, que se consiga ensinar determinado conteúdo de modo reprodutível…ou…Ensino Reprodutível.\n\n      Dessa forma, pretende-se nesse curso utilizar somente linhas de comando, para que se permita materializar-se as vantagens descritas acima, tangentes a uma metodologia voltada, ainda que incipiente, ao Ensino Reprodutível, e tanto para a ferramenta Jmol, como para a ferramenta R & RStudio.\n      Em relação ao Jmol, portanto, as ações sequenciais para visualização tridimensional de modelos moleculares será realizada pelo Console acessável conforme ítem Section 2 acima."
  },
  {
    "objectID": "textoXmouse.html#scripts",
    "href": "textoXmouse.html#scripts",
    "title": "Cliques de mouse versus linhas de comando",
    "section": "Scripts",
    "text": "Scripts\n      Colocado da forma acima, quando se tem um conjunto qualquer de linhas de comando sequenciais, permitindo atuar sobre o modelo molecular para uma infinidade de coisas, tem-se então um script. Tecnicamente falando, um script constitui um bloco de instruções sequenciais em texto para compilação em um programa.\n      Scripts podem ser elaborados no Jmol em browser por duas maneiras:\n\n1. Separando os comandos por \";\" - ex: \"cpk only; color blue\"\n2. Separndo os comandos por linhas - ex:\n                                   \"cpk only\n                                    color blue\"\n\n      Se você deseja que o modelo realize uns poucos comandos, a melhor opção é separá-los por ponto e vírgula (“;”). Mas se desejar algo mais “sofisticado”, sugere-se separá-los por linhas. E mais…linhas comentadas e escritas em um bloco de notas ou em qualquer editor de texto !\n\nVantagens do uso de bloco de notas ou editor de texto para comandos em série\n      Imaginando-se uma tranformação mais significativa à molécula original carregada, como efeitos de ampliação, coloração, representação e movimento, é fácil perceber que um conjunto de linhas comentadas dispostas em sequência facilita tanto a observação do que se pretende com o modelo, como a identificação de erros e ajustes.\n      Isto também é herdado aos conceitos de Ensino Reprodutível, uma vez que facilita a visualização do código (human readable format) e sua depuração (code debug). Veja o exemplo que segue, reflita sobre sua interpretação, copie e teste-o no Console do Jmol.\n\nload $butene\nbackground black # cor preta do plano de fundo\nload $cholesterol # carrega a molécula de colesterol\ndelay 1 # aguarda 1 segundo\nbackground white # altera a cor do plano de fundo\nspin 80 # gira a molécula\ndelay 3 # ...por 3 segundos\nspin off # interrompe a rotação\ncpk # renderiza como modelo de preenchimento\ncolor cpk # coloriza no padrão de modelos moleculares\nisosurface molecular # renderiza a superfície\nspin 30 # gira mais um poquinho\ndelay 6 # ...também por 3 segundos\nspin off # interrompe novamente a rotação\nzoomTo 0.5 *3  # amplia 300% na tela durante 1 segundo\nisosurface off # retira a superfície molecular\nwireframe only # retorna à representação de varetas\nwireframe 50 # espessura das varetas\nzoomTo 5 * 0.01 # ... e vai sumindo aos poucos\n\n      Uma outra opção para adicionar scripts diretamente no Jmol, verificar a existência de erros previamente à execução dos comandos, e testar as linhas passo a passo para a depuração, pode realizar-se na opção do programa instalado (somente). Para tanto, siga os passos que seguem.\nrode o programa Jmol que está no computador ou numa mídia removível a partir de seu arquivo Jmol.jar após descompactação do arquivo baixado do próprio site do Jmol, e escolha do Script Editor\n\n1. Entre no site do Jmol (https://jmol.sourceforge.net/) ;\n2. Faça o Download do programa compactado no computador ou mídia removível ;\n3. Localize o arquivo compactado que foi baixado ;\n4. Descompacte o arquivo ;\n5. Selecione o arquivo \"Jmol.jar\", de execução em JAVA (é necessário que o computador tenha a máquina JAVA instalada (JRE), mas isso é comum nos equipamentos com menos de 10 anos !!)\n6. Selecione \"File -&gt; Script Editor\" \n\n      Para testar o Editor de Scripts, copie e cole o script abaixo para a papaína, uma proteína do mamão:\n\nload=9pap  # carregando a estrutura\ndelay 2 # aguarda 2 segundos\ncartoon only # representando em desenho\ncolor structure # coloração por estrutura 2a.\ndelay 1 # pausa de 1 segundo\nzoom 200 # ampliação de 2 vezes\ndelay 1\nreset # restabelece as coordenadas\nspin 300 # giro rápido da molécula !\n\n      Veja que é possível testar se as linhas de comando estão com a sintaxe correta (check), testar os comandos linha a linha (step), ou rodar o script como um todo (run).\n\n\n\nExemplo do uso do Script Editor da versão instalada do Jmol em computador ou mídia removível.\n\n\n      Alguns exemplos de scripts são ilustrados na ?@sec-selecao."
  },
  {
    "objectID": "comandosJmol.html",
    "href": "comandosJmol.html",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "",
    "text": "Supondo que você já tenha aberto em seu navegador a janela para o applet do JSmol mas que, contrariamente ao que foi feito antes (nome da molécula ao final do site PubChem, você queira:\n\ncarregar uma molécula a partir de outro banco de dados;\ncarregar uma molécula cujo arquivo já esteja em seu computador\n\n      Bom, nesse caso você pode usar o mouse ou uma linha de comando, como preferir.\n\n\n      Para isto basta clicar com o botão direito do mouse no ecrã, como anteriormente, e selecionar File–&gt;Load. As opções que se apresentam são:\n\n* Open local file # abre janela para buscar o arquivo do modelo no computador;\n* Open URL # abre janela para buscar o endereço de internete que possui o arquivo\n* Get PDB file # abre janela para inserir um código de macromolécula do site homônimo (proteínas, ácidos nucleicos, principalmente)\n* Get MOL file # abre janela para buscar um arquivo *.mol\n* Open script # abre janela para buscar um trecho de código no computador\n\n      A primeira opção é autoexplicativa (Open local file), a segunda opção (Open URL) depende do endereço correto para um determinado modelo molecular, a terceira (Get PDB file) refere-se ao banco de dados Protein Data Brookhaven para biopolímeros, a quarta (Get MOL file) envolve a busca online em banco de dados específico para pequenas moléculas, e a última (Open script), a busca de um arquivo que contenha linhas de código do Jmol para um conjunto de ações.\n      Como os livros didáticos permeiam estruturas moleculares pequenas, normalmente associadas aos grupos funcionais da Química Inorgânica e Orgânica, bem como exemplos específicos em áreas como Saúde, Biotecnologia e Indústria, incluindo também alguns modelos de macromoléculas, pode-se concluir que é mais provável que você utilize a busca remota de pequenas moléculas (Get MOL file), moléculas contidas em seu computador (Open local file), e/ou biomacromoléculas (Get PDB file).\n      O carregamento de pequenas moléculas é idêntico ao que foi experimentado adicionando-se o nome do modelo ao final do endereço do JSmol. O carregamento remoto para modelos de proteínas, enzimas e ácidos nucleicos envolve o conhecimento do código PDB desses, ou busca de palavras-chave no sítio Protein Data Brookhaven.\n      Já o carregamento de moléculas guardadas no PC envolve algumas poucas etapas, a saber:\n\nObtém-se o modelo da molécula pela internete, ou o constroi;\nBaixa-se o arquivo correspondente ao modelo (geralmente com um atributo *.mol, *.cif, *.cml, *.sdf, entre mais de 60 formatos);\nCarrega-se na página do JSmol por dois meios alternativos:\n\n\n1. Por clique de mouse: File --&gt; Load --&gt; Open local file ;\n2. Por arraste do arquivo da pasta onde se encontre para a aba do JSmol no navegador.\n\n\n    Exemplificando, digamos que você queira visualizar a estrutura da aspirina baixada em seu computador.\n\n1. Baixe o modelo estrutural da aspirina em algum site, como o PubChem ;\n2. Abra o Console do JSmol no navegador (clique no ecrã com o botão direito do mouse e selecione \"Console\");\n3. Alternativamente:\n  a. Localize o arquivo no PC por \"File--&gt;Load--&gt;Open local file\", clicando depois em \"Load\" para o carregamento;\n  b. Clique no arquivo baixado (\"aspirin.sdf\", por ex) e arraste-o diretamente para a janela do JSmol. \n\n\n\n\nExemplo do modelo da aspirina para download no PubChem.\n\n\n\n\n\n      O carregamento de um modelo em particular por linha de comando restringe-se à sua busca pela internete, em banco de dados ou páginas da web. Para isso, abre-se o Console como já explicado. A parte de cima serve para apresentação dos resultados dos comandos, e a parte de baixo, para sua digitação. Nesse caso, clique no quadro inferior do Console e digite o comando de carregamento, aqui exemplificado para um alcano:\n\nload $alkane\n\n      O Console do Jmol, ainda que constitua uma linguagem própria de programação de comandos, possui uma vantagem interessante sobre demais linguagens de programação: é possível efetuar o comando pelo Console tanto com letras maiúsculas como minúculas, e tanto no singular como no plural.\n      Você pode tentar com outras moléculas, como aspirin, cholesterol, phenol etc (nomes em inglês, por conta do banco de dados). Para recuperar uma linha de comando que foi escrita antes, basta navegar entre os comandos que foram utilizados com as setas para cima e para baixo do teclado.\nOs modelos moleculares são carregados a partir do banco de dados Cactus - CADD Group Chemoinformatics Tools and User Services.\n\n\n      SMILES-Simplified Molecular Input Line Entry System trata de uma notação química que permite representar as moléculas inserindo-se o nome de cada átomo em sequência em ligações simples, bem como o local de ligações insaturadas, ou ligações aromáticas.\n      O PubChem possui também a notação SMILES como alternativa para carregamento de modelos. Seguem alguns exemplos da notação para carregamento da molécula no Console do Jmol.\n      Para hidrocarbonetos sem ligações insaturadas (alcanos) é possível carregar a molécula digitando somente a sequência de carbonos, como segue:\n\n# Para carregar um metano\nload $C # carrega o modelo\n\n\n# Para carregar um hexano\nload $CCCCCC # carrega o modelo\n\n      Agora, para carregar hidrocarbonetos com uma ligação insaturada (alcenos), basta inserir o sinal de igualdade (=) onde aparece a insaturação:\n\n# Para carregar um propeno (propileno)\nload $CC=C # carrega o modelo\n\n      Para carregar um modelo com ligação tripla, segue-se a notação #:\n\n# Para carregar um metilacetileno (ou ....propina !)\nload $CC#C # carrega o modelo\n\n      Para carregar uma estrutura aromática, já um pouco mais chatinho:\n\n# Para carregar um benzeno\nload $C1=CC=CC=C1 \n\n\n\n\n\n      Como mecionado acima, o carregamento de macromoléculas biológicas dá-se por identificação de um código alfanumérico da mesma frente ao banco de dados PDB-Protein Data Bank. Após obter esse código, o comando de carregamento é:\n\nload=XXXX # onde XXXX é o código da macromolécula110\n# Obs: Perceba que o sinal de \"$\" é trocado por \"=\" para o PDB\n\n      Isso pode ser ilustrado por carregamento remoto da proteína espícula (spike) do vírus Sars-Cov-2, tal como segue:\n\n1. Entre no site do PDB-Protein Data Bank - https://www.rcsb.org/ ; \n2. No campo de busca, digite \"spike sars-cov-2\" ;\n3. Selecione a 1a opção (o site vai direcionar para várias estruturas da proteína espícula) ;\n4. Memorize o código da 1a. opção (embora qualquer uma também sirva), ou seja, \"7FCD\" ;\n5. Digite a linha para carregar a proteína: \"load=7FCD\" (tanto faz se maiúsculas ou minúsculas)\n\n      A representação padrão para proteínas no Jmol é a de arame (wireframe). Para visualizar a proteína do vírus de modo mais “amigável” e semelhante ao que aparece em textos ou na internete, digite os comandos abaixo.\n\ncartoon only  # representação exclusiva de desenho da estrutura de biopolímeros\ncolor chain #  coloração por \"cadeias\" da proteína\n\n\n\n\nRepresentação da proteína spike do vírus de Sars-Cov-2 (coloração por número de cadeias.\n\n\n      Proteínas, enzimas, ácidos nucleicos, e associações macromoleculares são mais pertinentes ao estudo da Bioquímica estrutural. Nesse sentido lhe convido a visitar uma parte do website autoral que possui descrições e representações detalhadas de estruturas bioquímicas com auxílio do Jmol, o site Bioquanti\n\n\n\nBioquanti, um website autoral para estudos quantitativos em Bioquímica, e que inclui diversos modelos moleculares para o Jmol."
  },
  {
    "objectID": "comandosJmol.html#como-carregar-uma-molécula-no-jsmol",
    "href": "comandosJmol.html#como-carregar-uma-molécula-no-jsmol",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "",
    "text": "Supondo que você já tenha aberto em seu navegador a janela para o applet do JSmol mas que, contrariamente ao que foi feito antes (nome da molécula ao final do site PubChem, você queira:\n\ncarregar uma molécula a partir de outro banco de dados;\ncarregar uma molécula cujo arquivo já esteja em seu computador\n\n      Bom, nesse caso você pode usar o mouse ou uma linha de comando, como preferir.\n\n\n      Para isto basta clicar com o botão direito do mouse no ecrã, como anteriormente, e selecionar File–&gt;Load. As opções que se apresentam são:\n\n* Open local file # abre janela para buscar o arquivo do modelo no computador;\n* Open URL # abre janela para buscar o endereço de internete que possui o arquivo\n* Get PDB file # abre janela para inserir um código de macromolécula do site homônimo (proteínas, ácidos nucleicos, principalmente)\n* Get MOL file # abre janela para buscar um arquivo *.mol\n* Open script # abre janela para buscar um trecho de código no computador\n\n      A primeira opção é autoexplicativa (Open local file), a segunda opção (Open URL) depende do endereço correto para um determinado modelo molecular, a terceira (Get PDB file) refere-se ao banco de dados Protein Data Brookhaven para biopolímeros, a quarta (Get MOL file) envolve a busca online em banco de dados específico para pequenas moléculas, e a última (Open script), a busca de um arquivo que contenha linhas de código do Jmol para um conjunto de ações.\n      Como os livros didáticos permeiam estruturas moleculares pequenas, normalmente associadas aos grupos funcionais da Química Inorgânica e Orgânica, bem como exemplos específicos em áreas como Saúde, Biotecnologia e Indústria, incluindo também alguns modelos de macromoléculas, pode-se concluir que é mais provável que você utilize a busca remota de pequenas moléculas (Get MOL file), moléculas contidas em seu computador (Open local file), e/ou biomacromoléculas (Get PDB file).\n      O carregamento de pequenas moléculas é idêntico ao que foi experimentado adicionando-se o nome do modelo ao final do endereço do JSmol. O carregamento remoto para modelos de proteínas, enzimas e ácidos nucleicos envolve o conhecimento do código PDB desses, ou busca de palavras-chave no sítio Protein Data Brookhaven.\n      Já o carregamento de moléculas guardadas no PC envolve algumas poucas etapas, a saber:\n\nObtém-se o modelo da molécula pela internete, ou o constroi;\nBaixa-se o arquivo correspondente ao modelo (geralmente com um atributo *.mol, *.cif, *.cml, *.sdf, entre mais de 60 formatos);\nCarrega-se na página do JSmol por dois meios alternativos:\n\n\n1. Por clique de mouse: File --&gt; Load --&gt; Open local file ;\n2. Por arraste do arquivo da pasta onde se encontre para a aba do JSmol no navegador.\n\n\n    Exemplificando, digamos que você queira visualizar a estrutura da aspirina baixada em seu computador.\n\n1. Baixe o modelo estrutural da aspirina em algum site, como o PubChem ;\n2. Abra o Console do JSmol no navegador (clique no ecrã com o botão direito do mouse e selecione \"Console\");\n3. Alternativamente:\n  a. Localize o arquivo no PC por \"File--&gt;Load--&gt;Open local file\", clicando depois em \"Load\" para o carregamento;\n  b. Clique no arquivo baixado (\"aspirin.sdf\", por ex) e arraste-o diretamente para a janela do JSmol. \n\n\n\n\nExemplo do modelo da aspirina para download no PubChem.\n\n\n\n\n\n      O carregamento de um modelo em particular por linha de comando restringe-se à sua busca pela internete, em banco de dados ou páginas da web. Para isso, abre-se o Console como já explicado. A parte de cima serve para apresentação dos resultados dos comandos, e a parte de baixo, para sua digitação. Nesse caso, clique no quadro inferior do Console e digite o comando de carregamento, aqui exemplificado para um alcano:\n\nload $alkane\n\n      O Console do Jmol, ainda que constitua uma linguagem própria de programação de comandos, possui uma vantagem interessante sobre demais linguagens de programação: é possível efetuar o comando pelo Console tanto com letras maiúsculas como minúculas, e tanto no singular como no plural.\n      Você pode tentar com outras moléculas, como aspirin, cholesterol, phenol etc (nomes em inglês, por conta do banco de dados). Para recuperar uma linha de comando que foi escrita antes, basta navegar entre os comandos que foram utilizados com as setas para cima e para baixo do teclado.\nOs modelos moleculares são carregados a partir do banco de dados Cactus - CADD Group Chemoinformatics Tools and User Services.\n\n\n      SMILES-Simplified Molecular Input Line Entry System trata de uma notação química que permite representar as moléculas inserindo-se o nome de cada átomo em sequência em ligações simples, bem como o local de ligações insaturadas, ou ligações aromáticas.\n      O PubChem possui também a notação SMILES como alternativa para carregamento de modelos. Seguem alguns exemplos da notação para carregamento da molécula no Console do Jmol.\n      Para hidrocarbonetos sem ligações insaturadas (alcanos) é possível carregar a molécula digitando somente a sequência de carbonos, como segue:\n\n# Para carregar um metano\nload $C # carrega o modelo\n\n\n# Para carregar um hexano\nload $CCCCCC # carrega o modelo\n\n      Agora, para carregar hidrocarbonetos com uma ligação insaturada (alcenos), basta inserir o sinal de igualdade (=) onde aparece a insaturação:\n\n# Para carregar um propeno (propileno)\nload $CC=C # carrega o modelo\n\n      Para carregar um modelo com ligação tripla, segue-se a notação #:\n\n# Para carregar um metilacetileno (ou ....propina !)\nload $CC#C # carrega o modelo\n\n      Para carregar uma estrutura aromática, já um pouco mais chatinho:\n\n# Para carregar um benzeno\nload $C1=CC=CC=C1 \n\n\n\n\n\n      Como mecionado acima, o carregamento de macromoléculas biológicas dá-se por identificação de um código alfanumérico da mesma frente ao banco de dados PDB-Protein Data Bank. Após obter esse código, o comando de carregamento é:\n\nload=XXXX # onde XXXX é o código da macromolécula110\n# Obs: Perceba que o sinal de \"$\" é trocado por \"=\" para o PDB\n\n      Isso pode ser ilustrado por carregamento remoto da proteína espícula (spike) do vírus Sars-Cov-2, tal como segue:\n\n1. Entre no site do PDB-Protein Data Bank - https://www.rcsb.org/ ; \n2. No campo de busca, digite \"spike sars-cov-2\" ;\n3. Selecione a 1a opção (o site vai direcionar para várias estruturas da proteína espícula) ;\n4. Memorize o código da 1a. opção (embora qualquer uma também sirva), ou seja, \"7FCD\" ;\n5. Digite a linha para carregar a proteína: \"load=7FCD\" (tanto faz se maiúsculas ou minúsculas)\n\n      A representação padrão para proteínas no Jmol é a de arame (wireframe). Para visualizar a proteína do vírus de modo mais “amigável” e semelhante ao que aparece em textos ou na internete, digite os comandos abaixo.\n\ncartoon only  # representação exclusiva de desenho da estrutura de biopolímeros\ncolor chain #  coloração por \"cadeias\" da proteína\n\n\n\n\nRepresentação da proteína spike do vírus de Sars-Cov-2 (coloração por número de cadeias.\n\n\n      Proteínas, enzimas, ácidos nucleicos, e associações macromoleculares são mais pertinentes ao estudo da Bioquímica estrutural. Nesse sentido lhe convido a visitar uma parte do website autoral que possui descrições e representações detalhadas de estruturas bioquímicas com auxílio do Jmol, o site Bioquanti\n\n\n\nBioquanti, um website autoral para estudos quantitativos em Bioquímica, e que inclui diversos modelos moleculares para o Jmol."
  },
  {
    "objectID": "comandosJmol.html#agora-que-a-molécula-está-na-página-do-navegador-o-que-posso-fazer-com-ela",
    "href": "comandosJmol.html#agora-que-a-molécula-está-na-página-do-navegador-o-que-posso-fazer-com-ela",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Agora que a molécula está na página do navegador, o que posso fazer com ela ?",
    "text": "Agora que a molécula está na página do navegador, o que posso fazer com ela ?\n      Muuuuuiiita coisa !!!\n      O Jmol possui um menu com diversas operações, e centenas de comandos, e talvez outra centena de tutoriais pela internete. Para observações estruturais mais diretas e imediatas, contudo, pode-se resumir as operações em:\n\nMovimentos com mouse (rotação, translação, zoom)\nRepresentações do modelo (bola e varetas, espaço preenchido, arame)\nCores (modelo e plano de fundo)\nMedidas (distâncias e ângulos)\nCaracterísticas moleculares (ligações de H, nuvem de van der Waals, carga parcial e efetiva)\nSuperfícies (molecular, eletrostática)\nSeleção de átomos e visualização (água, hidrogênio)\nAnimações (zoom, rotação automática), cortes\n\n      Uma observação importante é que todos dos comandos do Jmol possuem ajuda explicativa. Para tanto, basta digitar:\n\nhelp nome.do.comando"
  },
  {
    "objectID": "comandosJmol.html#salvamento-do-modelo-no-computador-ou-dispositivo-móvel",
    "href": "comandosJmol.html#salvamento-do-modelo-no-computador-ou-dispositivo-móvel",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Salvamento do modelo no computador ou dispositivo móvel",
    "text": "Salvamento do modelo no computador ou dispositivo móvel\n      Todas as ações realizadas com a molécula produzem um novo modelo que pode ser baixado para o computador. E isso é bem legal porque a molécula modificada (com alteração de cores, representações, animações, por ex) pode ser carregada no Jmol ou na JSmol (internet) como já mencionado. Para tanto, pode-se usar cliques de mouse ou linhas de comando, como segue:\n\n1. Botão direito no ecrã -&gt; File -&gt; Save -&gt; Save as PNG/JMOL # por mouse\n2. write nome_da_molecula # por linha de comando no Console\n\nObs: a opção PNG/JMOL é muito interessante, já que permite visualizar o modelo trabalhado em qualquer editor de imagem, bem como no Jmol.\n      Para exemplificar essas ações, usaremos inicialmente o modelo da vitamina C, carregando-o com o comando load $ascorbate. Mas se você quiser saber todos os comandos possíveis, faça uma visita ao site de referência do Jmol."
  },
  {
    "objectID": "comandosJmol.html#movimentos-com-mouse",
    "href": "comandosJmol.html#movimentos-com-mouse",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Movimentos com mouse",
    "text": "Movimentos com mouse\n      Para rotação e translação do modelo, bem como ampliação:\n\nzoom - botão do meio do mouse; se não houver o botão, Shift+botão esquerdo\nrotação - botão esquerdo do mouse\ntranslação - Ctrl+botão direito\nrotação no eixo - Shift+botão direito"
  },
  {
    "objectID": "comandosJmol.html#representações-do-modelo",
    "href": "comandosJmol.html#representações-do-modelo",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Representações do modelo",
    "text": "Representações do modelo\n      As representações referem-se ao aspecto visual do modelo (renderização). Assim, o Jmol pode renderizar o modelo como vareta, arame, espaço preenchido, bola e vareta, traço, e desenho. Experimente renderizar o nesses tipos, incluindo a opção only. Essa opção permite que a ação não seja sobreposta às anteriores (no caso, a sobreposição das representações).\n\nwireframe only # arame\ncpk only # espaço preenchido\ntrace only # traço\ncartoon only # desenho\n\n      Observe também que representação em cartoon não resulta numa renderização para o modelo da vitamina C. Isso decorre porque a representação em cartoon é restrita para biopolímeros, ou seja, proteínas e ácidos nucleicos.\n      Contudo, se quiser experimentar o cartoon, será necessário conhecer o código alfanumérico de uma proteína ou ácido nucleico. Exemplificando para a mioglobina, proteína transportadora de oxigênio em mamíferos (código: 1mcy)\n\nload=1mcy # carregando a mioglobina\n\n      Veja que a renderização padrão para grandes moléculas é a de bolas e varetas, pouco didática para o aprendiz. Nesse caso, pode-se representá-la como desenho exclusivo, digitando-se:\n\ncartoon only # renderizando em desenho\n\n      Para se conseguir esse e outros códigos de proteínas e ácidos nucleicos, deve-se entrar no banco de dados do PDB - Protein Data Bank, RCSB, e digitar o nome no campo de busca (no caso, myoglobin). O sistema retorna diversos modelos estruturais e seus códigos, bastando transcrever um desses códigos ao Console do JSmol."
  },
  {
    "objectID": "comandosJmol.html#cores",
    "href": "comandosJmol.html#cores",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Cores",
    "text": "Cores\n      Existe grande flexibilidade de cores para o Jmol (e, por consequência, para o JSmol), tanto para os modelos inteiros, partes do modelo (átomos específicos ou um conjunto), e plano de fundo. A visualização padrão de cores segue a convenção CPK (Corey–Pauling–Koltun). Exemplificando para o modelo anterior de vitamina C (load $ascorbate), experimente a variação que segue:\n\ncolor pink\ncolor blue\ncolor ligthgreen\nbackground yellow # plano de fundo\n\n      O último comando da lista acima permite variar a coloração do plano de fundo.\n      Adicionalmente, também é possível a coloração de ligações entre os átomos, como segue:\n\ncolor bonds LightSeaGreen\n\n      Para um grande espectro de cores, você pode consultar a referência do Jmol Colors, ou um link mais “mastigado”, de nossa autoria junto ao aprendizado do programa no ensino superior, o portal Bioquanti e, mais especificamente, o tópico de cores para o Jmol."
  },
  {
    "objectID": "comandosJmol.html#medidas",
    "href": "comandosJmol.html#medidas",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Medidas",
    "text": "Medidas\n      O Jmol permite calcular distâncias e ângulos em um modelo molecular. Para exemplificar isso, talvez seja interessante o carregamento de um modelo de água (load $water), e cujas distâncias e ângulos estão presentes em alguns livros de Química.\n\nPara distâncias\n      No exemplo da molécula de água, para se determinar a distância de uma ligação O-H, por exemplo:\n\n1. Duplo-clique do mouse no 1o. átomo;\n2. Arraste do mouse ao 2o. átomo;\n3. Clique do mouse no 2o. átomo\n\n      Experimentando para a distância da ligação O-H, o programa retorna o valor de 0,097 nm, ou 0,97 Angstroms, o valor convencial para esse tipo de ligação covalente.\n\n\n\nMedindo distância dentro da molécula.\n\n\n\n\nPara ângulos\n      Para a mesma molécula de água, experimente determinar o ângulo de ligação:\n\n1. Duplo clique no 1o. átomo (ex: H);\n2. Arrasta ao 2o. átomo (ex: O);\n3. Clique no 2o. átomo;\n4. Arraste ao 3o. átomo (ex: o outro H);\n5. Clique no 3o. átomo\n\n      Perceba que o sistema retorna o valor de 114\\(^{o}\\), um valor próximo do previsto para a molécula (109.5\\(^{o}\\)), ou medido (104.5\\(^{o}\\)). Essa aproximação é decorrente da construção do modelo de água.\n\n\n\nMedindo ângulo dentro da molécula.\n\n\n      Para limpar as medidas, use o comando:\n\nmeasure off"
  },
  {
    "objectID": "comandosJmol.html#características-moleculares",
    "href": "comandosJmol.html#características-moleculares",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Características moleculares",
    "text": "Características moleculares\n      São diveras as informações tangíveis a um modelo molecular no Jmol. Exemplificando as mais básicas para a molécula de um componente do molho shoyo, o glutamato:\n\nCargas\n      Há dois tipos de cargas oferecidas pelo Jmol, carga efetiva (formaCharge) e carga parcial (partialcharge). Exemplificando, digite no Console os comandos abaixo:\n\ncalculate partialCharges # cálculo de cargas parciais do modelo\nlabel %P # apresentação das cargas (etiquetagem)\n\n      Uma característica do Jmol que o torna mais eficiente a execução de suas ações é a disposição sequencial de comandos. Dessa forma, não é necessário clicar em Enter para cada comando, bastando separar os comando por ponto e vírgula (;) como ilustrado abaixo:\n\n\n\nAprentação de cargas parciais no modelo de glutamato, um componente do molho Shoyo, também ilustrando uma sequência de ações no Jmol.\n\n\n      Da mesma forma pode-se ilutrar a obtenção de cargas formais no modelo. Nessa, adicionou-se a coloração transparente, para melhor visualização da carga unitária negativa do ácido carboxílico:\n\ncalculate formalcharges # cálculo de cargas parciais do modelo\nlabel %C # apresentação das cargas (etiquetagem)\n\n\n\n\nIlustração dos comandos em sequência para visualização de cargas formais na molécula de glutamato.\n\n\n      Perceba que os comando da figura mistura maiúscula e minúsculas, de modo diferente da linha de comando que a antecede. Essa é uma característica bem legal do Jmol, que não se importa com a capitalização ou não da fonte. Ou seja, tanto faz se minúsculo, maiúsculo ou uma combinação de ambos; o Jmol executa a ação do mesmo modo.\n\nScripts & Ensino Reprodutível\n      O exemplo acima apresenta uma maneira simples de concatenar comandos, facilitando a execução automático e sequencial de um conjunto desses. No entanto, a visualização da linha de comando fica um pouco prejudicada com a separação por “;”, o que pode acarretar uma poluição visual quando houver vários comandos.\n      A situação de contorno envolve a disposição dos comandos no formato de um script. Esse nada mais é do que um trecho de código contendo um comando por linha, o que melhora a visualização do código como um todo. Além disso, o script possui a vantagem adicional de se inserir comentários entre as linhas de comando, permitindo também uma melhor apropriação do código e de seu aprendizado.\n      Essas características de um comando por linha com comentários explicativos conferem ao Jmol seu aspecto para programação de ações sequenciais, e enraiza por consequência uma das premissas básicas para um Ensino Reprodutível: a redação de trechos de códigos em comandos unitários por linha, escritos como num bloco de notas, e com comentários sobre as ações do programa em cada linha. Exemplificando para um script envolvendo as ações para o glutamato acima, apenas copie o trecho abaixo e cole-o no Console do JSmol, executando-o.\n\nload $glu # carregamento de micromolécula \nwireframe only # renderização exclusiva de varetas\ncalculate partialCharge # carga parcial\nlabel %P \n\n      Outro aspecto inerente à iniciativa de Ensino Reprodutível reside na possibilidade de se avaliar o código com alguma alteração, objetivando um produto final ligeiramente modificado. Tente repetir o trecho acima, mas para cargas efetivas, ou seja:\n\nload $glu # carregamento de micromolécula \ncpk only # renderização exclusiva por espaço preenchido\ncalculate formalCharge # carga efetiva \nlabel %C \n\n      Complementarmente, pode-se atuar alterando mais comandos do código, de modo a criar um resultado completamente diferente do original. Isso define outra característica do Ensino Reprodutível, qual seja, a de criação de trecho de código. Ilustrando, segue um trecho baseado no anterior, mas para minimização de energia e reestruturação dos orbitais da molécula.\n\nload $glu # carregamento de micromolécula \ncpk only # renderização exclusiva por espaço preenchido\nminimize # comando para minimização de energia da estrutura"
  },
  {
    "objectID": "comandosJmol.html#características-moleculares-1",
    "href": "comandosJmol.html#características-moleculares-1",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Características moleculares",
    "text": "Características moleculares\n      Além de previsão estrutural para carga parcial e carga formal (embora essa última dependa na prática de informação adicional, o valor de pH do meio), o Jmol também permite evidenciar forças fracas no modelo, tais como nuvem de van der Waals e ligações de hidrogênio, como segue.\n\nNuvem de van der Waals\n\ndots on # nuvem de van der Waals nos átomos do modelo (retira-se com \"dots off\")\ncalculate hbonds # identifica ligações de hidrogênio no modelo\n\n      Ilustrando, copie e cole o trecho que segue no Console:\n\nload $water\ndots on # nuvem de van der Waals na estrutura da água\ndots ionic # nuvem iônica sobre o modelo\n\n\n\n\nExemplificando a sobreposição de nuvens de van der Waals nos átomos da molécula de água.\n\n\n ### Ligações de hidrogênio\n\nload=1djf # carrega um modelo de peptídio\ncalculate hbonds # apresenta as ligações de H presentes na estrutura\n\n\n\n\nExemplificando ligações de hidrogênio num modelo de peptídio."
  },
  {
    "objectID": "comandosJmol.html#superfícies",
    "href": "comandosJmol.html#superfícies",
    "title": "Alguns comandos pra se aventurar nas moléculas voadoras",
    "section": "Superfícies",
    "text": "Superfícies\n      Além da superfície de van der Walls (dots on) vista acima, o Jmol é capaz de representar algumas superfícies para modelos moleculares. Quanto maior a molécula, maior o cálculo interno para gerar a superfície, o que pode dificultar sua visualização. Assim, ilustrando algumas superfícies para a molécula de água:\n\nisosurface molecular # superfície molecular que inclui o solvente\n\n\n\n\nSuperfície molecular para o modelo da água.\n\n\n\nisosurface mep # superfície de potencial eletrostático molecular\n\n\n\n\nExemplo de superfície de potencial eletrostático para a água.\n\n\n\nisosurface resolution 6 molecular map mep # superfície de potencial eletrostático molecular com atributos\n\n\n\n\nExemplo de superfície molecular da água que inclui seu potencial eletrostático.\n\n\n      Várias outras combinações de superfície podem ser obtidas no [site de referência do Jmol.(https://chemapps.stolaf.edu/jmol/docs/)"
  },
  {
    "objectID": "basicaoR.html",
    "href": "basicaoR.html",
    "title": "Comandos básicos & Scripts no R",
    "section": "",
    "text": "O R é um programa que opera por linha de comando. Isso é um pouco chato, como já visto, porque qualquer erro na digitação de um comando resulta na interrupção do código. Mas, por outro lado, e também como já visto, linhas de comando encadeadas e comentadas permitem a reprodução e modificação de trechos de códigos convergentes a um produto qualquer, no caso, objetos didáticos ao ensino médio."
  },
  {
    "objectID": "basicaoR.html#uma-visão-da-interface-rstudio",
    "href": "basicaoR.html#uma-visão-da-interface-rstudio",
    "title": "Comandos básicos & Scripts no R",
    "section": "Uma visão da interface RStudio",
    "text": "Uma visão da interface RStudio\n\n| O Rstudio nada mais faz do que permitir uma interace gráfica para o usuário do R (ou GUI, do inglês) , esse um programa estritamente rodado por uso de códigos. Diversas operações podem então realizar-se sem comandos ou códigos, como abrir e salvar um arquivo, ou visualizar um gráfico, por exemplo. Vejamos a divisão da janela principal do Rstudio.\n\n\n\nJanela básica do RStudio. A - área de digitação de comandos (prompt); B - área de abas de trabalho (diretório, gráficos, pacotes, etc); C - arquivos que aparecem na aba homônima; D - área de abas de administração (ambiente, história de comandos, etc).\n\n\n      Para nosso trabalho, contudo, será interessante uma área adicional, a área de scripts, a qual se acessa como segue:\n\nFile --&gt; New File --&gt; RScript\n\n... ou por atalho:Ctrl + Shift + N\n\n\n      Veja que agora a janela principal se divide em quatro partes, incluindo a aba nova para scripts.\n\n\n\nJanela principal do RStudio contendo a aba para elaboração e execução de scripts."
  },
  {
    "objectID": "basicaoR.html#como-funcionam-os-comando-no-r",
    "href": "basicaoR.html#como-funcionam-os-comando-no-r",
    "title": "Comandos básicos & Scripts no R",
    "section": "Como funcionam os comando no R",
    "text": "Como funcionam os comando no R\n      Todos os comandos do R são compostos por um nome seguido de argumentos entre parênteses. Não é necessário a especificação de todos os argumentos; normalmente bastam de 1 a 3. Seguem exemplos\n\ncomando(argumento 1, argumento 2, argumento 3, ...)\n\nExemplos:\n  plot(x,y)\n  mean(z)\n  read.csv(file = \"meus.dados.csv\")\n\n      Para se conhecer os argumentos de um comando, basta você começar a digitá-lo, tanto na área de prompt (canto inferior esquerdo) como na área de script, que o sistema apresenta temporariamente as opções. Se desejar visualizar essas opções por linha de comando, contudo, digite função args seguido do comando desejado, como segue:\n\nargs(plot)"
  },
  {
    "objectID": "basicaoR.html#elaborando-e-executando-um-script-no-r",
    "href": "basicaoR.html#elaborando-e-executando-um-script-no-r",
    "title": "Comandos básicos & Scripts no R",
    "section": "Elaborando e executando um script no R",
    "text": "Elaborando e executando um script no R\n      Para se produzir um script no R, basta redigir as linhas de comando de modo similar ao que foi realizado com o visualizador molecular 3D Jmol, ou seja, separando os comandos por ponto e vírgula, ou por linhas individuais, usado a tecla Enter :\n\nx = 5\nx^2 +7\n\n     E para executar o script acima, basta copiá-lo e colá-lo na área de script aberta. E aí vai uma dica de ouro. Veja que no canto superior direito do script existe um ícone de colagem do texto do script. Basta clicar nesse ícone que o texto estará copiado.\n      Agora é só colar na aba do script aberto (em nuvem, por exemplo) e executá-lo seguindo-se alternativamente as seguintes ações:\n\n1. Se deseja executar algumas linhas de um *script*, pode-se selecionar as linhas e clicar Ctrl + Enter ;\n\n2. Se desejar executar todo o *script*, seleciona-se todo o texto (Ctrl + A) seguido da ação acima, Ctrl + Enter ;\n   Opcionalmente, pode-se clicar no ícone \"--&gt;Source\" ;\n   \n3. Se desejar executar apenas uma linha, basta clicar na linha seguido de Ctrl + Enter ;\n   Opcionalmente, pode-se clicar no ícone \"--&gt;Run\" ;"
  },
  {
    "objectID": "basicaoR.html#algumas-recomendações-sobre-a-digitação-num-script-do-r",
    "href": "basicaoR.html#algumas-recomendações-sobre-a-digitação-num-script-do-r",
    "title": "Comandos básicos & Scripts no R",
    "section": "Algumas recomendações sobre a digitação num script do R:",
    "text": "Algumas recomendações sobre a digitação num script do R:\n      Existem algumas condições básicas pra que um script do R seja lido de forma clara por seu elaborador, bem como compilado corretamente pelo programa:\n\nDigitação: sempre que tem um erro no script no Rstudio, surge um sinal em vermelho ao lado esquerdo da linha de comando; contornado o erro, o sinal desaparece;\nComentários: para que o script seja lido também por “um ser humano”, é aconselhável tecer comentários nas linhas de comando (iniciados por # );\nIdentação: permita “identação” quando a linha estiver um pouco longa, clicando na tecla Enter após uma separação de argumentos por “vírgula”. Dessa forma, a linha continua logo abaixo, mas com um pequeno deslocamento à direita. Isso facilita a legibilidade do código.\nNomes: os comandos do R são em língua inglesa. Dessa forma, deve-se evitar o uso de variáveis e nomes de arquivos com acentuação ou sinais gráficos do Português (ex: ç). Além disso, o Ré um compilador de códigos. Se você definir um nome composto para um arquivo ou variável, ou seja, com espaço entre os termos (como é normal no cotidiano), o R tentará executar os termos separadamente, o que levará em erro. Assim, para nomes de variáveis e arquivos, dê preferência a um dos 3 tipos de convenções comuns usadas em programação, a saber:\n\n\nseparação por underline, ” _ “ ou hífen; ex: minha_variável, minha-variável\nseparação por maiúscula; ex: minhaVariável\nseparação por pontos; ex: minha.variável"
  },
  {
    "objectID": "manipulate.html",
    "href": "manipulate.html",
    "title": "Simulando equações de forma animada - o pacote manipulate",
    "section": "",
    "text": "A biblioteca manipulate do R pode ser empregada para a visualização gráfica de funções matemáticas personalizada ao usuário a partir de um conjunto opcional de ações. Essas ações são inseridas em um deslizador (slider), selecionador (picker), caixa de marcação (checkbox) ou botão (button), e permitem o redesenho automático do gráfico toda vez que um valor é alterado na expressão.\n      Diferentemente do anim.plots, o manipulate não gera uma animação, e sim uma simulação de função gráfica com variação de parâmetro(s). E contrariamente ao anim.plots e outros pacotes a discutir neste material, o manipulate não permite salvamento em imagem animada ou HTML, sendo possível rodar a simulação somente dentro do ambiente do R."
  },
  {
    "objectID": "manipulate.html#definição",
    "href": "manipulate.html#definição",
    "title": "Simulando equações de forma animada - o pacote manipulate",
    "section": "",
    "text": "A biblioteca manipulate do R pode ser empregada para a visualização gráfica de funções matemáticas personalizada ao usuário a partir de um conjunto opcional de ações. Essas ações são inseridas em um deslizador (slider), selecionador (picker), caixa de marcação (checkbox) ou botão (button), e permitem o redesenho automático do gráfico toda vez que um valor é alterado na expressão.\n      Diferentemente do anim.plots, o manipulate não gera uma animação, e sim uma simulação de função gráfica com variação de parâmetro(s). E contrariamente ao anim.plots e outros pacotes a discutir neste material, o manipulate não permite salvamento em imagem animada ou HTML, sendo possível rodar a simulação somente dentro do ambiente do R."
  },
  {
    "objectID": "manipulate.html#sintaxe",
    "href": "manipulate.html#sintaxe",
    "title": "Simulando equações de forma animada - o pacote manipulate",
    "section": "Sintaxe",
    "text": "Sintaxe\n      Por outro lado, o pacote manipulate possui uma sintaxe bem mais simples que os demais, envolvendo apenas o(s) argumento(s) alternativo(s) para os controles descritos acima (slider, picker, checkbox, button).\n\nmanipulate(expressão matemáticas, controles)"
  },
  {
    "objectID": "manipulate.html#exemplos-gerais",
    "href": "manipulate.html#exemplos-gerais",
    "title": "Simulando equações de forma animada - o pacote manipulate",
    "section": "Exemplos gerais",
    "text": "Exemplos gerais\n      Para sentir o “poder” do manipulate, elabore o plot que segue.\n\nx = seq(from = 1, to = 10, by = 0.5) # uma outra forma de gerar uma sequência numérica no `R`\nplot(x, x^2, type = \"l\")  # gráfico de linha de uma parábola\n\n\n\n\n\n\n\n\n\n\n      Agora, usando o manipulate. Crie um novo script no RSudio, copie, cole, e rode o trecho de código abaixo:\n\nlibrary(manipulate) # carrega a biblioteca\nx = seq(from = 1, to = 10, by = 0.5)\nmanipulate(plot(x,x^t, type=\"l\"),  # uso da função plot anterior\n           t=slider(min=0,max=5)) # parâmetro a variar por um deslizador\n\n      Se você conseguiu rodar o script no Rstudio deverá ter obtido algo parecido com a imagem abaixo:\n\n\n\nExemplo de tela gerada na aba Plots do RStudio apresentando uma simulação de equação com variação do expoente. Observar o ícone de engrenagam, e que possui o controle escolhido para o gráfico.\n\n\n      Agora a parte legal ! Se você clicar no ícone de engrenagem do canto superior esquerdo da aba de Plots, logo acima do gráfico, verá a possibilidade de alterar o valor do expoente (t, na equação), com consequente e automática atualização do gráfico. A imagem que segue ilustra essa ação.\n\n\n\nMesmo resultado que da figura anterior, mas com o slider deslocado para uma função de 3o. grau."
  },
  {
    "objectID": "manipulate.html#exemplo-do-mapa",
    "href": "manipulate.html#exemplo-do-mapa",
    "title": "Simulando equações de forma animada - o pacote manipulate",
    "section": "Exemplo do MAPA",
    "text": "Exemplo do MAPA\n      Para se observar o potencial do pacote manipulate será ilustrada a decomposição de um reagente químico, tal como representado no MAPA para o ensino médio (C. da Natureza, 2o. Bimestre, 2o. Ano, p. 52, 2024).\n\n\n\nSituação envolvendo cinética química extraída do MAPA, e versando sobre decomposição de N\\(_{2}\\)O_{5}$.\n\n\n      Mas ao invés de simplesmente reproduzir o gráfico da imagem acima, podemos nos aprofundar em seu estudo, por exemplo, pela simulação da curva de decomposição em função da temperatura, e exemplicada para o gás metano. A equação que descreve esse comportamento é dada abaixo.\n\\[\nexp(-k*exp(-Ea/(R*T))*x\n\\]\nFonte: Kudinov, I. V., A. A. Pimenov, and G. V. Mikheeva. “Modeling of the thermal decomposition of methane and the formation of solid carbon particles.” Petroleum Chemistry 60 (2020): 1239-1243.\n      E o trecho de código para executar no RStudio é dado abaixo:\n\nk = 4.5e13 # constante da taxa de reação, 1/s\nEa = 381000 # energia de ativação, J/mol\nR = 8.314 # constante geral dos gases, J/(mol*K)\n\n#f = Co/(1+ko*exp(-Ea/(R*T))*x\nlibrary(manipulate) # carrega a biblioteca\nmanipulate(curve(exp(-k*exp(-Ea/(R*T))*x), # equação de decomposição\n                 xlim=c(0,2), xlab=\"t(s)\", ylab=\"C(t)\"),  # eixo de tempo t\n           T=slider(min=1300,max=1500)) # temperatura variável\n\n      Dessa forma, observa-se que o pacote manipulate pode também auxiliar em no estudo mais aprofundado de funções observadas nos livros-texto. A simulação de decomposição do metano pode ser observada no RStudio como na imagem abaixo.\n\n\n\n\n\nSimulação de decomposição de metano com a temperatura."
  },
  {
    "objectID": "manipulate.html#referências-do-pacote",
    "href": "manipulate.html#referências-do-pacote",
    "title": "Simulando equações de forma animada - o pacote manipulate",
    "section": "Referências do pacote:",
    "text": "Referências do pacote:\n\nGeral\nManual\nTutorial"
  },
  {
    "objectID": "teste.html",
    "href": "teste.html",
    "title": "Documento com Ícone Font Awesome",
    "section": "",
    "text": "Aqui está um ícone de verificação: \nE aqui está um ícone de alerta:"
  },
  {
    "objectID": "teste.html#usando-ícones-font-awesome",
    "href": "teste.html#usando-ícones-font-awesome",
    "title": "Documento com Ícone Font Awesome",
    "section": "",
    "text": "Aqui está um ícone de verificação: \nE aqui está um ícone de alerta:"
  },
  {
    "objectID": "basico.html",
    "href": "basico.html",
    "title": "Gráficos básicos e simulações",
    "section": "",
    "text": "Você não precisa instalar mais nada pra trabalhar com gráficos no R. Isso porque o sistema já possui um conjunto de pacotes na sua instalação, incluindo um pacote para gráficos (graphics).\n      Para fazer seu primeiro gráfico, basta copiar e colar o trecho abaixo num script aberto no Rstudio, tanto faz se instalado ou nas nuvens (RStudio Cloud), executando-o em seguida.\n\ny = c(1,2,4,8,16,32)  # vetor de números\nplot(y) # comando pra \"plotar\" o gráfico\n\n\n\n\n\n\nUm gráfico simples no R.\n\n\n\n\n      Se você obteve como resultado a imagem acima, parabéns !! Você fez o seu primeiro gráfico no R !!! Tá achando pouco ?! Você fez um gráfico numa linguagem orientada a objeto em programa de computação estatística !!!\n      Uma dica importantíssima: como se pode observar do código acima, “para se colocar valores em sequência, como numa coluna de planilha eletrônica, o R precisa”ler” um vetor iniciado por “c” (de “concatenated”), seguido dos valores entre parênteses (()) e separados por vírgula !\n      Agora, se quiser caprichar um pouco mais, pode colocar uma expressão sobre uma sequência de números igualmente espaçados. Exemplificando:\n\n\nx = 1:10 # vetor de valores de 0 a 10,  com intervalo unitário\ny = x^2 # expressão aplicada ao vetor \"x\"\nplot(x,y) # gráfico produzido\n\n\n\n\n\n\nUm gráfico de relação quadrática (x²) entre xe y.\n\n\n\n\n      Também dá pra elaborar o gráfico sem precisar criar a variável independente y, apenas inserindo sua função em x no próprio comando. Experimente:\n\nx= 1:10\nplot(x,x^2)\n\n      Ou….pode também escolher os números que deseja plotar:\n\nx = c(1,2,5,12,31)\ny= c(4,-5,12,47,-2)\nplot(x,y)\n\n\n\n\n\n\nGráfico de valores aleatórios de x e y."
  },
  {
    "objectID": "basico.html#sec-basico",
    "href": "basico.html#sec-basico",
    "title": "Gráficos básicos e simulações",
    "section": "",
    "text": "Você não precisa instalar mais nada pra trabalhar com gráficos no R. Isso porque o sistema já possui um conjunto de pacotes na sua instalação, incluindo um pacote para gráficos (graphics).\n      Para fazer seu primeiro gráfico, basta copiar e colar o trecho abaixo num script aberto no Rstudio, tanto faz se instalado ou nas nuvens (RStudio Cloud), executando-o em seguida.\n\ny = c(1,2,4,8,16,32)  # vetor de números\nplot(y) # comando pra \"plotar\" o gráfico\n\n\n\n\n\n\nUm gráfico simples no R.\n\n\n\n\n      Se você obteve como resultado a imagem acima, parabéns !! Você fez o seu primeiro gráfico no R !!! Tá achando pouco ?! Você fez um gráfico numa linguagem orientada a objeto em programa de computação estatística !!!\n      Uma dica importantíssima: como se pode observar do código acima, “para se colocar valores em sequência, como numa coluna de planilha eletrônica, o R precisa”ler” um vetor iniciado por “c” (de “concatenated”), seguido dos valores entre parênteses (()) e separados por vírgula !\n      Agora, se quiser caprichar um pouco mais, pode colocar uma expressão sobre uma sequência de números igualmente espaçados. Exemplificando:\n\n\nx = 1:10 # vetor de valores de 0 a 10,  com intervalo unitário\ny = x^2 # expressão aplicada ao vetor \"x\"\nplot(x,y) # gráfico produzido\n\n\n\n\n\n\nUm gráfico de relação quadrática (x²) entre xe y.\n\n\n\n\n      Também dá pra elaborar o gráfico sem precisar criar a variável independente y, apenas inserindo sua função em x no próprio comando. Experimente:\n\nx= 1:10\nplot(x,x^2)\n\n      Ou….pode também escolher os números que deseja plotar:\n\nx = c(1,2,5,12,31)\ny= c(4,-5,12,47,-2)\nplot(x,y)\n\n\n\n\n\n\nGráfico de valores aleatórios de x e y."
  },
  {
    "objectID": "basico.html#incrementando-um-pouquinho-os-gráficos",
    "href": "basico.html#incrementando-um-pouquinho-os-gráficos",
    "title": "Gráficos básicos e simulações",
    "section": "Incrementando um pouquinho os gráficos",
    "text": "Incrementando um pouquinho os gráficos\n      Existe uma quantidade imensa de tutoriais na web, além de uma vasta literatura sobre o uso do pacote graphicspara se construir gráficos. Mas a proposta aqui é que você aprenda apenas o fundamental pra elaborar um gráfico, pois o objetivo é animá-lo, e não complicá-lo !!\n      Mesmo assim, alguns argumentos da função plot podem ilustrar o potencial de seu uso. Como explicado anteriormente, ainda que as funções do R possuam diversos argumentos, você pode executá-la com poucos ou apenas um, somente.\n      Os argumentos da função plot são os descritos abaixo:\n\nplot(x, y = NULL, type = \"p\",  xlim = NULL, ylim = NULL,\n     log = \"\", main = NULL, sub = NULL, xlab = NULL, ylab = NULL,\n     ann = par(\"ann\"), axes = TRUE, frame.plot = axes,\n     panel.first = NULL, panel.last = NULL, asp = NA,\n     xgap.axis = NA, ygap.axis = NA,\n     ...)\n\n      Um pouco confuso, é ?! Explicando alguns dos argumentos acima, e outros que funcionam com a função plot:\n\ntype - tipo de plot: pontos \"p\", linhas \"l\", pontos+linhas com cruzamento \"o\", pontos+linhas sem cruzamento \"b\", linhas verticais \"h\", steps \"s\", sem representação \"n\";\n\ncex - tamanho do ponto (ex: 0.5, 20);\n\nlty - \"line type\", tipo da linha; pode se representado por um valor (1,2,...) ou por \"solid\", \"dotted\", \"dashed\", \"dotdash\", \"longdash\", \"twodash\";\n\nlwd - \"line width\", largura da linha (6 níveis)\n\npch - tipo de ponto (1-25)\n\nxlim, ylim - limite dos eixos; ex: ylim=c(-2,10)\n\nxlab, ylab - etiquetas (\"label\") dos gráficos\n\ncol - cor (números ou nomes); ex: \"red\", \"orange\"\n\nmain - título do gráfico\n\nsub - subtítulo do gráfico\n\nlog - eixo logaritmo\n\n      O gráfico de pontos não é o único que se pode fazer com o pacote graphics. Também dá pra fazer tudo isso abaixo, com cada função apresentando os seus próprios argumentos:\n\nplot() - pontos, linhas, pontos e linhas\nbarplot() - plot de barras\nhist() - histograma\nboxplot() - gráfico Box-Whiskers\npersp() - gráfico 3D\npie() - gráfico de torta\ndotplot() - sequência de valores (com *jitter*, espalhameto de pontos)\npairs() - painel múltiplo com todas as variáveis plotadas\nmatplot() - plota vetores de matrizes, como *dataframes*\n\n      Mas chega de enrolação !! Para sentir de perto do “poder” desse pacote básico para gráficos, veja a imagem que segue retirada do MAPA, 1o. Bimestre de Ciências da Natureza e Suas Tecnologias:\n\n\n\n\n\n\nFigure 1\n\n\n\n      Agora experimente reproduzir a imagem do MAPA copiando, colando e executando o trecho abaixo numa janela de script do RStudio:\n\nt &lt;- c(0,1,2,3,4) # introduz os dados \nv &lt;- c(0,5,10,15,20)\nplot(t,v) # faz o gráfico\n\n\n\n\n\n\nUm gráfico simples pra reprodução de figura do MAPA.\n\n\n\n\n      Agora, dá pra incrementar um pouco mais, para aproximar-se da imagem da figura de referência do MAPA. Segue o trecho pra cópia e execução:\n\nt &lt;- c(0,1,2,3,4) # introduz os dados \nv &lt;- c(0,5,10,15,20)\nplot(t,v,main=\"Movimento Uniforme: Aceleração\", # realiza o gráfico com título...\n     xlab=\"t(s)\", ylab=\"v(/s)\", # ... etiquetas nos eixos....\n     type=\"l\", col=\"red\") # ... tipo e cor da linha, e ....\ngrid() # divisão para facilitar a visualização\n\n      Dando tudo certo, segue o que se produz com o código:\n\n\n\n\n\nReprodução de gráfico com pacote graphics do R, tal como apresentado no MAPA - Ciências da Natureza, 1o. Bimestre, pg. 134 (2024)."
  },
  {
    "objectID": "basico.html#simulando-curvas-com-a-função-curve",
    "href": "basico.html#simulando-curvas-com-a-função-curve",
    "title": "Gráficos básicos e simulações",
    "section": "Simulando curvas com a função curve",
    "text": "Simulando curvas com a função curve\n      Uma situação bem comum no aprendizado em Matemática e de alguns temas em Ciências da Natureza se dá quando desejamos observar como uma variável se comporta em relação a outra, fornecida uma equação para tal. Nesse caso, pode-se utilizar a função curve do R, mais simples até em seus argumentos que a funçãoplot. Para ilustrar isso, execute separadamente os exemplos abaixo num script:\n\ncurve(x^2) # função quadrática\ncurve(log10(x), xlim=c(1,1e3), col=\"blue\") # função logarítmica e coloração\ncurve(x^2-2*x+7, xlim=c(-10,10)) # função quadrática com limites no eixo X\ncurve(sin(x), from=0, to=90, \n      xlab=\"ângulo(graus)\", ylab=\"seno(ângulo)\", col=\"red\", n=1000) # com etiquetas nos eixos\n\n\n\n\n\n\nAlguns exemplos para a função curve.\n\n\n\n\n      Ilustrando-se mais objetivamente, pode-se reproduzir (como também modificar) o trecho de código que segue logo após a figura abaixo extraída do MAPA:\n\n\n\nFigura extraída de exercício do MAPA, 1o. Bimestre de Matemática e Suas Tecnologias, p.32.\n\n\n\nx =0:70\ncurve(1/10*x + 1,\n      xlab=\"profundidade\", ylab=\"pressão\")\n\n\n\n\nReprodução de figura estraída do exercício acima do MAPA.\n\n\n\n\n      Muito legal também é construir gráficos a partir de relações gráficas a partir de equações, tal como a apresentada na figura abaixo (MAPA):\n\n\n\nTabela extraída do MAPA, 1o. Bim., C. Natureza, p. 137, 2024.\n\n\n      Usando-se a função curve pode-se obter uma simulação da relação apontada na seta, a partir do trecho de código abaixo:\n\ns0 = 5 # distância inicial (m)  # parâmetros iniciais pra equação de distância\nv0= 7 # velocidade inicial (m/s)\na = 3 # aceleração (m/s^2)\ncurve(s0+v0*x+1/2*a*x^2,  # a equação de distância \n      xlim=c(0,100), # limites do eixoi de tempo\n      xlab=\"tempo (s)\", ylab=\"distância(m)\")  # etiquetas dos eixos\n\n\n\n\n\n\nEmprego da função curvedo R para simular uma equação para distância percorrida em movimento horizontal (MAPA, 1o. Bim., C. Natureza, p. 137, 2024)."
  },
  {
    "objectID": "animacao.old.html",
    "href": "animacao.old.html",
    "title": "Animando a molécula",
    "section": "",
    "text": "| Animações permitem a representação de moléculas de modo mais lúdico e representativo. Para agregar valor ainda maior à visualização tridimensional de estruturas moleculares, o Jmol conta com alguns comandos para o posicionamento espacial do modelo, bem como para a criação de animações, como:\n\nspin\nrotate\ntranslate\n\n\nspin 10 # rotacional, com velocidade de 10 graus por quadro\nspin z -15 # (eixo z)\nrotate 20 # 20 graus\nrotate x 90 # eixo x\ntranslate 50 # valor representa o percentual da janela (100 - fora; 0 - centro)\n\n\nzoom\nzooTo"
  },
  {
    "objectID": "animacao.old.html#alguns-comandos-de-animação-para-os-modelos",
    "href": "animacao.old.html#alguns-comandos-de-animação-para-os-modelos",
    "title": "Animando a molécula",
    "section": "",
    "text": "| Animações permitem a representação de moléculas de modo mais lúdico e representativo. Para agregar valor ainda maior à visualização tridimensional de estruturas moleculares, o Jmol conta com alguns comandos para o posicionamento espacial do modelo, bem como para a criação de animações, como:\n\nspin\nrotate\ntranslate\n\n\nspin 10 # rotacional, com velocidade de 10 graus por quadro\nspin z -15 # (eixo z)\nrotate 20 # 20 graus\nrotate x 90 # eixo x\ntranslate 50 # valor representa o percentual da janela (100 - fora; 0 - centro)\n\n\nzoom\nzooTo"
  },
  {
    "objectID": "animacao.old.html#ampliação-dos-modelos-zoom",
    "href": "animacao.old.html#ampliação-dos-modelos-zoom",
    "title": "Animando a molécula",
    "section": "Ampliação dos modelos (zoom)",
    "text": "Ampliação dos modelos (zoom)\n\nAmpliação 2x: zoom in\nAmpliação em 3x: zoom \\*3 \nRedução em 2x: zoom out \nRedução em 3x: zoom /3 \nEliminar ampliação: zoom off \nRestrição a ligante e ampliação: restrict ligand; zoom 0\n\n\nAmpliação animada (zoomto)\n      Esse recurso permite visualizar de forma ampliada temporalmente algumas partes de interesse do modelo, tais como sítios de interação de ligantes ou grupos prostéticos. A sintaxe da expressão é:\n\nzoomto ou zoomTo (expressão do átomo/grupo) tamanho ou... \nzoomto tempo (expressão do átomo/grupo) tamanho\n\nExemplos:\n\nAumentar em 3x, meio segundo por vez: zoomto 0.5 *3 \nAumentar em 4x, meio segundo por vez: zoomto 0.5 400 \nFocar num ligante com ampliação de 2x: zoomto 2(ligand) 0\nFocar num ligante com ampliação de 4x, a meio segundo por vez: zoomto 0.5(ligand)* 4\n\n\nmoveTo\ncenter\ndelay\nnavigate"
  },
  {
    "objectID": "animacao.old.html#exemplos-de-animção-para-moléculas",
    "href": "animacao.old.html#exemplos-de-animção-para-moléculas",
    "title": "Animando a molécula",
    "section": "Exemplos de animção para moléculas",
    "text": "Exemplos de animção para moléculas"
  },
  {
    "objectID": "rstudioCloud.html",
    "href": "rstudioCloud.html",
    "title": "Como usar o R & Rstudio - instalação e nuvem",
    "section": "",
    "text": "Existem dois ambientes alternativos para se utilizar o R (programa) e o Rstudio (interface do usário): instalando no computador, ou pelas nuvens. Há poucas diferenças entre ambas as maneiras de se trabalhar com os programas, mas a fundamental é que a instalação pode ser utilizada offline, sem necessidade de internet, enquanto que pelas nuvens, bom, já sabe."
  },
  {
    "objectID": "rstudioCloud.html#instalando-o-r-e-rstudio-no-computador",
    "href": "rstudioCloud.html#instalando-o-r-e-rstudio-no-computador",
    "title": "Como usar o R & Rstudio - instalação e nuvem",
    "section": "Instalando o R e RStudio no computador",
    "text": "Instalando o R e RStudio no computador\n      Você precisa seguir uns poucos passos para instalar o R & RStudio no computador. Na prática, baixa-se ambos os programas e os instala como se faria com qualquer outro programa, tanto faz se para Windows, Linux, ou Mac. Seguem os passos:\n\nAcesse o site do Rstudio e faça o download do programa R. \nInstale o programa com as opções padrão.\nNo mesmo site do ´RStudio procure um pouco mais abaixo pelo instalador mais apropriado a seu sistema operacional.\n\n\n\nBaixe o arquivo e instale-o como qualquer outro programa.\nAbra o programa RStudio, e cuja interface será parecida com a que segue.\n\n\n\n\n\n\n\nFigure 1"
  },
  {
    "objectID": "rstudioCloud.html#acessando-o-r-rstudio-pelas-nuvens",
    "href": "rstudioCloud.html#acessando-o-r-rstudio-pelas-nuvens",
    "title": "Como usar o R & Rstudio - instalação e nuvem",
    "section": "Acessando o R & Rstudio pelas nuvens",
    "text": "Acessando o R & Rstudio pelas nuvens\n      Essa é uma opção simples e que não requer qualquer instalação. A interface acessada é praticamente igual à da instalação em computador. Entre algumas vantagens destaca-se a velocidade normalmente superior pra rodar e instalar pacotes, posto que o servidor para esses já está no provedor em nuvem. Mas por ser acesso online, requer uma inscrição inicial, com login e senha. Seguem os passos:\n\nAcesse o site do RStudio Cloud.\n\n\n\nRealize a inscrição (sign up) ou acesse pelo Google (mais simples).\nA janela deverá parecer-se com a que segue, embora sem os projetos listados.\n\n\n\nAgora a parte interessante. Clique em New Project e selecione New Rstudio Project.\n\n\n\nA imagem final será bem parecida com a apresentada pela versão instalada, como visto na Figure 1, veja:\n\n | Pronto ! Você pode utilizar uma ou outra forma para acessar as atividades e objetos didáticos propostos neste material. A seguir serão fornecidas algumas ações e comandos rápidos para se trabalhar com a interface do Rstudio e com o R. Mas apenas para que se consiga criar, executar, e modificar alguns scripts criados para animações, simulações, interatividade, e geovisualização. Mão na massa, agora !\n      Por uma questão de simplicidade para o uso da versão em servidor, sem necessidade de instalação dos programas, bem como por maior velocidade de execução de scripts e instalação de pacotes, optamos neste trabalho por exemplificar os objetos didáticos em nuvem, ou seja, por uso do RStudio Cloud."
  },
  {
    "objectID": "medio.html#jmol-e-moléculas-em-3d",
    "href": "medio.html#jmol-e-moléculas-em-3d",
    "title": "Ensino Médio",
    "section": "Jmol e Moléculas em 3D ",
    "text": "Jmol e Moléculas em 3D \n\nER & moléculas\n- ER.qmd\n- visual.qmd\n- jmol.qmd\n- ERjmol.qmd\n- ERScriptsJmol.qmd\n\n\nUso do Jmol\n- baixar.qmd\n- acessar.qmd\n- carregaOnline.qmd\n- carregaPC.qmd\n- zoom.qmd\n- representa.qmd\n- cor.qmd\n- fundo.qmd\n- distancia.qmd\n- anima.qmd\n\n\nJardim de Moléculas\n- jardim.qmd\n- classifica.qmd\n- organica.qmd\n- inorganica.qmd\n- biomol.qmd\n- farmac.qmd\n- medicin.qmd\n- toxicol.qmd\n- nutri.qmd\n- supramol.qmd"
  },
  {
    "objectID": "medio.html#r-e-relações-matemáticas",
    "href": "medio.html#r-e-relações-matemáticas",
    "title": "Ensino Médio",
    "section": "R e Relações Matemáticas ",
    "text": "R e Relações Matemáticas \n\nER e relações matemáticas\n - ER.qmd\n- visual.qmd\n- ERvisual.qmd\n\n\nER, R e RStudio\n - Rstudio.qmd\n- pacotes.qmd\n\n\nVisualização e Animação de dados\n\nVisualização de gráficos\n- pacotes\n- animSimul.qmd\n- estaticos.qmd\n- basic.qmd\n- ggplot2.qmd\n\n\nGráficos animados\nO pacote anim.plots\n- animation.qmd\n- gganimate.qmd\n\n\nGráficos interativos\n- manipulate.qmd\n- plotly.qmd\n- rgl.qmd\n- leaflet.qmd\n\n\n\nPaineis interativos\n- paineis\n- flexdashboard.qmd\n- shiny.qmd\n\n\nFenômenos naturais e processos tecnológicos\n\n\n\n\nDinâmica da Vida, da Terra e do Cosmos\n\n\n\n\nConhecimento científico e tecnológico"
  },
  {
    "objectID": "plotly.html",
    "href": "plotly.html",
    "title": "Gráficos interativos - o pacote plotly",
    "section": "",
    "text": "A biblioteca plotly é a mais rica em interatividade entre as apresentadas neste material. Recapitulando, o pacote anim.plots gera arquivos de imagem (PNG, GIF) e mesmo arquivos em formato PDF, com animações pré-definidas pelo usuário, utilizando a biblioteca graphics para a construção de gráficos.\n\n\n      Por sua vez, o pacote manipulate já permite uma interação maior com o usuário, possibilitando a elaboração em tempo real de gráficos de funções matemáticas com alteração em parâmetros. Não obstante, o pacote só opera dentro do ambiente do RStudio. Já o pacote gganimate utiliza a riqueza da biblioteca (ou pacote) ggplot2 para criar animações em gráficos mais sofisticados, permitindo seu salvamento em formato de imagem (PNG), e mesmo em formato HTML.\n\n\n      Agora imagine uma biblioteca do R que una as duas características que distinguem as anteriores, ou seja, que produza gráficos em animação pré-definida pelo usuário, ao mesmo tempo em que permite modificar algum parâmetro, não necessáriamente de uma função matemática, e também armazenando o produto final em arquivo separado (PNG, HTML). E mais…que também possibilite facilmente ações de ampliação, redução e foco em determinada região do gráfico, bem como o efeito de mouse over (ou hover), em que a simples passagem do mouse sobre o dado gráfico abra as informações daquele ponto.\n\n\n      E pra fechar…que seja capaz de produzir gráficos de qualidade de publicação ou de grande complexidade integrando com o pacote ggplot2, e que assim como o pacote manipulate, também possibilite a inserção de seletores, menu suspenso, e botões.\n\n\n      Isso é o melhor dos mundos !! Porque, em síntese, é possível criar o gráfico, inserir comandos de animação e interatividade, e armazená-lo em arquivo separado HTML, possibilitando-o ser aberto em qualquer browser, mesmo estando sem conexão com a internet.\n\n\n      É exatamente isso (mas não “só”) que a biblioteca plotly é capaz de fazer. E essa biblioteca gráfica interativa é tão significativa no “reino” moderno da visualização de dados e do story telling, que pode ser obtida tanto para a linguagem R como para linguagem Python, e a linguagem JavaScript de programação.\n      Complementarmente, por possibilitar uma integração ao JavaScript, a biblioteca também é utilizado no Power Bi da Microsoft, uma coleção de aplicativos conectados para a visualização de dados.\n      De fato, é a própria biblioteca plotlyjs, externa ao R e RStudio que é incorporada ao R."
  },
  {
    "objectID": "plotly.html#diferença-dos-demais-pacotes-vistos",
    "href": "plotly.html#diferença-dos-demais-pacotes-vistos",
    "title": "Gráficos interativos - o pacote plotly",
    "section": "",
    "text": "A biblioteca plotly é a mais rica em interatividade entre as apresentadas neste material. Recapitulando, o pacote anim.plots gera arquivos de imagem (PNG, GIF) e mesmo arquivos em formato PDF, com animações pré-definidas pelo usuário, utilizando a biblioteca graphics para a construção de gráficos.\n\n\n      Por sua vez, o pacote manipulate já permite uma interação maior com o usuário, possibilitando a elaboração em tempo real de gráficos de funções matemáticas com alteração em parâmetros. Não obstante, o pacote só opera dentro do ambiente do RStudio. Já o pacote gganimate utiliza a riqueza da biblioteca (ou pacote) ggplot2 para criar animações em gráficos mais sofisticados, permitindo seu salvamento em formato de imagem (PNG), e mesmo em formato HTML.\n\n\n      Agora imagine uma biblioteca do R que una as duas características que distinguem as anteriores, ou seja, que produza gráficos em animação pré-definida pelo usuário, ao mesmo tempo em que permite modificar algum parâmetro, não necessáriamente de uma função matemática, e também armazenando o produto final em arquivo separado (PNG, HTML). E mais…que também possibilite facilmente ações de ampliação, redução e foco em determinada região do gráfico, bem como o efeito de mouse over (ou hover), em que a simples passagem do mouse sobre o dado gráfico abra as informações daquele ponto.\n\n\n      E pra fechar…que seja capaz de produzir gráficos de qualidade de publicação ou de grande complexidade integrando com o pacote ggplot2, e que assim como o pacote manipulate, também possibilite a inserção de seletores, menu suspenso, e botões.\n\n\n      Isso é o melhor dos mundos !! Porque, em síntese, é possível criar o gráfico, inserir comandos de animação e interatividade, e armazená-lo em arquivo separado HTML, possibilitando-o ser aberto em qualquer browser, mesmo estando sem conexão com a internet.\n\n\n      É exatamente isso (mas não “só”) que a biblioteca plotly é capaz de fazer. E essa biblioteca gráfica interativa é tão significativa no “reino” moderno da visualização de dados e do story telling, que pode ser obtida tanto para a linguagem R como para linguagem Python, e a linguagem JavaScript de programação.\n      Complementarmente, por possibilitar uma integração ao JavaScript, a biblioteca também é utilizado no Power Bi da Microsoft, uma coleção de aplicativos conectados para a visualização de dados.\n      De fato, é a própria biblioteca plotlyjs, externa ao R e RStudio que é incorporada ao R."
  },
  {
    "objectID": "plotly.html#um-gráfico-interativo-simples-com-o-plotly",
    "href": "plotly.html#um-gráfico-interativo-simples-com-o-plotly",
    "title": "Gráficos interativos - o pacote plotly",
    "section": "Um gráfico interativo simples com o plotly",
    "text": "Um gráfico interativo simples com o plotly\n      Assim como os pacotes graphics e ggplot2, a elaboração de gráficos pelo plotly requer alguns comandos básicos. Mas a boa notícia é que o gráfico produzido com poucos comandos já apresenta interatividade, como ampliação/redução, deslocamento dos dados em eixos, e efeitos de informação por passagem do mouse (hover).\n      Ilustrando um gráfico simples produzido com o plotly e nativamente interativo, segue um trecho de código para a sua elaboração com o pacote básico graphic, seguido de outro, com o pacote plotly:\n\nlibrary(plotly) # carrega a biblioteca\n\nLoading required package: ggplot2\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nx = 1:10 # atribui valores de 1 a 10 à variável \"x\"\ny = x^2 # atribui à variável \"y\" o quadrado do valor da variável \"x\"\nplot(x,y) # elabora o gráfico com o pacote `graphics`.\n\n\n\n\n\n\n\n\n      Agora com o pacote plotly:\n\nplot_ly(x = ~x, y = ~y, type=\"scatter\") \n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n# sintaxe do plotly: ~variável, para atribuir uma variável (x ou y)\n#                    type: para atribuir um tipo de gráfico\n\n      Agora observe quanta interatividade surgiu com o simples comando acima, passando o mouse pelos pontos do gráfico, ou clicando nos ícones que apareceram acima do gráficok. Teste essa interatividade:\n\nPassando o mouse sobre os pontos do gráfico (hover) você obterá as coordenadas de cada ponto;\nClicando com o botão esquerdo do mouse em qualquer parte do gráfico e desenhando um retângulo você obterá uma ampliação da área;\nSe der dois cliques após a ampliação você retornará ao gráfico original;\nPosicionando o ponteiro do mouse entre os valores de um eixo, e arrastando o mouse, você verá um deslocamento do eixo selecionado;\nSelecionando um ícone no canto superior direito do gráfico, você poderá, na sequência a partir da esquerda, baixar o plot como imagem, realizar uma ampliação, deslocar os eixos, selecionar os pontos dentro de uma caixa, ou dentro de um laço, ampliar, reduzir, escalonar ao tamanho original, realinhar os eixos aos do plot original, observar as coordenadas (x e y), observar somente a coordenada y, e retornar ao início."
  },
  {
    "objectID": "plotly.html#gráficos-produzidos-com-ggplot2-e-com-a-interatividade-do-plotly",
    "href": "plotly.html#gráficos-produzidos-com-ggplot2-e-com-a-interatividade-do-plotly",
    "title": "Gráficos interativos - o pacote plotly",
    "section": "Gráficos produzidos com ggplot2, e com a interatividade do plotly",
    "text": "Gráficos produzidos com ggplot2, e com a interatividade do plotly\n      Toda a interatividade obtida acima com o plotly é facilmente exportada para um gráfico elaborado com o ggplot2. Para isso, ilustra-se um gráfico simples produzido por esse:\n\nlibrary(ggplot2)\n\nx = 1:10\ny = 2*x/(1+x)  # valor de \"y\" como uma função hiperbólica em \"x\"\nggplot(data=NULL, aes(x,y))+\n  geom_point()\n\n\n\n\n\n\n\n\n      E agora, basta incluir o comando ggplotly abrangendo a linha que produz o gráfico, para obter-se o mesmo gráfico, mas com a interatividade do pacote plotly:\n\nlibrary(plotly)\nggplotly(ggplot(data=NULL, aes(x,y))+\n  geom_point())"
  },
  {
    "objectID": "plotly.html#sofisticando-a-sintaxe-para-o-plotly",
    "href": "plotly.html#sofisticando-a-sintaxe-para-o-plotly",
    "title": "Gráficos interativos - o pacote plotly",
    "section": "Sofisticando a sintaxe para o plotly",
    "text": "Sofisticando a sintaxe para o plotly\n      Como é da sabedoria popular, “nada vem de graça…”, e também é assim com o aprendizado de linguagens de programação ou sintaxes dos pacotes do R. Contudo, e como também repousado na sabedoria popular, após espremer-se os limões, eis que temos a limonada !\n      Na prática, é possível construir-se gráficos bastante sofisticados com o pacote plotly, embora nem tanto como para o ggplot2. Contudo, trata-se de outra biblioteca e, portanto, de outros comandos a empregar. Assim, também é possível dimensionar os pontos, escolher o seu tipo, colorir linhas, inserir legendas, e outras tantas “façanhas” digitais. Mas também é preciso aprender a sintaxe adequada pra isso, o que não vamos tratar neste material, por direcioná-lo principalmente ao emprego do recurso à produção de objetos didáticos interativos.\n      Mas, só pra dar um “gostinho”, segue um trecho de código para agregar valor ao gráfico simples de crescimento exponencial compilado com o plotly:\n\nplot_ly(x = ~x, y = ~y, type=\"scatter\", mode = \"markers+lines\", name = \"Dados\") %&gt;%\n  # Configurar marcadores (símbolos)\n  add_markers(marker = list(size = 15, symbol = \"circle\", opacity = 0.7)) %&gt;%\n  # Configurar linha\n  add_lines(line = list(color = \"blue\", width = 2)) %&gt;%\n  ## ADicionando etiquetas e nomes\n  # Layout do gráfico\n  layout(\n    title = \"Gráfico com Tamanho Independente de Símbolos e Linha\",\n    xaxis = list(title = \"Eixo X\"),\n    yaxis = list(title = \"Eixo Y\")\n  )"
  },
  {
    "objectID": "plotly.html#mais-interatividade",
    "href": "plotly.html#mais-interatividade",
    "title": "Gráficos interativos - o pacote plotly",
    "section": "Mais interatividade…",
    "text": "Mais interatividade…\n      Até o momento só “arranhamos” a interatividade do pacote plotly. Como mencionado ao início desse capítulo, essa biblioteca permite um grande conjunto de ações de usuário, como deslizadores (sliders), menu de escolha, botões, entre muitos.\n\nAdicionando um controle deslizante\n      Assim, ilustrando mais interatividade, é possível agregar um controle deslizante de intervalo (rangeslider) ao gráfico construído, tal como representado abaixo:\n\nplot_ly(x = ~x, y = ~y, type=\"scatter\") %&gt;%\n  add_lines() %&gt;%\n  rangeslider()\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n      Experimente posicionar o mouse num dos dois marcadores laterais do gráfico inferior, arrastando-o em seguida, e observando o resultado.\n\n\nAdicionando um menu suspenso\n      Menus suspensos (dropdown menu) permitem observar um gráfico diferente a cada opção selecionada. Para exemplificar esse recurso interativos, vamos primeiramente elaborar um conjunto de dados (dataframe) que possua a resposta linear, quadrática, e cúbica a uma variável independente, tal como segue:\n\nx = 1:10 # vetor da variável independente \"x\"\nyLin = x\nyQuad = x^2\nyCub = x^3 # criação das variáveis dependentes \"y\"\n\ndatLQC &lt;-data.frame(x,yLin,yQuad,yCub)\n\n      Agora podemos inserir o menu suspenso para opção das tendências matemáticas:\n\nplot_ly(datLQC, x = ~x, y = ~yLin, type = \"scatter\", mode = \"line\", name = \"Linear\") %&gt;%\n  add_trace(x = ~x, y = ~yQuad, mode = \"line\", name = \"Quadrático\") %&gt;%\n  add_trace(x = ~x, y = ~yCub, mode = \"line\", name = \"Cúbico\") %&gt;%\n  layout(\n    title = \"Gráficos de potência\",\n    xaxis = list(title = \"x\"),\n    yaxis = list(title = \"y\"),\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(label = \"yLin\", method = \"update\", args = list(list(visible = c(TRUE, FALSE, FALSE)))),\n          list(label = \"yQuad\", method = \"update\", args = list(list(visible = c(FALSE, TRUE, FALSE)))),\n          list(label = \"yCub\", method = \"update\", args = list(list(visible = c(FALSE, FALSE, TRUE))))\n        )\n      )\n    )\n  )\n\n\n\n\n\n      Ainda que você achar meio complicado o trecho de código acima, apenas copie-o, cole-o num script, e execute-o. Isso exemplifica a essência inerente ao Ensino Reprodutível, desde a simples reprodução do código, até sua alteração e mesmo accriação de novos. Sentindo curiosidade, você pode alterar alguns termos do código acima, como as etiquetas (label) que surgem no menu suspenso, o tipo de gráfico pretendido (substitua scatter por bar, por exemplo), ou o título do gráfico (title).\n      Em relação à interatividade produzida, adiciona-se às que já estavam presentes pelo comando plot_ly, a seleção do tipo de potência a representar pelo menu suspenso.\n      Assim como para os demais pacotes, existe um número significativo de comandos e widgets interativos com o plotly (sliders, botões de controle, por ex), e que, nesse caso específico, daria “pano pra manga” pra uma obra literária isolada. Mas você pode consultar as referências abaixo para um aprendizado mais abrangente, e mesmo um livro online gratuito com códigos e produtos correlatos."
  },
  {
    "objectID": "plotly.html#referência-do-pacote",
    "href": "plotly.html#referência-do-pacote",
    "title": "Gráficos interativos - o pacote plotly",
    "section": "Referência do pacote:",
    "text": "Referência do pacote:\n\nGeral\nManual:\nTutorial:"
  },
  {
    "objectID": "index.old.html",
    "href": "index.old.html",
    "title": "Como diriam no telemarketing … !",
    "section": "",
    "text": "Como diriam no telemarketing … !\n\nVocê está cansado de buscar fontes diferente de livros e internete pra manter o interesse da Turma ?\nVocê acha que as imagens dos livros que ensina poderiam ser “vivificadas” pra mostrar moléculas, gráficos e mapas de modo mais interessante ?\nVocê acha que moléculas observadas em 3D poderiam tornar as aulas mais “amigáveis” ?\nVocê acredita que suas aulas teriam mais combustível se você pudesse também interagir com as moléculas, possibilitando alterações visuais e animações ?\nVocê gostaria de aprender como fazer isso usando somente um programa online ?\nVocê não se sente “desprotegido” quando tenta ensinar uma relação gráfica meio abstrata de uma figura de livro pra Turma ?\nSeus alunos não acham meio chato quando precisam estudar alguma informação de cada região de um mapa num livro ?\nVocê acharia interessante apresentar aos alunos(as) gráficos dos livros, embora animados, com interatividade e mesmo simulações ?\nVocê acredita que um mapa informativo, mas interativo, do Brasil, do mundo ou qualquer região do planeta, poderia contribuir pra atenção de seus “pimpolhos(as)” ?\nVocê acha interessante se puder mostrar essas coisas numa simples página de browser (navegador), que pode ser lida num PC ou dispositivo móvel, mas sem precisar de internete ?\nVocê gostaria de aprender um única ferramenta que possibilitasse tudo isso e mais, como analisar dados dos mais divesos campos de estudo, construir belíssimos gráficos, simular situações de sua área, elaborar textos com qualidade de publicação técnico-científica, construir páginas de internete com imagens, vídeos, hiperlinks, criar livros inteiros, blogs ou mesmo um website completo ?\nE isso tudo por um único programa instalado em seu computador ou melhor, pela internete, e sem pagar nada ?!?\n\n\n…Então…seus problemas acabaram !!!"
  },
  {
    "objectID": "leaflet.html",
    "href": "leaflet.html",
    "title": "Mapas interativos - o pacote leaflet",
    "section": "",
    "text": "Não só de gráficos vive o R (ou o Ensino, de modo geral). O pacote leaflet, por exemplo, permite gerar interatividade cartográfica, ou seja, uma geovisualização de dados retratados em um mapa. Isso pode ser particularmente útil quando se deseja uma rápida visualização de alguma informação diretamente num mapa cartográfico, como distribuição de renda, informações de saúde e moléstias, áreas de desmatamento, de queimadas, etc. Exemplos variados de bancos de dados desse tipo são acessíveis, por exemplo, pelos sites do IBGE, DATA SUS, Portal de Dados Abertos do Governo Brasileiro, entre vários.\n## Estabelecendo coordenadas\nlibrary(leaflet)\nleaflet() %&gt;%  # carrega-se o pacote\n  addTiles() %&gt;%  # adiciona-se as \"peças\" (tiles)\n  setView(lng= -56.0949, lat= -15.5989, zoom = 4)\nlibrary(leaflet)\nleaflet() %&gt;%  # carrega-se o pacote\n  addTiles() %&gt;%  # adiciona-se as \"peças\" (tiles)\n  setView(lng= -56.0949, lat= -15.5989, zoom = 5) %&gt;% # adiciona-se as coordenadas desejadas e o nível de ampliação\n  addMarkers(lng=-56.0949, lat=-15.5989)\nlibrary(leaflet)\nleaflet() %&gt;%  # carrega-se o pacote\n  addTiles() %&gt;%  # adiciona-se as \"peças\" (tiles)\n  setView(lng= -56.0949, lat= -15.5989, zoom = 5) %&gt;% # adiciona-se as coordenadas desejadas e o nível de ampliação\n  addMarkers(lng=-56.0949, lat=-15.5989,\n             popup=\"&lt;b&gt;650.912 habitantes&lt;/b&gt;&lt;br&gt;&lt;a href='https://www.cuiaba.mt.gov.br/'&gt;Município&lt;/a&gt;\") # adiciona-se informação e link ao marcador"
  },
  {
    "objectID": "leaflet.html#usando-o-leaflet-com-uma-planilha-contendo-várias-coordenadas",
    "href": "leaflet.html#usando-o-leaflet-com-uma-planilha-contendo-várias-coordenadas",
    "title": "Mapas interativos - o pacote leaflet",
    "section": "Usando o leaflet com uma planilha contendo várias coordenadas",
    "text": "Usando o leaflet com uma planilha contendo várias coordenadas\n      Ainda que seja legal a interatividade cartográfica mencionada acima faz mais sentido quando temos um conjunto de dados associados a cada coordenada geográfica, permitindo ilustrar-se uma quantidade maior de informações num mapa.\n      Para ilustrar isso vamos utilizar um levantamento de alguns aeroportos e aeródromos pelo Brasil. Para isso, carregue os dados que seguem transcrevendo o trecho de código abaixo para um script.\n\ndados_aero &lt;-structure(list(aerodromo = c(\"Aero Agrícola Gaivota\", \"Aero Agrícola Sapezal\", \n\"Aeroagrícola Solo\", \"Aeroclube de Atibaia\", \"Aeroclube de Bento Gonçalves\", \n\"Aeroclube de Eldorado do Sul\", \"Aeroclube de Foz do Iguaçu\", \n\"Aeroclube de João Pessoa\", \"Aeroclube de Nova Iguaçu\", \"Aeroclube de Passo Fundo\", \n\"Aeroclube de Rio Negrinho\", \"Aeroclube de Rondônia\", \"Aeroclube de Santa Catarina\", \n\"Aeroclube São José do Rio Pardo\", \"Aeródomo Novo Aripuanã\", \n\"Aeródromo Aerocampo\", \"Aeródromo Aeroporto Regional da Zona da Mata\", \n\"Aeródromo Aero Rural\", \"Aeródromo Aero Z Ferrus\", \"Aeródromo Afonso Pena\", \n\"Aeródromo Agricenter\", \"Aeródromo Agrícola Rio Galhão\", \n\"Aeródromo Agropecuária Céu Aberto Ltda\", \"Aeródromo Agropecuária Nova Santana\", \n\"Aeródromo Agrosan\", \"Aeródromo Agrovale\", \"Aeródromo Aguinaldo Pereira Lima\", \n\"Aeródromo Alenquer\", \"Aeródromo Almerim\", \"Aeródromo Altamira\", \n\"Aeródromo Amambaí\", \"Aeródromo Amapá\", \"Aeródromo Anamoim\", \n\"Aeródromo André Maggi\", \"Aeródromo Ângelo Ponzoni\", \"Aeródromo Aparecida do Taboado\", \n\"Aeródromo Aparecido O. Silva\", \"Aeródromo Araguaiana\", \"Aeródromo Araguari\", \n\"Aerodromo Areia Branca\", \"Aeródromo Ariquemes\", \"Aeródromo Arraias\", \n\"Aeródromo Arroio Grande\", \"Aeródromo Associação Tocantinense de Aviação\", \n\"Aeródromo Auaris\"), lat = c(-22.9805, -13.5511, -23.4471, -23.1281, \n-29.1473, -30.0507, -25.3696, -7.09217, -22.7461, -28.2509, -26.3207, \n-8.79415, -27.6116, -21.6473, -5.11774, -13.6365, -21.5131, -9.92088, \n0.993532, -25.5293, -22.6239, -10.4239, -9.50103, -10.1417, -11.3977, \n-9.50436, -23.6746, -1.91731, -1.47771, -3.25205, -23.1439, 2.07607, \n1.78498, -9.89865, -26.9995, -20.0891, -22.0691, -15.7092, -18.6679, \n-7.98825, -9.88046, -13.0259, -32.2293, -10.1824, 4.00087), long = c(-51.5425, \n-58.8603, -48.8665, -46.5747, -51.5411, -51.4434, -54.4707, -34.8417, \n-43.4642, -52.5168, -49.5219, -63.8574, -48.6732, -46.9282, -60.3651, \n-57.9038, -43.1735, -56.0051, -51.1208, -49.1748, -55.5691, -46.0765, \n-61.2744, -60.5479, -58.1215, -40.3698, -49.8155, -54.7218, -52.5825, \n-52.2553, -55.2077, -50.8597, -67.4055, -58.5819, -51.1401, -51.1478, \n-48.7067, -51.8377, -48.1903, -61.0506, -63.0471, -46.8838, -53.0561, \n-48.5455, -64.5043), uf = c(\"PR\", \"MT\", \"SP\", \"SP\", \"RS\", \"RS\", \n\"PR\", \"PB\", \"RJ\", \"RS\", \"SC\", \"RO\", \"SC\", \"SP\", \"AM\", \"MT\", \"MG\", \n\"MT\", \"AP\", \"PR\", \"MS\", \"TO\", \"MT\", \"MT\", \"MT\", \"BA\", \"PR\", \"PA\", \n\"PA\", \"PA\", \"MS\", \"AP\", \"AM\", \"MT\", \"SC\", \"MS\", \"SP\", \"MT\", \"MG\", \n\"AM\", \"RO\", \"TO\", \"RS\", \"TO\", \"RR\")), class = \"data.frame\", row.names = c(NA, \n-45L))\n\n      Agora observe cada aeródromo e aeroclube no mapa, sem a necessidade de clique de mouse, apenas passando o mesmo sobre o mapa, com auxílio do código abaixo:\n\nlibrary(htmltools) # carrega pacote para facilitar a visualização por \"mouseover\"\nlibrary(leaflet)\nleaflet(dados_aero) %&gt;% addTiles() %&gt;%\n  addMarkers(~long, ~lat, label = ~htmlEscape(aerodromo)) # adiciona os marcadores e associa aos nomes de cada aeródromo"
  },
  {
    "objectID": "leaflet.html#referência-do-pacote",
    "href": "leaflet.html#referência-do-pacote",
    "title": "Mapas interativos - o pacote leaflet",
    "section": "Referência do pacote:",
    "text": "Referência do pacote:\n\nGeral\nManual:\nTutorial"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "animationPlots.html",
    "href": "animationPlots.html",
    "title": "Animando um gráfico básico - o pacote anim.plots",
    "section": "",
    "text": "Daqui em diante serão apresentados alguns pacotes do R que permitem animações, interatividade e simulações gráficas e de geovisualização. Cada pacote será brevemente descrito, sucedendo-se sua ilustração com temas contidos no MAPA - Material de Apoio Pedagógico para Aprendizagens da Secretaria de Educação de Minas Gerais.\n      Será fornecida uma breve apresentação de cada pacote, o problema e seu emprego ilustrado junto ao MAPA, o trecho de código para execução/modificação no RStudio, seu resultado, e as vantagens/desvantagens aparentes de cada pacote.\n      Para facilitar o entendimento de cada pacote, optou-se por apresentar uma sequência de definição, sintaxe, exemplos gerais, ilustração do MAPA, sugestões, e referências."
  },
  {
    "objectID": "animationPlots.html#uma-palavrinha-antes",
    "href": "animationPlots.html#uma-palavrinha-antes",
    "title": "Animando um gráfico básico - o pacote anim.plots",
    "section": "",
    "text": "Daqui em diante serão apresentados alguns pacotes do R que permitem animações, interatividade e simulações gráficas e de geovisualização. Cada pacote será brevemente descrito, sucedendo-se sua ilustração com temas contidos no MAPA - Material de Apoio Pedagógico para Aprendizagens da Secretaria de Educação de Minas Gerais.\n      Será fornecida uma breve apresentação de cada pacote, o problema e seu emprego ilustrado junto ao MAPA, o trecho de código para execução/modificação no RStudio, seu resultado, e as vantagens/desvantagens aparentes de cada pacote.\n      Para facilitar o entendimento de cada pacote, optou-se por apresentar uma sequência de definição, sintaxe, exemplos gerais, ilustração do MAPA, sugestões, e referências."
  },
  {
    "objectID": "animationPlots.html#o-pacote-anim.plots",
    "href": "animationPlots.html#o-pacote-anim.plots",
    "title": "Animando um gráfico básico - o pacote anim.plots",
    "section": "O pacote anim.plots",
    "text": "O pacote anim.plots\n\nDefinição:\n      O pacote anim.plots é uma biblioteca para animação de gráficos elaborados pelo sistema básico desses do R (basic), tal como visto na ?@sec-basico. Ele permite a animação de gráfico de pontos, curvas, linhas, barras, contorno, e histograma, entre outros.\n\n\nSintaxe:\n\nanim.curve(expr, x = NULL, from = 0, to = 1, n = 255, times, ...)\nObs: outras atribuições do plot são iguas às do comando plot (cex, pch, type, etc)\n\nexpr: expressão com 2 argumentos, ou função de x em t;\n\nn: representa o no. de pontos que serão gerados pela função ao longo do eixo x (se type=\"l\", faz a linha, que pode ser meio ríspida se houver poucos pontos);\n\nx: valores de x em que a função será expressada;\n\nfrom=, to= : substitui o \"x\" ; \n\ntimes: vetor de valores de t no qual a função será avaliada. Cada valor cria um frame da animação."
  },
  {
    "objectID": "animationPlots.html#exemplos-gerais",
    "href": "animationPlots.html#exemplos-gerais",
    "title": "Animando um gráfico básico - o pacote anim.plots",
    "section": "Exemplos gerais:",
    "text": "Exemplos gerais:\n      Agora sim, animação em gráficos !! Após instalar o pacote, copie o trecho que segue e reproduza-o num script do RStudio.\n\nlibrary(anim.plots)  # carrega o pacote\nanim.curve(x^t, times=1:5, n=5) # anima uma linha com função x^t, com 5 frames variando no expoente da equação de 1 a 5\n\n      O gráfico gerado na aba de Plots do RStudio deverá parecer-se com uma animação na qual uma linha do gráfico torna-se progressivamente côncava durante 5 segundos. Se não der certo de primeira, rode a linha da animação novamente (costuma funcionar!). Como não é possível demonstrar isso numa página estática, segue o resultado do código, embora também estático.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Sequência de apresentação da função “x^t” com variação em “t”. No RStudio essa sequência converge a uma animação.\n\n\n\n      Como mencionado, é possível aplicar vários argumentos do comando plot na animação. Experimente variar o símbolo e a cor, tal como segue:\n\nlibrary(anim.plots)  # carrega o pacote\nanim.curve(x^t, times=1:5, n=5, type=\"p\", col=\"darkgreen\", cex=2, pch=16) # t vai de 1 a 5, com 5 pontos no gráfico, mas com cor, tipo (pch) e tamanho (cex) do símbolo\n\n      Outra forma interessante de animar um gráfico pelo pacote anim.plots consiste em visualizar um ponto apenas no plot, caminhando ao longo da função. O trecho abaixo exemplifica essa situação visualizada na aba Plotsdo RStudio.\n\nlibrary(anim.plots)\nx=1:10 # sequência de 1 a 10, e com intervalo unitário\nanim.plot(x, -x^3-3*x+7, times=1:10, \n          col=\"green\", pch=19, cex=2) # cor, tipo e tamanho do símbolo\n\n      Como não é possível repassar aqui a simulação, segue uma imagem ilustrativa de seu resultado.\n\n\n\nUm quadro representativo do trecho de código acima, representando o movimento de um único ponto ao longo de uma expressão.\n\n\n      Outra animação bem legal que ilustra o pacote envolve a formação de uma curva senoide no tempo. Veja o trecho simples abaixo, e reproduza-o no RStudio.\n\nanim.curve(sin(x*t), times=1:30, n=100, speed=12, col=\"darkgreen\", from=-1, to=1)\n\n ## Salvando a animação\n      O anim.plots apresenta o resultado da animação dentro do ambiente do RStudio. Isso não é muito prático para ilustrar alguma situação gráfica em animação, posto que há necessidade dos programas, abertura de arquivo, compilação, etc. Assim, é desejável que a animação seja armazenada num arquivo simples.\n      Para o anim.plots é possível salvar o arquivo como uma imagem animada em diversos formatos, como GIF (imagem) ou HTML (navegador). Dessa maneira, para ilustrar algum gráfico animado, basta abrir o arquivo em qualquer computador ou dispositivo móvel. O comando com os argumentos opcionais de formato de arquivo é:\n\nanim.save(obj, filename, gif = \"GIF\", mp4 = \"Video\", swf = \"SWF\", html = \"HTML\", tex = \"Latex\")  # os argumentos vão entre parênteses\n\nOnde:\n  obj = o nome temporário da animação\n  filename = nome do arquivo de animação a salvar\n  gif, mp4, swf, html, tex = alternativamente, o atributo do arquvio de animação"
  },
  {
    "objectID": "animationPlots.html#um-exemplo-do-mapa",
    "href": "animationPlots.html#um-exemplo-do-mapa",
    "title": "Animando um gráfico básico - o pacote anim.plots",
    "section": "Um exemplo do MAPA",
    "text": "Um exemplo do MAPA\n      Para ilustrar o salvamento de uma animação, será retomado o exemplo de movimento acelerado que consta da ?@fig-movAcelera. Segue o código e uma imagem estática do resultado. A animation image salva como “acelera.gif” em seu computador, e imediatamente apresentada num editor de imagens.\n\nacelera &lt;- anim.curve(x*t, times=1:50/10, from=0, to=10, type=\"l\", col=\"pink\", lwd=5, xlab=\"tempo, s\", ylab=\"velocidade, m/s\")  # lwd é a espessura da linha\nanim.save(acelera, \"acelera.gif\")\n\n\n\n\nRepresentação estática de um quadro de animação gerado pelo anim.plots para exemplificar o efeito da aceleração no tempo, e a partir de relação gráfica constante no MAPA, 1o. Bimestre de C. Natureza e Suas Tecnologias, p.136, 2024.\n\n\n\nSalvando em HTML\n      O armazenamento do arquivo de animação em HTML possui algumas características adicionais interessantes. Primeiramente, um arquivo HTML pode ser lido em qualquer browser, não sendo necessário conexão à internet. Além disso, o formato salvo permite selecionar os quadros (frames) da animação, variar a velocidade de sua apresentação, além da visualização do código empregado para a compilação. Para o exemplo de aceleração acima, o trecho de código e um resultado estático são apresentados a seguir.\n\nacelera &lt;- anim.curve(x*t, times=1:50/10, from=0, to=10, type=\"l\", col=\"pink\", lwd=5, xlab=\"tempo, s\", ylab=\"velocidade, m/s\")  # lwd é a espessura da linha\nanim.save(acelera, \"acelera.html\")\n\n\n\n\nSimulação do movimento de aceleração com armazenamento do arquivo em HTML.\n\n\n      Se desejar outros exemplos e variações para a função anim.plots, experimente também a função anim.curve fornecida individualmente abaixo. Para salvar, contudo, será necessário adaptar o comando de salvamento anterior.\n      Outros exemplos mais complexo são visualizados abaixo. Basta copiar, colar, e rodar os trechos individualmente num script do R para observar seu efeito.\n\n## Alguns exemplos:\n\nlibrary(anim.plots)  # carrega o pacote\n\nanim.curve(x^t, times=1:5, n=5, type=\"p\", col=\"darkgreen\", cex=2, pch=15) # t vai de 1 a 5, com 5 pontos no gráfico\n\nanim.curve(x^t, times=1:5, n=10, type=\"p\") # t vai de 1 a 5, com 10 pontos no gráfico\n\nanim.curve(x^t, times=1:10, n=10, type=\"p\") # t vai de 1 a 10, formando 10 frames, e com 10 pontos no gráfico\n\nanim.curve(x^t, times=1:10, n=10, type=\"p\", speed= 5) # t vai de 1 a 10, com 10 pontos no gráfico, e velocidade 5x maior\n\nanim.curve(x^t, times=1:10/5, n=10, type=\"p\") # t vai de 1 a 10, com 10 pontos no gráfico, com o 5x a velocidade, mas com desenho diferente !\n\nanim.curve(x^t, times=1:10/1, n=10, type=\"p\") # t vai de 1 a 10, com 10 pontos no gráfico\n\nanim.curve(x^t, times=1:10/2, n=10, type=\"p\") # t vai de 1 a 10, com 10 pontos no gráfico, mas com o dobro da velocidade do anterior"
  },
  {
    "objectID": "animationPlots.html#referência-do-pacote",
    "href": "animationPlots.html#referência-do-pacote",
    "title": "Animando um gráfico básico - o pacote anim.plots",
    "section": "Referência do pacote:",
    "text": "Referência do pacote:\n\nGeral\nManual:\nTutorial:"
  },
  {
    "objectID": "cinetica.html",
    "href": "cinetica.html",
    "title": "Cinética de reações e o pacote plotly",
    "section": "",
    "text": "O Ambiente do R também permite a construção de objetos didáticos que possam “vivificar” o conteúdo de livros-texto. Como um exemplo, segue um script para a criação de um objeto que pode auxiliar no aprendizado de cinética de reações químicas, tais como o exemplificado à página 34 do volume 2 do livro-texto que segue.\n\n\n\nCinética de Reações, tal como apresentado no livro-texto\n\n\n      Ampliando um pouco a figura de cinética….\n\n\n\nAmpliação da imgem de cinética\n\n\n      Assim sendo, uma sugestão para um objeto que ajude na compreensão do tema poderia envolver a reação de formação de produtos com variação da constante de desligamento do reagente, como segue:\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\n\nUma representação dinâmica da cinética de formação de produto variando a taxa de dissociação.\n\n\n      Se desejar observar como o código foi desenvolvido, e aplicá-lo diretamente no **RStudio Cloud* já visto, segue trecho:\n\n# Instale os pacotes necessários, caso ainda não os tenha\n# install.packages(\"ggplot2\")\n# install.packages(\"plotly\")\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Função para gerar os dados e o gráfico com base em taxa.dissociação.produto\ngenerate_plot_data &lt;- function(taxa.dissociação.produto) {\n  y.max &lt;- 1\n  x &lt;- seq(0.1, 10, length.out = 100)\n  y &lt;- y.max * x / (taxa.dissociação.produto + x)\n  data.frame(x, y)\n}\n\n# Inicialize o gráfico com taxa.dissociação.produto = 1\ninitial_taxa.dissociação.produto &lt;- 1\nplot_data &lt;- generate_plot_data(initial_taxa.dissociação.produto)\n\n# Crie o gráfico inicial usando ggplot2\np &lt;- ggplot(plot_data, aes(x = x, y = y)) +\n  geom_line() +\n  labs(title = paste(\"Formação de Produtos com Alteração da Taxa de Desligamento do Reagente:: y = y.max * x / (\", initial_taxa.dissociação.produto, \" + x)\"),\n       x = \"Tempo\",\n       y = \"Produto\") +\n  theme_minimal() +\n  ylim(0, 1)\n\n# Converta para um objeto plotly\nfig &lt;- ggplotly(p)\n\n# Adicione um slider para taxa.dissociação.produto utilizando plotly\nsteps &lt;- lapply(seq(0.1, 10, by = 0.1), function(taxa.dissociação.produto) {\n  list(\n    label = as.character(taxa.dissociação.produto),\n    method = \"restyle\",\n    args = list(\n      list(\n        x = list(generate_plot_data(taxa.dissociação.produto)$x),\n        y = list(generate_plot_data(taxa.dissociação.produto)$y)\n      ),\n      list(title = paste(\"Formação de Produtos com Alteração da Taxa de Desligamento do Reagente: y = y.max * x / (\", taxa.dissociação.produto, \" + x)\"))\n    )\n  )\n})\n\nfig &lt;- fig %&gt;%\n  layout(\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"taxa.dissociação.produto: \"),\n        steps = steps\n      )\n    )\n  )\n\n# Visualize o gráfico\nfig"
  },
  {
    "objectID": "cinetica.html#exemplo-de-cinética-de-reações",
    "href": "cinetica.html#exemplo-de-cinética-de-reações",
    "title": "Cinética de reações e o pacote plotly",
    "section": "",
    "text": "O Ambiente do R também permite a construção de objetos didáticos que possam “vivificar” o conteúdo de livros-texto. Como um exemplo, segue um script para a criação de um objeto que pode auxiliar no aprendizado de cinética de reações químicas, tais como o exemplificado à página 34 do volume 2 do livro-texto que segue.\n\n\n\nCinética de Reações, tal como apresentado no livro-texto\n\n\n      Ampliando um pouco a figura de cinética….\n\n\n\nAmpliação da imgem de cinética\n\n\n      Assim sendo, uma sugestão para um objeto que ajude na compreensão do tema poderia envolver a reação de formação de produtos com variação da constante de desligamento do reagente, como segue:\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\n\nUma representação dinâmica da cinética de formação de produto variando a taxa de dissociação.\n\n\n      Se desejar observar como o código foi desenvolvido, e aplicá-lo diretamente no **RStudio Cloud* já visto, segue trecho:\n\n# Instale os pacotes necessários, caso ainda não os tenha\n# install.packages(\"ggplot2\")\n# install.packages(\"plotly\")\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Função para gerar os dados e o gráfico com base em taxa.dissociação.produto\ngenerate_plot_data &lt;- function(taxa.dissociação.produto) {\n  y.max &lt;- 1\n  x &lt;- seq(0.1, 10, length.out = 100)\n  y &lt;- y.max * x / (taxa.dissociação.produto + x)\n  data.frame(x, y)\n}\n\n# Inicialize o gráfico com taxa.dissociação.produto = 1\ninitial_taxa.dissociação.produto &lt;- 1\nplot_data &lt;- generate_plot_data(initial_taxa.dissociação.produto)\n\n# Crie o gráfico inicial usando ggplot2\np &lt;- ggplot(plot_data, aes(x = x, y = y)) +\n  geom_line() +\n  labs(title = paste(\"Formação de Produtos com Alteração da Taxa de Desligamento do Reagente:: y = y.max * x / (\", initial_taxa.dissociação.produto, \" + x)\"),\n       x = \"Tempo\",\n       y = \"Produto\") +\n  theme_minimal() +\n  ylim(0, 1)\n\n# Converta para um objeto plotly\nfig &lt;- ggplotly(p)\n\n# Adicione um slider para taxa.dissociação.produto utilizando plotly\nsteps &lt;- lapply(seq(0.1, 10, by = 0.1), function(taxa.dissociação.produto) {\n  list(\n    label = as.character(taxa.dissociação.produto),\n    method = \"restyle\",\n    args = list(\n      list(\n        x = list(generate_plot_data(taxa.dissociação.produto)$x),\n        y = list(generate_plot_data(taxa.dissociação.produto)$y)\n      ),\n      list(title = paste(\"Formação de Produtos com Alteração da Taxa de Desligamento do Reagente: y = y.max * x / (\", taxa.dissociação.produto, \" + x)\"))\n    )\n  )\n})\n\nfig &lt;- fig %&gt;%\n  layout(\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"taxa.dissociação.produto: \"),\n        steps = steps\n      )\n    )\n  )\n\n# Visualize o gráfico\nfig"
  },
  {
    "objectID": "ferramentas.html",
    "href": "ferramentas.html",
    "title": "Um pouco sobre as ferramentas",
    "section": "",
    "text": "São vários os programas disponíveis para observação e estudo tridimensional de modelos atômicos, e que cujo acesso se realiza por computador, dispositivos móveis, e mesmo pela internete. Uns são gratuitos, outros de demonstração gratuita, outros são pagos. Numa lista pequena, pode-se mencionar:\n\nPymol\nMaestro\niMolView\nVMD\nUCSF Chimera\nVesta\nQuteMol\n\n      Alguns programas também permitem a construção de moléculas e sua representação em 3D, como por exemplo:\n\nMolView\nChemSketch\nDIY-molecules\n\n      Por sua vez, o Jmol é um programa multiplataforma (Windows, Mac OS X, Linux, Unix) elaborado em ambiente Java, e pode ser executado tanto em versão fechada (standalone), como integrado a outras aplicações em Java, ou ainda junto a buscadores de internet por auxílio de um applet. Diferente de programas comuns, ela não requer instalação, apenas execução de arquivo Java. Dessa forma, o Jmol pode rodar tanto a partir de uma pasta de diretório contendo seus arquivos, como a partir de um disco rígido ou mídia removível (pendrive). Além disso é um programa de código-fonte e distribuição livres para representação de modelos moleculares tridimensionais, permite uma diversidade de visualizações e cores, movimentos de translação e rotação das moléculas, ampliação visual, cálculos de distância, ângulos, estruturas e superfícies, otimizações moleculares, e animações, dentre outros. Existe um número muito grande de portais na internet que utilizam o Jmol, a começar pela lista disponível na página da comunidade Wiki.\n      Complementarmente, o acesso ao Jmol pode ser realizado pela internete, sem a necessidade de arquivos no computador. Dentre os diversos sites que possuem o applet JSmol que permite esse acesso, sugerimos clicar na imagem abaixo, que direcionará ao applet do website da St. Olaf College, ilustrando uma molécula de água:"
  },
  {
    "objectID": "ferramentas.html#visualização-de-moléculas-em-3d-e-animações",
    "href": "ferramentas.html#visualização-de-moléculas-em-3d-e-animações",
    "title": "Um pouco sobre as ferramentas",
    "section": "",
    "text": "São vários os programas disponíveis para observação e estudo tridimensional de modelos atômicos, e que cujo acesso se realiza por computador, dispositivos móveis, e mesmo pela internete. Uns são gratuitos, outros de demonstração gratuita, outros são pagos. Numa lista pequena, pode-se mencionar:\n\nPymol\nMaestro\niMolView\nVMD\nUCSF Chimera\nVesta\nQuteMol\n\n      Alguns programas também permitem a construção de moléculas e sua representação em 3D, como por exemplo:\n\nMolView\nChemSketch\nDIY-molecules\n\n      Por sua vez, o Jmol é um programa multiplataforma (Windows, Mac OS X, Linux, Unix) elaborado em ambiente Java, e pode ser executado tanto em versão fechada (standalone), como integrado a outras aplicações em Java, ou ainda junto a buscadores de internet por auxílio de um applet. Diferente de programas comuns, ela não requer instalação, apenas execução de arquivo Java. Dessa forma, o Jmol pode rodar tanto a partir de uma pasta de diretório contendo seus arquivos, como a partir de um disco rígido ou mídia removível (pendrive). Além disso é um programa de código-fonte e distribuição livres para representação de modelos moleculares tridimensionais, permite uma diversidade de visualizações e cores, movimentos de translação e rotação das moléculas, ampliação visual, cálculos de distância, ângulos, estruturas e superfícies, otimizações moleculares, e animações, dentre outros. Existe um número muito grande de portais na internet que utilizam o Jmol, a começar pela lista disponível na página da comunidade Wiki.\n      Complementarmente, o acesso ao Jmol pode ser realizado pela internete, sem a necessidade de arquivos no computador. Dentre os diversos sites que possuem o applet JSmol que permite esse acesso, sugerimos clicar na imagem abaixo, que direcionará ao applet do website da St. Olaf College, ilustrando uma molécula de água:"
  },
  {
    "objectID": "ferramentas.html#gráficos-animados-simulações-e-visualização-cartográfica",
    "href": "ferramentas.html#gráficos-animados-simulações-e-visualização-cartográfica",
    "title": "Um pouco sobre as ferramentas",
    "section": "Gráficos animados, simulações, e visualização cartográfica",
    "text": "Gráficos animados, simulações, e visualização cartográfica\n      R é um software gratuito e de código aberto, originalmente desenvolvido para computação estatística e gráficos. Roda-se o R em diversas interfaces de usuário (GUI, Graphical User Interface), dentre as quais destaca-se o RStudio, um ambiente de desenvolvimento integrado (IDE) também gratuito. O Rstudio possui também uma versão online gratuita, acessível pelo site RStudio Cloud.\n\nPode-se trabalhar com o Rstudio para coisas simples, como texto, gráficos e tabelas, mas também para um largo espectro de atividades, em função de sua expansibilidade por pacotes instaláveis. Esses pacotes são obtidos no site oficial do projeto - R CRAN, bem como desenvolvidos e disponibilizados por iniciativas individuais em sites autorais.\n      Para se ter uma ideia desses espectro, alguns pacotes (library) permitem análise e criação de textos, interface com portadores de deficência visual, animações, gráficos e tabelas de qualidade de publicação técnico-científica, manipulação e anaĺise de dados e de imagens, música, arte, Ciência de Dados, internet das coisas (IoT), linguagem profunda de máquina, e mesmo inteligência artificial.\n      Para a pesquisa científica o R possui diversos pacotes direcionados a temas específicos e bem diversos, como Ecologia, Estatística, Matemática, Física, Biologia, Química, Artes, Geografia, Geologia, e História, dentre muitos.\n\n      Entre os diversos pacotes oficiais (na verdade, mais de 20 mil!), existem alguns que permitem a elaboração de objetos didáticos nos moldes do subtítulo retro. Esses pacotes são os listados abaixo, e serão ilustrados com conteúdos do ensino médio constantes do Material de Apoio Pedagógico para Aprendizagens de Minas Gerais - Mapa, bem como livros didáticos para Matemática, Física, Química e Biologia do nível educacional.\n\nbasic - criação de gráficos básicos\nggplot2 - gráficos mais elaborados e muito bonitos\nanimation.plots - animação de gráficos\nmanipulate - simulação gráfica de equações\ngganimate - animação de gráficos do pacote ggplot2\nplotly- gráficos interativos\nleaflet - interatividade cartográfica (mapas)"
  },
  {
    "objectID": "pacotes.html",
    "href": "pacotes.html",
    "title": "Instalando pacotes no RStudio",
    "section": "",
    "text": "Diferentemente do pacote basic para elaboração de gráficos, e que é inerente à instalação original do R, os pacotes de animação e interatividade de que trata esta material precisam ser instalados. Para isso, siga as instruções abaixo, exemplificadas para o primeiro pacote de animação que será visto, anim.plots."
  },
  {
    "objectID": "pacotes.html#carregando-o-pacote-instalado",
    "href": "pacotes.html#carregando-o-pacote-instalado",
    "title": "Instalando pacotes no RStudio",
    "section": "Carregando o pacote instalado",
    "text": "Carregando o pacote instalado\n      O R permite que instale um número gigantesco de pacotes. Mas é claro que você não os utilizará simultaneamente. Dessa forma, o R precisa “saber” qual o pacote que se deseja no momento, o que é realizado pelo comando library, e ilustrado abaixo para o pacote anim.plots, como segue:\n\nlibrary(anim.plots)\n\n      Pronto !! Pacote instalado. **Para usar qualquer pacote instalado do R, é necessário carregá-lo"
  },
  {
    "objectID": "jmol.html",
    "href": "jmol.html",
    "title": "Usando o Jmol para observar moléculas em 3D",
    "section": "",
    "text": "Pode-se começar a usar o Jmol de vários modos. Se for usar em seu computador ou notebook, ou mesmo a partir de uma mídia removível (pendrive), pode acessá-lo baixando, descomprimindo e executando o arquivo Jmol.jar presente na pasta principal no site do Jmol.\n      Agora, se não quiser instalar nada, pode também acessá-lo online a partir de diversos sítios. Nesse curso vamos utilizar um bem famoso, adaptado de um dos próprios desenvolvedores do programa. Basta clicar nesse link, numa nova aba, por exemplo:\n \n\nhttps://chemapps.stolaf.edu/jmol/jmol.php?model=water\n\n      Agora, clique na molécula com o botão esquerdo do mouse ou com o touchpad, e faça movimentos. Ou então gire o botão do meio do mouse ou realize gestos de afastamento e proximidade com dois dedos no touchpad. A Figure 1 que segue ilustra o resultado.\n\n\n\n\n\n\n\nFigure 1: Tela (clicável) referente ao modelo da molécula de água renderizado em navegador pelo site do St. Olaff College.\n\n\n\n      Essa é a essência principal ao referenciarmos no título deste curso a ideia de moléculas voadoras."
  },
  {
    "objectID": "jmol.html#onde-começar",
    "href": "jmol.html#onde-começar",
    "title": "Usando o Jmol para observar moléculas em 3D",
    "section": "",
    "text": "Pode-se começar a usar o Jmol de vários modos. Se for usar em seu computador ou notebook, ou mesmo a partir de uma mídia removível (pendrive), pode acessá-lo baixando, descomprimindo e executando o arquivo Jmol.jar presente na pasta principal no site do Jmol.\n      Agora, se não quiser instalar nada, pode também acessá-lo online a partir de diversos sítios. Nesse curso vamos utilizar um bem famoso, adaptado de um dos próprios desenvolvedores do programa. Basta clicar nesse link, numa nova aba, por exemplo:\n \n\nhttps://chemapps.stolaf.edu/jmol/jmol.php?model=water\n\n      Agora, clique na molécula com o botão esquerdo do mouse ou com o touchpad, e faça movimentos. Ou então gire o botão do meio do mouse ou realize gestos de afastamento e proximidade com dois dedos no touchpad. A Figure 1 que segue ilustra o resultado.\n\n\n\n\n\n\n\nFigure 1: Tela (clicável) referente ao modelo da molécula de água renderizado em navegador pelo site do St. Olaff College.\n\n\n\n      Essa é a essência principal ao referenciarmos no título deste curso a ideia de moléculas voadoras."
  },
  {
    "objectID": "jmol.html#como-carregar-uma-molécula-online",
    "href": "jmol.html#como-carregar-uma-molécula-online",
    "title": "Usando o Jmol para observar moléculas em 3D",
    "section": "Como carregar uma molécula online ?",
    "text": "Como carregar uma molécula online ?\n      Pra brincar um pouco com outra molécula, experimente mudar o modelo na própria página de internete, ao final da linha. Por exemplo, de water para tylenol:\n\nhttps://chemapps.stolaf.edu/jmol/jmol.php?model=tylenol\n\n      Você pode tentar fazer isso com outras moléculas, digitando seu nome em inglês, por tratar-se de um site estrangeiro. Mas é claro que o banco de dados dessa busca não é ilimitado, e por vezes o sistema não encontrará a molécula desejada.\n      Mas há alternativas. Uma delas é buscar o nome da molécula em um site utlizado como banco de dados, o PubChem. Exemplificando para a vitamina C (ácido ascórbico):\n\n\n\n1. Entra no site do [PubChem](https://pubchem.ncbi.nlm.nih.gov/) ;\n2. Procura por \"ascorbic acid\" ;\n3. Se existir, digite esse mesmo termo ao final da linha do *JSmol online*, ou seja:\n    https://chemapps.stolaf.edu/jmol/jmol.php?model=ascorbic acid"
  },
  {
    "objectID": "jmol.html#como-baixar-uma-molécula-em-seu-computador",
    "href": "jmol.html#como-baixar-uma-molécula-em-seu-computador",
    "title": "Usando o Jmol para observar moléculas em 3D",
    "section": "Como baixar uma molécula em seu computador",
    "text": "Como baixar uma molécula em seu computador\n      Caso você digite o nome da molécula no PubChem mas não a encontre após digitar seu nome no link do JSmol acima, é possível baixá-la no computador/notebook/tablet/smartphone a partir do site em formato lido pelo Jmol. Pra isso, siga os passos seguintes, exemplificados para o tetracloreto de carbono:\n\n1. Entre no site do Pubchem (https://pubchem.ncbi.nlm.nih.gov);\n2. No campo de busca digite \"Carbon Tetrachloride\";\n3. Clique no 1o. composto;\n4. Clique em \"3D\";\n5. Clique em \"Download coordinates\";\n6. Salve o arquivo clicando na opçao \"Save\" para SDF;\n7. Forneça um nome mais \"amigável\" pro arquivo\n\n\n\n\n\nExemplo para download de estrutura molecular no computador a partir de sua seleção no site PubChem."
  },
  {
    "objectID": "jmol.html#como-construir-a-molécula-e-visualizá-la-no-jmol",
    "href": "jmol.html#como-construir-a-molécula-e-visualizá-la-no-jmol",
    "title": "Usando o Jmol para observar moléculas em 3D",
    "section": "Como construir a molécula e visualizá-la no Jmol",
    "text": "Como construir a molécula e visualizá-la no Jmol\n      Existem diversos programas de desenho molecular, online ou por instalação, tais como os listados abaixo:\n\nChemSketch\nChemical Sketch Tool\nMolView\nPubChem Sketcher\nChemDoodle\n\n      Também é possível unir o útil ao (quase)agradável, carregando uma molécula, adaptando-a ou construindo-a do zero, e visualizá-la diretamente no JSmol ! Para isso recomendamos os sites abaixo (imagem clicável):\n\nEdumol.\n\n\n\n\nSite do Edumol para carregamento, modificação e criação de moléculas renderizáveis em applet JSmol do próprio website.\n\n\n\nCheMagic Virtual Molecular Model Kit\n\n\n\n\nSite do ChemMagic Virtual Molecular Model Kit, que acessa diversas funções do Jmol por clique de mouse."
  },
  {
    "objectID": "anim.plots.html",
    "href": "anim.plots.html",
    "title": "A Lei dos Gases Ideais e o pacote anim.plots",
    "section": "",
    "text": "Alguns pacotes produzem animações ou simulações dentro do RStudio; outros o fazem separadamente, em arquivos HTML que podem atuar de forma independente. Para exemplificar o primeiro grupo, de pacotes que rodam animações internamente no RStudio, vamos iniciar com o pacote anim.plots."
  },
  {
    "objectID": "anim.plots.html#animações-dentro-do-rstudio",
    "href": "anim.plots.html#animações-dentro-do-rstudio",
    "title": "A Lei dos Gases Ideais e o pacote anim.plots",
    "section": "",
    "text": "Alguns pacotes produzem animações ou simulações dentro do RStudio; outros o fazem separadamente, em arquivos HTML que podem atuar de forma independente. Para exemplificar o primeiro grupo, de pacotes que rodam animações internamente no RStudio, vamos iniciar com o pacote anim.plots."
  },
  {
    "objectID": "anim.plots.html#um-gráfico-básico",
    "href": "anim.plots.html#um-gráfico-básico",
    "title": "A Lei dos Gases Ideais e o pacote anim.plots",
    "section": "Um gráfico básico",
    "text": "Um gráfico básico\n      Para entender como funciona o pacote anim.plots, vamos primeiro produzir um gráfico básico\n\nx &lt;- 1:5 # cinco valores de \"x\", 1 a 1\ny &lt;- x^2 # valores de \"y\" como quadrado de \"x\"\nplot(x,y) # gráfico dos pontos\n\n\n\n\n\n\n\n\n      Incrementando um pouco o gráfico:\n\nplot(x,y,col=\"darkgreen\", cex=2, pch=15, type=\"o\") # cex é tamanho do ponto, pch é tipo de ponto, type represente se ponto (p), linha (l) ou ambos (o)\n\n\n\n\n\n\n\n\n\nAnimando o gráfico\n      Agora podemos acrescentar alguma animação ao plot. Por exemplo, podemos gerar um arquivo de imagem animado, ou gif animado a partir do gráfico anterior, como segue:\n\nlibrary(anim.plots)\nanim.curve(x^t, times=1:5, n=5, type=\"p\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      Veja que o programa produziu 5 gráficos, um embaixo do outro. Isso não é propriamente uma animação, mas uma limitação do pacote: o anim.plots só produz animação dentro do RStudio, e não em página separada de um navegador. Contudo, para converter essa sequência de gráficos em uma animação em arquivo separado, basta salvá-lo com o comando abaixo:\n\nsequencia &lt;- anim.curve(x^t, times=1:5, n=5, type=\"o\", col=\"darkgreen\", cex=2, pch=15)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nanim.save(sequencia, \"sequencia.gif\")\n\nOutput at: sequencia.gif\n\n\n[1] TRUE\n\n\n      Pra testar, clique na aba Files (canto direito do Rstudio), procure o arquivo “sequencia.gif”, e clique uma vez para abrir a animação"
  },
  {
    "objectID": "anim.plots.html#uma-situação-prática-a-lei-dos-gases-ideais-em-função-da-temperatura",
    "href": "anim.plots.html#uma-situação-prática-a-lei-dos-gases-ideais-em-função-da-temperatura",
    "title": "A Lei dos Gases Ideais e o pacote anim.plots",
    "section": "Uma situação prática: a Lei dos Gases Ideais em função da temperatura",
    "text": "Uma situação prática: a Lei dos Gases Ideais em função da temperatura\n      Por definição, a Lei dos Gases Ideais de Clayperon nos define a seguinte relação entre as quantidades termodinâmicas que seguem:\n\\[\np*V = n*R*T\n\\tag{1}\\]\n      Nesse caso, pode-se representar p em função de V:\n\\[\np = \\frac{n*R*T}{V}\n\\tag{2}\\]\n      Onde:\n\np = pressão (variável dependente)\nV = volume (variável independente); no anim.plots é “x”\nn = no. de mols (no exemplo, 1)\nR = constante geral dos gases ideais, 8,314 J/mol/K\nT = temperatura (K); no anim.plots será considerado o parâmetro de variação, sendo denominado “t” por padrão do pacote\n\n      Uma imagem representativa da relação de gases ideia a determinada temperatura (isotérmica) pode ser representada na figura que segue:\n\n\n\nRepresentação de uma transformação isotérmica de um gás ideal (fonte: Wikipedia)\n\n\n      Agora define-se uma função para curva no pacote anim.plots, e aplica-se a equação acima:\n\nlibrary(anim.plots)\n\nR = 8.314 # J/mol/K\nn = 1\nV = seq(from=0.1, to=1, by=0.1)\nt = c(237, 273, 300, 325, 340) # temperatura, K\n\nanim.curve(n*R*t/x, times=1:5, n=5, type=\"o\", \n           col=\"darkblue\", cex=2, pch=17,\n           xlab=\"V\", ylab=\"p\")  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      Finalmente, pode-se salvar a sequência num gif animado pra apresentar a imagem dinâmica para outras pessoas:\n\nanim.gas.ideal &lt;- anim.curve(n*R*t/x, \n                             times=1:5, n=5, type=\"o\",\n                             col=\"darkblue\", cex=2, pch=17,\n                             xlab=\"V\", ylab=\"p\") \nanim.save(anim.gas.ideal, \"anim.gas.ideal.gif\")\n\n\nVariando alguns comandos do anim.plots\n      É possível incrementar bastante a visualização com o pacote anim.plots. Exemplificando:\n\nVariando a velocidade entre os quadros (frames)\n\nanim.gas.ideal &lt;- anim.curve(n*R*t/x, \n                             times=1:5, n=5, type=\"o\",\n                             col=\"darkblue\", cex=2, pch=17,\n                             xlab=\"V\", ylab=\"p\",\n                             speed = 5)\nanim.save(anim.gas.ideal, \"anim.gas.ideal.speed.gif\")\n\n\n\n\nComandos utilizados no tutorial\n\nanim.plot\nanim.curve\nanim.save\n\n\n\nReferência pra consulta:\nPacote anim.plots, e em especial o vignette que apresenta os modelos animados."
  },
  {
    "objectID": "contato.html",
    "href": "contato.html",
    "title": "Contato",
    "section": "",
    "text": "Prof. Dr. José Maurício Schneedorf Ferreira da Silva\n\nemail: jose.dasilva@unifal-mg.edu.br\nFone: (35) - 3291-1928\nEndereço: Depto. de Bioquímica, Instituto de Ciências Biomédicas, Universidade Federal de Alfenas, UNIFAL-MG. Prédio E, sala 209. Alfenas, MG. CEP: ‘37.130-001’, Brasil"
  },
  {
    "objectID": "dinamica.html",
    "href": "dinamica.html",
    "title": "Moléculas Voadoras",
    "section": "",
    "text": "Moléculas Voadoras é apenas um título engraçadinho pra apresentar moléculas de forma tridimensional. Para isso utilizamos um programa de visualização 3D chamado Jmol. O programa é distribuido livremente (licença GLPL, GNU Lesser General Public License), e permite uma série de visualizações coloridas, como movimentos de translação e rotação das moléculas, ampliação visual, cálculos de distância, ângulos, estruturas e superfícies, otimizações moleculares, animações, dentre outros."
  },
  {
    "objectID": "dinamica.html#introdução",
    "href": "dinamica.html#introdução",
    "title": "Moléculas Voadoras",
    "section": "",
    "text": "Moléculas Voadoras é apenas um título engraçadinho pra apresentar moléculas de forma tridimensional. Para isso utilizamos um programa de visualização 3D chamado Jmol. O programa é distribuido livremente (licença GLPL, GNU Lesser General Public License), e permite uma série de visualizações coloridas, como movimentos de translação e rotação das moléculas, ampliação visual, cálculos de distância, ângulos, estruturas e superfícies, otimizações moleculares, animações, dentre outros."
  },
  {
    "objectID": "dinamica.html#visualização-na-web",
    "href": "dinamica.html#visualização-na-web",
    "title": "Moléculas Voadoras",
    "section": "Visualização na web",
    "text": "Visualização na web\n      Você pode baixar o programa no website acima, ou utilizá-lo diretamente num navegador de internete, como abaixo. Experimente rotacionar a molécula de água com o mouse….\n\n\n\n\n\n\n\n\n\n      Agora um passo adiante, pra você observar suas próprias moléculas em qualquer navegador. Abra uma janela em seu navegador (Edge, Firefox, Chrome, etc) e digite o seguinte caminho: vá ao link abaixo:\n\nhttps://chemapps.stolaf.edu/jmol/jmol.php?model=water&script=Console\n\n      Ou…se quiser ir direto, basta clicar na logo abaixo, e que representa o applet JSmol que é utilizado para a visualização tridimensional (também chamada de renderização, um provável anglicismo !).\n(https://chemapps.stolaf.edu/jmol/jmol.php?model=water&script=Console)\n      Arraste a janela amarela pra direita, pra você visualizar a molécula, nesse caso, uma molécula de água\n      Agora você pode “brincar” à vontade com a molécula. Primeiro, mexendo em seu mouse pra fazê-la girar. Pode usar também o botão de rolagem do meio do mouse, pra ampliar ou reduzir seu tamanho na tela.\n      E pode fazer um montão de outras coisas legais. Pra isso, há duas opções. A primeira envolve o “montão” de coisas por uso de clique de mouse, bastando você clicar com o botão esquerdo desse em qualquer lugar do campo da molécula, como aparece na figura abaixo.\n\n\n\n\n\n\nFigure 1: Tela de menus do Jmol\n\n\n\n      Mas dentro de uma lógica do Ensino Reprodutível, contudo, é bem mais chique se utilizar linhas de comando digitados como num bloco de notas. Nesse caso, o bloco de anotações é o da janelinha amarela, na parte de baixo. Para utilizá-lo experimente digitar e teclar Enter após o seguinte comando:\n\nspin 50\n\n      Show, não ?! Para fazer a molécula parar de girar, digite:\n\nspin off\n\n      Se quiser testar outros comandos rápidos com a molécula, experimente os comandos abaixo. Você pode executar um a um, ou mais de um por vez, separando-os por um “;”.\n\ncpk # representação de bola e vareta\nwireframe only # representação de arame\nbackground yellow # plano fundo\ndots on # nuvens de van der Waals\ncolor magenta # coloração\ncolor cpk # coloração padrão de modelos atômicos\n\n      Existe uma infinidade de comandos que se pode experimentar com uma molécula, e para isso eu sugiro tutorial dirigido também nos moldes de um Ensino Reprodutível no site bioQuanti, especificamente no capítulo sobre comandos do Jmol."
  },
  {
    "objectID": "dinamica.html#carregando-uma-molécula-armazenada-no-computador",
    "href": "dinamica.html#carregando-uma-molécula-armazenada-no-computador",
    "title": "Moléculas Voadoras",
    "section": "Carregando uma molécula armazenada no computador",
    "text": "Carregando uma molécula armazenada no computador\n      Sem entrar em muitos detalhes, você tem algumas formas para carregar uma molécula de seu interesse no Jmol online visto acima. A mais “chique” é por clique e arraste de mouse do arquivo salvo no computador. Para isso, baixe o arquivo abaixo (…quase um pleonasmo) numa pasta qualquer em seu computador.\n      ——-&gt; arquivo pra baixar: aspirina\n      Pra certificar-se que o arquivo trata de uma imagem de molécula, localize-o e abra-o no seu explorador de arquivos, como você faria com qualquer imagem.\n      Agora…a mágica !!! Volte ao explorador de arquivos. Agora clique no arquivo baixado e arraste-o para o site do Jmol online em que está a molécula de água.\n      E Voilá !!!!! A molécula de aspirina é carregada “viva” nas nuvens !!!! E pode ser trabalhada de diversas maneiras, como acima.\n      Existe uma infinidade de moléculas que podem ser baixadas da internete pra se observar e estudar, tais como fármacos, biomoléculas, cristais, e mesmo organismos simples, como vírus inteiros. Seguem alguns exemplos se você quiser experimentar:\n\nCafeína, um poderoso estimulante;\nInsulina, a proteína cuja falta está relacionada ao diabetes;\nCelulose, a principal fonte de carbono do planeta;\nUm fago (vírus), dispensa palavras (mas tenha paciência, é grandão e carrega lentamente).\n\n      Para mais moléculas, sites e truques do Jmol, consulte o link correlato, sobre o uso do programa e diversos exemplos no site bioQuanti."
  },
  {
    "objectID": "dinamica.html#exemplos-de-sites-recheados-de-moléculas-renderizáveis-em-3d",
    "href": "dinamica.html#exemplos-de-sites-recheados-de-moléculas-renderizáveis-em-3d",
    "title": "Moléculas Voadoras",
    "section": "Exemplos de sites “recheados” de moléculas renderizáveis em 3D",
    "text": "Exemplos de sites “recheados” de moléculas renderizáveis em 3D\n\n3dChem - moléculas orgânicas e de interesse clínico, e biomoléculas.\nChemTube3D - banco de moléculas orgânicas e animações interativas.\nProteopedia - site nos moldes do Wikipedia, embora para proteínas. 1.PubChem - site da Biblioteca Nacional de Medicina dos E.U.A., com um vasto campo de busca pra pequenas moléculas.\nVirtual Museum of Minerals and Molecules - como traduzido, um banco de dados de minerais e moléculas."
  },
  {
    "objectID": "dinamica.html#ensino-reprodutível-e-um-script-meio-exagerado-para-observar-moléculas-pelo-jmol",
    "href": "dinamica.html#ensino-reprodutível-e-um-script-meio-exagerado-para-observar-moléculas-pelo-jmol",
    "title": "Moléculas Voadoras",
    "section": "Ensino Reprodutível e um script (meio exagerado) para observar moléculas pelo Jmol",
    "text": "Ensino Reprodutível e um script (meio exagerado) para observar moléculas pelo Jmol\n      A essência do Ensino Reproduzível é permitir que qualquer pessoa execute, altere, ou crie um trecho de código redigido em um bloco de anotações comentado (um script) para determinado alvo no ensino, compilando-o num programa gratuito.\n      Dessa forma, é possível imaginar que uma combinação de comandos (códigos) do Jmol igualmente produza uma imagem de molécula em 3D em que se deseja, por exemplo, focar em deteminado tema de sua estrutura. Para ilustrar esse potencial execute o trecho de código a seguir diretamente na janela do Console do Jmol (aquela de aba amarelinha).\n      Não se preocupe com a quantidade de comandos; estão aí apenas para ilustrar seu potencial de aplicação. Mas, caso deseje conhecer um pouco mais sobre os comandos do Jmol, faça uma visitinha à página de Comandos do site Bioquanti.\n\nbackground black # cor preta do plano de fundo\nload $cholesterol # carrega a molécula de colesterol\ndelay 1 # aguarda 1 segundo\nbackground white # altera a cor do plano de fundo\nspin 80 # gira a molécula\ndelay 3 # ...por 3 segundos\nspin off # interrompe a rotação\ncpk # renderiza como modelo de preenchimento\ncolor cpk # coloriza no padrão de modelos moleculares\nisosurface molecular # renderiza a superfície\nspin 30 # gira mais um poquinho\ndelay 6 # ...também por 3 segundos\nspin off # interrompe novamente a rotação\nzoomTo 0.5 *3  # amplia 300% na tela durante 1 segundo\nisosurface off # retira a superfície molecular\nwireframe only # retorna à representação de varetas\nwireframe 50 # espessura das varetas\nzoomTo 5 *0.01 # ... e vai sumindo aos poucos\n\n      Se gostou, tente repetir o trecho acima, alterando num primeiro momento alguns dos valores do trecho. Num segundo momento, carregue outra molécula que esteja nas nuvens substituindo a 1a. linha do código (load $outra.molécula)."
  },
  {
    "objectID": "ggplot2.html",
    "href": "ggplot2.html",
    "title": "Gráficos mais elaborados - pacote ggplot2",
    "section": "",
    "text": "O R possui diversos pacotes pra criação de gráficos, dentre os quais destaca-se o ggplot2. Esse pacote permite a elaboração de um grande número de tipos (pontos, linhas, barras, histograma, etc) e com qualidade de publicação.\n      Basicamente o ambiente funciona tal e qual um editor de imagens, como o Corel Draw ou o Canva, e que permitem a criação dessas por camadas. A única diferença é que em tais editores as camadas são depositadas ao bel prazer de seu criador. Já no ggplot2 as camadas tem propriedades fixas. Mas o bacana é que, tanto para a edição de imagens naqueles programas, como para a edição de gráficos no ggplot2, a alteração feita numa camada específica só altera essa, preservando as demais que “já deram certo”.\n\n\n      A produção de um gráfico pelo pacote ggplot2 envolve em síntese a elaboração de camadas sobrepostas. Essa ideia deriva-se dos conceitos de gramática de gráficos concebida por Wilkinson, e concretizada no ggplot2 por Wickham. Podem ser montadas até 7 camadas sobrepostas em kWhintos arranjos, embora apenas 3 sejam indispensáveis (dados, estética, e geoma):\n\n\n\n\n\n\n\n\n\ncamadas\nideia\n\n\n\n\nDados\nautoexplicativo\n\n\nEstética\nvariáveis visuais - mapeamento de eixos, cor, preenchimento\n\n\nGeomas\ntipos de gráficos: pontos, lin has, barras, boxes, etiquetas de eixos (geom)\n\n\nEstatística\ntransformação de dados para plotagem\n\n\nPaineis\nvisualização de subconjunto de dados em paineis (facet)\n\n\nCoordenadas\nfocalização do canvas (scales) e transformação de eixos (coord)\n\n\n\n\n\n      À despeito dessa “aparente complicação”, tudo se resume em apresentar os dados (data) e realizar seu mapeamento (mapping). O mapeamento obriga apenas a alocação das variáveis independente (x) e dependente (y) do gráfico. Mas para se visualizar os dados no gráfico, é necessário acrescentar ao menos um elemento geométrico (geom) - ponto ou linha, por exemplo.\n  De modo mais completo, o mapeamento é efetuado por 5 componentes da tabela acima: layer (elementos geométricos - geom, e transformações e resumos estatísticos - stat),scales,coord,facet,theme.\n     No ggplot2 camadas podem ser depositadas como numa sequência lógica pra criação de um gráfico:\n\nEstabelece-se os dados que serão utilizados (data=);\nDefine-se quem é o x e quem é o y (x=, y=);\nSeleciona-se um tipo de gráfico (geom=);\nEmbeleza-se o gráfico criado (eixos, cores, símbolos, tamanhos).\n\n      Havendo empolgação, pode-se continuar com o ggplot2 aprimorando o gráfico criado. Para isso:\n\nObserva-se alguma relação entre as variáveis.\nAvalia-se um modelo para essa relação (reta, curva).\nInsere-se no gráfico o modelo que se ajustou (equação e parâmetros).\n\n      Para uso de dados multivariados, a condição para uso do ggplot2 é que os mesmos estejam kWhribuidos em formato Long, ou seja, os níveis ou subconjuntos de uma variável precisam ser alocados num único vetor. Isso é simples quando se tem poucas linhas, mas complexo, quando tratar-se de vários níveis ou elementos em cada nível. No entanto, para se converter dados em Wide (várias colunas pra cada nível, x, y, z, etc) em Long (uma coluna única contendo os níveis x, y, z, etc), utiliza-se algumas funções, tais como do pacote reshape ou tydir (função gather pra converter a longer ou spread pra converter a wider).\n      Segue uma descrição sequencial para a elaboração de um gráfico de dados univariados pelo ggplot2, seguindo-se as camadas descritas acima. Posteriormente será apresentado a confecção gráfica para dados multivariados.\n\n\n\n      Vamos elaborar um gráfico com os dados que relacionam o consumo de energia elétrica com o custo, tal como representado no MAPA para o ensino médio (Matemática, 1o. Bimestre, 1o. Ano, p. 23, 2024), e reproduzido abaixo:\n\n\n\nRelação de consumo anotado por concessionária de energia elétrica e custo, tal como extraído do MAPA.\n\n\n      Para o ggplot2, diferente do pacote basics, é necessário dispor os dados numa planilha. Há um bom número de formas de se conduzir isso no R, mas uma forma simples é dada abaixo:\n\nconsumo &lt;- read.table(header = T, text = '   \n      kWh custo\n      0 10\n      30 16\n      30 16\n      100 43\n      100 43\n      220 120\n') # comando que cria tabela de dados\n\n      Alternativamente, pode-se criar os vetores x e y primeiro, como realizado anteriormente, e criar a planilha em seguida:\n\nkWh &lt;- c(0,30,30,100,100,220)\ncusto &lt;- c(10,16,16,43,43,120)   # define os dados\n\nconsumo &lt;- data.frame(kWh,custo) # comando que cria a tabela de dados a partir dos vetores x e y\n\n\n\n\n      Agora é fazer o gráfico carregando a biblioteca. Nota óbvia: é preciso instalar antes a biblioteca.\n\n# install.packages(\"ggplot\", dependencies = TRUE) \nlibrary(ggplot2)\n\n\nggplot(data=consumo)\n\n\n\n\n\n\n\n\n      Veja que surgiu um quadro (canvas), embora apenas o quadro, mesmo, sem nenhum x ou y. O que também é óbvio, pois não definimos essas variáveis ainda. Para isso:\n\nggplot(data=consumo, aes(x=kWh, y=custo))\n\n\n\n\n\n\n\n\n      Agora o gráfico apresenta-se com os eixos, embora sem os dados da tabela. No conjunto de obviedades que se assoma, é claro, também não definimos que tipo de gráfico queremos. Ou seja, se ponto, linha, barra, ou algum pra lá de dúzia que compõe o pacote ggplot2.\n      Uma observação importantíssima: veja que as variáveis estão dentro de um parêntes iniciado pela função aes. Do inglês, uma abreviação de aesthetics, ou estética, em tradução livre. Todo gráfico do ggplot2 tem que conter essa função, que além de definir as variáveis envolvidas, também permite generalizar para as camadas outras características estéticas, como cor, tamanho, e forma.\n\n\n\n      De volta ao ofício, o tipo de gráfico no pacote ggplot2 é definido pelo tipo de geom, ou geoma, em tradução livre e um pouco óbvia, também. O ggplot2 tem geoms pra tudo que é gráfico. E para inseri-lo na linha de comando de produção desse, basta acrescentar seu tipo como uma camada adicional, usando o sinal ” + “, mesmo, como segue.\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_point()\n\n\n\n\n\n\n\n\n     “Parfait” ! Agora, sim, quadro, dados, eixos gráficos, e pontos. Uma qualidade muito legal do ggplot2 e, na verdade, de qualquer programa que use linhas de comando para gerar resultados, como o próprio R, é que pra gente produzir um gráfico diferente não precisa criá-lo do zero; basta alterar o ponto específico que se deseja na linha de comando. Na prática, se ao invés de produzirmos um gráfico de pontos quisermos outros tipos, é só mudar o geom:\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_line()\n\n\n\n\n\n\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_col()\n\n\n\n\n\n\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at -1.1\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 101.1\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 4.6461e-17\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 36519\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at\n-1.1\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : neighborhood radius\n101.1\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : reciprocal condition\nnumber 4.6461e-17\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : There are other near\nsingularities as well. 36519\n\n\n\n\n\n\n\n\n\n      Como mencionado, o ggplot2 trabalha sobrepondo camadas. Que tal então um gráfico como o de cima, mas com a linha de tendência sobreposta aos pontos ?\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_smooth()+\n  geom_point()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at -1.1\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 101.1\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 4.6461e-17\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 36519\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at\n-1.1\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : neighborhood radius\n101.1\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : reciprocal condition\nnumber 4.6461e-17\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : There are other near\nsingularities as well. 36519\n\n\n\n\n\n\n\n\n\n\n\n\n      Bom, seguindo-se os ítens de construção de um gráfico lá de cima, agora é hora de “botar” elegância no produto ! Pra isso pode-se escolher algumas “estéticas” de cor (color), tamanho (size), translucidez (alpha), forma (shape), preenchimento do símbolo (fill) e sua espessura do tracejado do símbolo (stroke), e inseri-las como argumentos do geoma.\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_point(color= \"blue\", \n             size=5,  # tamanho do símbolo\n             alpha = 0.5, # transparência (0 a 1)\n             shape = 21, # tipo do símbolo\n             fill = \"green\", # preenchimento (só vale pra tipos vazios, obviamente)\n             stroke = 2) # espessura do tracejado do símbolo\n\n\n\n\n\n\n\n\n      Bonito, não ? Ou doido, mesmo !\n\n\n\n\n\n\n      Agora que melhoramos (…ou pioramos) o aspecto visual do gráfico, que tal dar um jeito nas etiquetas dos eixos (labels) ? Veja que estão com as abreviações das colunas x e y dos dados. Quem sabe algo com mais empáfia, então ?\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\")\n\n\n\n\n\n\n\n\n\n\n\n      Observe que tanto faz colocar as características dos pontos com identação, uma abaixo da outra, ou em linha, mesmo. A única diferença é que colocando uma abaixo da outra visualiza-se melhor o que se pretende fazer. Isso faz parte das “boas práticas de programação”.\n      Essa função labs permite também se colocar título, subtítulo, e uma observação (caption) no gráfico, veja:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo, R$\",\n       title = \"Relação entre o consumo energértico e os custos envolvidos\",\n       subtitle = \"Companhia Elétrica XYZ\",\n       caption = \"Obs: Linha de tendência\")\n\n\n\n\n\n\n\n\n\n\n\n      O ggplot2 apresenta como padrão esse canvas acizentado. Mas existem vários outros, bastando-se definir um tema (theme) ao gráfico:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n\n\n\n      Nessa versão dá pra notar que o tamanho dos valores nos eixos, bem como o tamanho de suas etiquetas, deixam um pouco a desejar à estética do gráfico. Aumentando esses valores um pouquinho dentro da função theme (o padrão ou default é fonte 11)…\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14)\n\n\n\n\n\n\n\n  # theme(axis.text = element_text(size = 14),\n  #       axis.text.x = element_text(size = 14))\n\n      Se desejar omitir alguma informação do gráfico, basta omiti-la da linha de comando. Por exemplo, se desejarmos retirar título, subtítulo e nota de observação:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWhância percorrida (km)\",\n       y = \"custoidade do foguete (km/min)\") +\n  theme_bw(base_size = 14)\n\n\n\n\n\n\n\n\n\n\n\n      Dá pra melhorar mais um pouco a visualização ?! Sempre dá, claro. Por exemplo, observe que nosso gráfico não inicia na origem, ou seja, quando x e y tem valor zero. Se quisermos alterar então esses eixos pra iniciarem no zero…bom…lá vai mais uma camada !!\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14)+\n  coord_cartesian(xlim = c(0,6.5), ylim=c(0,15))\n\n\n\n\n\n\n\n\n      Apesar de mais “pomposo” tanto o nome como as possibilidades dessa camada coord_cartesian, também é possível obter o mesmo efeito apenas com os argumentos xlim e ylim, e de modo um pouquinho diferente. Pra não repetir o gráfico acima, segue um exemplo com limites kWh nos eixos:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  xlim(-1,8) +\n  ylim(-1,28)\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      Agora que nosso gráfico tá (…ou deveria estar) mais incrementado, que tal colocar uma linha de ajuste dos pontos ? Modelos pra isso não faltam, mas optemos inicialmente pelo mais simples: um ajuste ou regressão linear. Resumidamente, trata-se de observar se a resposta y segue uma tendência linear com os valores de x. E como o ggplot2 trabalha com camadas, adicionemos essa camada, então:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  geom_smooth(method = 'lm', linewidth = 0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n      Agora ficou chique !! E também indecifrável…ou quase. Indo por partes: o método escolhido foi lm, ou modelo linear (linear model). O termo poderia ser também substituido por 'y ~x', uma notação do R que indica a dependência de y em relação a x. O argumento linewidth sinaliza pra espessura do tracejado. E a banda acizentada indica o intervalo de confiança do ajuste (erro padrão). Pra retirar essa última, bem como a legenda doida, basta fazer:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  geom_smooth(method = 'lm', linewidth = 0.5, se = FALSE, show.legend = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n      Existem diversos parâmetros que são obtidos pela função lm. Dada a natureza de programação orientada a objeto do R, esses parâmetros podem ser acessados individualmente em seus objetos. Exemplificando:\n\nattributes(lm)\n\nNULL\n\n\n\n\n\n      Apesar de bem incrementado esse gráfico final, observe que a tendência dos pontos não é propriamente linear. Tá parecendo mais uma curva. E dentre as curvas possíveis, quem sabe uma parábola. Pra isso, basta que acrescentemos qual a formula a ser empregada:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), linewidth = 0.5, color = \"orange\", se = FALSE, show.legend = FALSE)\n\n\n\n\n\n\n\n\n      Apesar de um pouco confuso, a expressão formula = y ~ poly(x, 2) indica tratar-se de um ajuste para um polinômio de 2a. ordem em x. E, claro, uma “corzinha” adicional no tracejado não faz mal a ninguém !\n\n\n\n\n      Agora, pra se guardar esse gráfico, um tanto trabalhoso, convenhamos, o R permite o salvamento em diversos formatos, como JPG, BMP, TIFF, PDF, PNG, EPS, por exemplo. Dois jeitos de salvar o gráfico: um se dá pelo menu de Plots do canto inferior esquerdo do RStudio (Plots –&gt; Export). Se quisermos o armazenamento por linha de comando, por outro lado, basta utilizar a função ggsave logo após a criação do gráfico.\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), linewidth = 0.5, color = \"orange\", se = FALSE, show.legend = FALSE)\n\n\n\n\n\n\n\n# Salvando o gráfico...\n\nggsave(filename =  \"plot.consumo.png\", dpi = 300, width = 4, height = 5)\n\n       Se você não especificou onde salvar o gráfico, veja no diretório raiz do computador. Explicando brevemente a função, dpi representa a resolução do gráfico, enquanto que width e height especificam o tamanho.\n      Mas também dá pra salvar o gráfico sem qualquer especificação. Exemplificando pra um arquivo PDF:\n\nggsave(filename =  \"plot.consumo.pdf\")\n\nSaving 7 x 5 in image\n\n\n\n\n\n      Bom, ainda que o gráfico acima tenha um certo ar de sofisticação, não é sempre que se deseja isso. Na maior parte das vezes, o que se quer é plotar os dados e observar alguma tendência. E, pra isso, não é necessário todas essas camadas, funções e argumentos. Para se plotar algo “parecido” com o gráfico acima, mas sem toda essa pompa, basta fazermos:\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n      O pacote ggplot2 é normalmente empregado para a criação de de gráficos a partir de um dataset. Não obstante, é possível produzir também um gráfico apenas com vetores, tal como segue:\n\nx &lt;- 1:360\ny = sin(x)\nlibrary(ggplot2)\nggplot( data = NULL ,\n        mapping = aes( x = x , y = y ) ) +\n  geom_line() +\n  geom_point(shape = 15, col = \"red\", size = 0.5)+\n  labs(x=\"eixo x\", y=\"eixo y\") +\n  coord_cartesian(xlim=c(45,90)) \n\n\n\n\n\n\n\n\n\n\n\n      Como o sistema base, o ggplot2 possui também uma função para a produção de tendências por equações introduzidas, geom_function. Exemplificando:\n\nrequire(ggplot2)\nggplot(data.frame(x = 1:100), aes(x)) +\n  geom_function(fun=function(x) 173*x/(6+x), colour = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n      Como explicado acima, o ggplot2 trabalha exclusivamente com dados em formato Long, ou seja, uma variável para cada quantidade. Dessa forma, os subconjuntos de uma variável (ou nível) devem situar-se nessa única variável. Ilustrando:\n\ntempo &lt;- c(rep(rep(1:4, 4),4))\nresposta &lt;- c(1,2,3,4,2,4,6,8,10,14,18,22,24,30,36,42)\nniveis &lt;- c(rep(\"A\",4),rep(\"B\", 4), rep(\"C\", 4), rep(\"D\", 4)) # criação de dataframe com níveis\n\ndf &lt;-data.frame(tempo, resposta, niveis); df\n\n   tempo resposta niveis\n1      1        1      A\n2      2        2      A\n3      3        3      A\n4      4        4      A\n5      1        2      B\n6      2        4      B\n7      3        6      B\n8      4        8      B\n9      1       10      C\n10     2       14      C\n11     3       18      C\n12     4       22      C\n13     1       24      D\n14     2       30      D\n15     3       36      D\n16     4       42      D\n17     1        1      A\n18     2        2      A\n19     3        3      A\n20     4        4      A\n21     1        2      B\n22     2        4      B\n23     3        6      B\n24     4        8      B\n25     1       10      C\n26     2       14      C\n27     3       18      C\n28     4       22      C\n29     1       24      D\n30     2       30      D\n31     3       36      D\n32     4       42      D\n33     1        1      A\n34     2        2      A\n35     3        3      A\n36     4        4      A\n37     1        2      B\n38     2        4      B\n39     3        6      B\n40     4        8      B\n41     1       10      C\n42     2       14      C\n43     3       18      C\n44     4       22      C\n45     1       24      D\n46     2       30      D\n47     3       36      D\n48     4       42      D\n49     1        1      A\n50     2        2      A\n51     3        3      A\n52     4        4      A\n53     1        2      B\n54     2        4      B\n55     3        6      B\n56     4        8      B\n57     1       10      C\n58     2       14      C\n59     3       18      C\n60     4       22      C\n61     1       24      D\n62     2       30      D\n63     3       36      D\n64     4       42      D\n\nlibrary(ggplot2)\n\nggplot(data=df, aes(x=tempo, y=resposta)) +\n  geom_point(aes(shape=niveis, color=niveis)) +\n  geom_line(aes(linetype=niveis))\n\n\n\n\n\n\n\n\n      Note que cada elemento estético pode ser configurado para cada geom. Alternativamente, pode-se conferir os elementos estéticos combinando-os para o gráfico geral, bem como para cada camada:\n\ntempo &lt;- c(rep(rep(1:4, 4),4))\nresposta &lt;- c(1,2,3,4,2,4,6,8,10,14,18,22,24,30,36,42)\nniveis &lt;- c(rep(\"A\",4),rep(\"B\", 4), rep(\"C\", 4), rep(\"D\", 4)) # criação de dataframe com níveis\n\ndf &lt;-data.frame(tempo, resposta, niveis)\n\nlibrary(ggplot2)\nggplot(data=df, aes(x=tempo, y=resposta, shape=niveis, color=niveis)) +\n  geom_point(aes(size=5)) +\n  geom_line(aes(linetype=niveis))\n\n\n\n\n\n\n\n\n      Para um conjunto com visual sobreposição de pontos, pode-se também empregar a função jitter, como no graphics:\n\nggplot(data=df, aes(x=tempo, y=resposta)) +\n         geom_point() +\n         geom_jitter()\n\n\n\n\n\n\n\n\n\n\n\n      Como um recurso estético e analítico significativo, o faceting permite ao ggplot2 a visualização multivariada em paineis. Seguem exemplos para o dataset acima.\n\ntempo &lt;- c(rep(rep(1:4, 4),4))\nresposta &lt;- c(1,2,3,4,2,4,6,8,10,14,18,22,24,30,36,42)\nniveis &lt;- c(rep(\"A\",4),rep(\"B\", 4), rep(\"C\", 4), rep(\"D\", 4)) # criação de dataframe com níveis\n\ndf &lt;-data.frame(tempo, resposta, niveis)\nggplot(data=df, aes(x=tempo, y=resposta, shape=niveis, color=niveis)) +\n  geom_point(aes(size=5)) +\n  geom_line(aes(linetype=niveis))+\n  facet_grid(cols=vars(niveis)) # paineis verticais (útil para visualização da ordenada) \n\n\n\n\n\n\n\nggplot(data=df, aes(x=tempo, y=resposta, shape=niveis, color=niveis)) +\n  geom_point(aes(size=5)) +\n  geom_line(aes(linetype=niveis))+\n  facet_grid(rows=vars(niveis)) # paineis horizontais (útil para visualização na abscissa)\n\n\n\n\n\n\n\nggplot(data=df, aes(x=tempo, y=resposta, shape=niveis, color=niveis)) +\n  geom_point(aes(size=5)) +\n  geom_line(aes(linetype=niveis))+\n  facet_wrap(vars(niveis)) # paineis divididos (útil na visualização equilibrada de abscissa e ordenada)"
  },
  {
    "objectID": "ggplot2.html#o-sistema-ggplot2",
    "href": "ggplot2.html#o-sistema-ggplot2",
    "title": "Gráficos mais elaborados - pacote ggplot2",
    "section": "",
    "text": "O R possui diversos pacotes pra criação de gráficos, dentre os quais destaca-se o ggplot2. Esse pacote permite a elaboração de um grande número de tipos (pontos, linhas, barras, histograma, etc) e com qualidade de publicação.\n      Basicamente o ambiente funciona tal e qual um editor de imagens, como o Corel Draw ou o Canva, e que permitem a criação dessas por camadas. A única diferença é que em tais editores as camadas são depositadas ao bel prazer de seu criador. Já no ggplot2 as camadas tem propriedades fixas. Mas o bacana é que, tanto para a edição de imagens naqueles programas, como para a edição de gráficos no ggplot2, a alteração feita numa camada específica só altera essa, preservando as demais que “já deram certo”.\n\n\n      A produção de um gráfico pelo pacote ggplot2 envolve em síntese a elaboração de camadas sobrepostas. Essa ideia deriva-se dos conceitos de gramática de gráficos concebida por Wilkinson, e concretizada no ggplot2 por Wickham. Podem ser montadas até 7 camadas sobrepostas em kWhintos arranjos, embora apenas 3 sejam indispensáveis (dados, estética, e geoma):\n\n\n\n\n\n\n\n\n\ncamadas\nideia\n\n\n\n\nDados\nautoexplicativo\n\n\nEstética\nvariáveis visuais - mapeamento de eixos, cor, preenchimento\n\n\nGeomas\ntipos de gráficos: pontos, lin has, barras, boxes, etiquetas de eixos (geom)\n\n\nEstatística\ntransformação de dados para plotagem\n\n\nPaineis\nvisualização de subconjunto de dados em paineis (facet)\n\n\nCoordenadas\nfocalização do canvas (scales) e transformação de eixos (coord)\n\n\n\n\n\n      À despeito dessa “aparente complicação”, tudo se resume em apresentar os dados (data) e realizar seu mapeamento (mapping). O mapeamento obriga apenas a alocação das variáveis independente (x) e dependente (y) do gráfico. Mas para se visualizar os dados no gráfico, é necessário acrescentar ao menos um elemento geométrico (geom) - ponto ou linha, por exemplo.\n  De modo mais completo, o mapeamento é efetuado por 5 componentes da tabela acima: layer (elementos geométricos - geom, e transformações e resumos estatísticos - stat),scales,coord,facet,theme.\n     No ggplot2 camadas podem ser depositadas como numa sequência lógica pra criação de um gráfico:\n\nEstabelece-se os dados que serão utilizados (data=);\nDefine-se quem é o x e quem é o y (x=, y=);\nSeleciona-se um tipo de gráfico (geom=);\nEmbeleza-se o gráfico criado (eixos, cores, símbolos, tamanhos).\n\n      Havendo empolgação, pode-se continuar com o ggplot2 aprimorando o gráfico criado. Para isso:\n\nObserva-se alguma relação entre as variáveis.\nAvalia-se um modelo para essa relação (reta, curva).\nInsere-se no gráfico o modelo que se ajustou (equação e parâmetros).\n\n      Para uso de dados multivariados, a condição para uso do ggplot2 é que os mesmos estejam kWhribuidos em formato Long, ou seja, os níveis ou subconjuntos de uma variável precisam ser alocados num único vetor. Isso é simples quando se tem poucas linhas, mas complexo, quando tratar-se de vários níveis ou elementos em cada nível. No entanto, para se converter dados em Wide (várias colunas pra cada nível, x, y, z, etc) em Long (uma coluna única contendo os níveis x, y, z, etc), utiliza-se algumas funções, tais como do pacote reshape ou tydir (função gather pra converter a longer ou spread pra converter a wider).\n      Segue uma descrição sequencial para a elaboração de um gráfico de dados univariados pelo ggplot2, seguindo-se as camadas descritas acima. Posteriormente será apresentado a confecção gráfica para dados multivariados.\n\n\n\n      Vamos elaborar um gráfico com os dados que relacionam o consumo de energia elétrica com o custo, tal como representado no MAPA para o ensino médio (Matemática, 1o. Bimestre, 1o. Ano, p. 23, 2024), e reproduzido abaixo:\n\n\n\nRelação de consumo anotado por concessionária de energia elétrica e custo, tal como extraído do MAPA.\n\n\n      Para o ggplot2, diferente do pacote basics, é necessário dispor os dados numa planilha. Há um bom número de formas de se conduzir isso no R, mas uma forma simples é dada abaixo:\n\nconsumo &lt;- read.table(header = T, text = '   \n      kWh custo\n      0 10\n      30 16\n      30 16\n      100 43\n      100 43\n      220 120\n') # comando que cria tabela de dados\n\n      Alternativamente, pode-se criar os vetores x e y primeiro, como realizado anteriormente, e criar a planilha em seguida:\n\nkWh &lt;- c(0,30,30,100,100,220)\ncusto &lt;- c(10,16,16,43,43,120)   # define os dados\n\nconsumo &lt;- data.frame(kWh,custo) # comando que cria a tabela de dados a partir dos vetores x e y\n\n\n\n\n      Agora é fazer o gráfico carregando a biblioteca. Nota óbvia: é preciso instalar antes a biblioteca.\n\n# install.packages(\"ggplot\", dependencies = TRUE) \nlibrary(ggplot2)\n\n\nggplot(data=consumo)\n\n\n\n\n\n\n\n\n      Veja que surgiu um quadro (canvas), embora apenas o quadro, mesmo, sem nenhum x ou y. O que também é óbvio, pois não definimos essas variáveis ainda. Para isso:\n\nggplot(data=consumo, aes(x=kWh, y=custo))\n\n\n\n\n\n\n\n\n      Agora o gráfico apresenta-se com os eixos, embora sem os dados da tabela. No conjunto de obviedades que se assoma, é claro, também não definimos que tipo de gráfico queremos. Ou seja, se ponto, linha, barra, ou algum pra lá de dúzia que compõe o pacote ggplot2.\n      Uma observação importantíssima: veja que as variáveis estão dentro de um parêntes iniciado pela função aes. Do inglês, uma abreviação de aesthetics, ou estética, em tradução livre. Todo gráfico do ggplot2 tem que conter essa função, que além de definir as variáveis envolvidas, também permite generalizar para as camadas outras características estéticas, como cor, tamanho, e forma.\n\n\n\n      De volta ao ofício, o tipo de gráfico no pacote ggplot2 é definido pelo tipo de geom, ou geoma, em tradução livre e um pouco óbvia, também. O ggplot2 tem geoms pra tudo que é gráfico. E para inseri-lo na linha de comando de produção desse, basta acrescentar seu tipo como uma camada adicional, usando o sinal ” + “, mesmo, como segue.\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_point()\n\n\n\n\n\n\n\n\n     “Parfait” ! Agora, sim, quadro, dados, eixos gráficos, e pontos. Uma qualidade muito legal do ggplot2 e, na verdade, de qualquer programa que use linhas de comando para gerar resultados, como o próprio R, é que pra gente produzir um gráfico diferente não precisa criá-lo do zero; basta alterar o ponto específico que se deseja na linha de comando. Na prática, se ao invés de produzirmos um gráfico de pontos quisermos outros tipos, é só mudar o geom:\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_line()\n\n\n\n\n\n\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_col()\n\n\n\n\n\n\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at -1.1\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 101.1\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 4.6461e-17\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 36519\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at\n-1.1\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : neighborhood radius\n101.1\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : reciprocal condition\nnumber 4.6461e-17\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : There are other near\nsingularities as well. 36519\n\n\n\n\n\n\n\n\n\n      Como mencionado, o ggplot2 trabalha sobrepondo camadas. Que tal então um gráfico como o de cima, mas com a linha de tendência sobreposta aos pontos ?\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_smooth()+\n  geom_point()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at -1.1\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 101.1\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 4.6461e-17\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 36519\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at\n-1.1\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : neighborhood radius\n101.1\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : reciprocal condition\nnumber 4.6461e-17\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : There are other near\nsingularities as well. 36519\n\n\n\n\n\n\n\n\n\n\n\n\n      Bom, seguindo-se os ítens de construção de um gráfico lá de cima, agora é hora de “botar” elegância no produto ! Pra isso pode-se escolher algumas “estéticas” de cor (color), tamanho (size), translucidez (alpha), forma (shape), preenchimento do símbolo (fill) e sua espessura do tracejado do símbolo (stroke), e inseri-las como argumentos do geoma.\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_point(color= \"blue\", \n             size=5,  # tamanho do símbolo\n             alpha = 0.5, # transparência (0 a 1)\n             shape = 21, # tipo do símbolo\n             fill = \"green\", # preenchimento (só vale pra tipos vazios, obviamente)\n             stroke = 2) # espessura do tracejado do símbolo\n\n\n\n\n\n\n\n\n      Bonito, não ? Ou doido, mesmo !\n\n\n\n\n\n\n      Agora que melhoramos (…ou pioramos) o aspecto visual do gráfico, que tal dar um jeito nas etiquetas dos eixos (labels) ? Veja que estão com as abreviações das colunas x e y dos dados. Quem sabe algo com mais empáfia, então ?\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\")\n\n\n\n\n\n\n\n\n\n\n\n      Observe que tanto faz colocar as características dos pontos com identação, uma abaixo da outra, ou em linha, mesmo. A única diferença é que colocando uma abaixo da outra visualiza-se melhor o que se pretende fazer. Isso faz parte das “boas práticas de programação”.\n      Essa função labs permite também se colocar título, subtítulo, e uma observação (caption) no gráfico, veja:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo, R$\",\n       title = \"Relação entre o consumo energértico e os custos envolvidos\",\n       subtitle = \"Companhia Elétrica XYZ\",\n       caption = \"Obs: Linha de tendência\")\n\n\n\n\n\n\n\n\n\n\n\n      O ggplot2 apresenta como padrão esse canvas acizentado. Mas existem vários outros, bastando-se definir um tema (theme) ao gráfico:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n\n\n\n      Nessa versão dá pra notar que o tamanho dos valores nos eixos, bem como o tamanho de suas etiquetas, deixam um pouco a desejar à estética do gráfico. Aumentando esses valores um pouquinho dentro da função theme (o padrão ou default é fonte 11)…\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14)\n\n\n\n\n\n\n\n  # theme(axis.text = element_text(size = 14),\n  #       axis.text.x = element_text(size = 14))\n\n      Se desejar omitir alguma informação do gráfico, basta omiti-la da linha de comando. Por exemplo, se desejarmos retirar título, subtítulo e nota de observação:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWhância percorrida (km)\",\n       y = \"custoidade do foguete (km/min)\") +\n  theme_bw(base_size = 14)\n\n\n\n\n\n\n\n\n\n\n\n      Dá pra melhorar mais um pouco a visualização ?! Sempre dá, claro. Por exemplo, observe que nosso gráfico não inicia na origem, ou seja, quando x e y tem valor zero. Se quisermos alterar então esses eixos pra iniciarem no zero…bom…lá vai mais uma camada !!\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14)+\n  coord_cartesian(xlim = c(0,6.5), ylim=c(0,15))\n\n\n\n\n\n\n\n\n      Apesar de mais “pomposo” tanto o nome como as possibilidades dessa camada coord_cartesian, também é possível obter o mesmo efeito apenas com os argumentos xlim e ylim, e de modo um pouquinho diferente. Pra não repetir o gráfico acima, segue um exemplo com limites kWh nos eixos:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  xlim(-1,8) +\n  ylim(-1,28)\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      Agora que nosso gráfico tá (…ou deveria estar) mais incrementado, que tal colocar uma linha de ajuste dos pontos ? Modelos pra isso não faltam, mas optemos inicialmente pelo mais simples: um ajuste ou regressão linear. Resumidamente, trata-se de observar se a resposta y segue uma tendência linear com os valores de x. E como o ggplot2 trabalha com camadas, adicionemos essa camada, então:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  geom_smooth(method = 'lm', linewidth = 0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n      Agora ficou chique !! E também indecifrável…ou quase. Indo por partes: o método escolhido foi lm, ou modelo linear (linear model). O termo poderia ser também substituido por 'y ~x', uma notação do R que indica a dependência de y em relação a x. O argumento linewidth sinaliza pra espessura do tracejado. E a banda acizentada indica o intervalo de confiança do ajuste (erro padrão). Pra retirar essa última, bem como a legenda doida, basta fazer:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  geom_smooth(method = 'lm', linewidth = 0.5, se = FALSE, show.legend = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n      Existem diversos parâmetros que são obtidos pela função lm. Dada a natureza de programação orientada a objeto do R, esses parâmetros podem ser acessados individualmente em seus objetos. Exemplificando:\n\nattributes(lm)\n\nNULL\n\n\n\n\n\n      Apesar de bem incrementado esse gráfico final, observe que a tendência dos pontos não é propriamente linear. Tá parecendo mais uma curva. E dentre as curvas possíveis, quem sabe uma parábola. Pra isso, basta que acrescentemos qual a formula a ser empregada:\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), linewidth = 0.5, color = \"orange\", se = FALSE, show.legend = FALSE)\n\n\n\n\n\n\n\n\n      Apesar de um pouco confuso, a expressão formula = y ~ poly(x, 2) indica tratar-se de um ajuste para um polinômio de 2a. ordem em x. E, claro, uma “corzinha” adicional no tracejado não faz mal a ninguém !\n\n\n\n\n      Agora, pra se guardar esse gráfico, um tanto trabalhoso, convenhamos, o R permite o salvamento em diversos formatos, como JPG, BMP, TIFF, PDF, PNG, EPS, por exemplo. Dois jeitos de salvar o gráfico: um se dá pelo menu de Plots do canto inferior esquerdo do RStudio (Plots –&gt; Export). Se quisermos o armazenamento por linha de comando, por outro lado, basta utilizar a função ggsave logo após a criação do gráfico.\n\nggplot(data=consumo, aes(x=kWh, y=custo, col = \"red\", size = 5, alpha = 0.5)) +\n  geom_point(color= \"blue\", size=5, alpha = 0.5, shape = 21, fill = \"green\", stroke = 2) +\n  labs(x = \"kWh\",\n       y = \"custo\") +\n  theme_bw(base_size = 14) +\n  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), linewidth = 0.5, color = \"orange\", se = FALSE, show.legend = FALSE)\n\n\n\n\n\n\n\n# Salvando o gráfico...\n\nggsave(filename =  \"plot.consumo.png\", dpi = 300, width = 4, height = 5)\n\n       Se você não especificou onde salvar o gráfico, veja no diretório raiz do computador. Explicando brevemente a função, dpi representa a resolução do gráfico, enquanto que width e height especificam o tamanho.\n      Mas também dá pra salvar o gráfico sem qualquer especificação. Exemplificando pra um arquivo PDF:\n\nggsave(filename =  \"plot.consumo.pdf\")\n\nSaving 7 x 5 in image\n\n\n\n\n\n      Bom, ainda que o gráfico acima tenha um certo ar de sofisticação, não é sempre que se deseja isso. Na maior parte das vezes, o que se quer é plotar os dados e observar alguma tendência. E, pra isso, não é necessário todas essas camadas, funções e argumentos. Para se plotar algo “parecido” com o gráfico acima, mas sem toda essa pompa, basta fazermos:\n\nggplot(data=consumo, aes(x=kWh, y=custo)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n      O pacote ggplot2 é normalmente empregado para a criação de de gráficos a partir de um dataset. Não obstante, é possível produzir também um gráfico apenas com vetores, tal como segue:\n\nx &lt;- 1:360\ny = sin(x)\nlibrary(ggplot2)\nggplot( data = NULL ,\n        mapping = aes( x = x , y = y ) ) +\n  geom_line() +\n  geom_point(shape = 15, col = \"red\", size = 0.5)+\n  labs(x=\"eixo x\", y=\"eixo y\") +\n  coord_cartesian(xlim=c(45,90)) \n\n\n\n\n\n\n\n\n\n\n\n      Como o sistema base, o ggplot2 possui também uma função para a produção de tendências por equações introduzidas, geom_function. Exemplificando:\n\nrequire(ggplot2)\nggplot(data.frame(x = 1:100), aes(x)) +\n  geom_function(fun=function(x) 173*x/(6+x), colour = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n      Como explicado acima, o ggplot2 trabalha exclusivamente com dados em formato Long, ou seja, uma variável para cada quantidade. Dessa forma, os subconjuntos de uma variável (ou nível) devem situar-se nessa única variável. Ilustrando:\n\ntempo &lt;- c(rep(rep(1:4, 4),4))\nresposta &lt;- c(1,2,3,4,2,4,6,8,10,14,18,22,24,30,36,42)\nniveis &lt;- c(rep(\"A\",4),rep(\"B\", 4), rep(\"C\", 4), rep(\"D\", 4)) # criação de dataframe com níveis\n\ndf &lt;-data.frame(tempo, resposta, niveis); df\n\n   tempo resposta niveis\n1      1        1      A\n2      2        2      A\n3      3        3      A\n4      4        4      A\n5      1        2      B\n6      2        4      B\n7      3        6      B\n8      4        8      B\n9      1       10      C\n10     2       14      C\n11     3       18      C\n12     4       22      C\n13     1       24      D\n14     2       30      D\n15     3       36      D\n16     4       42      D\n17     1        1      A\n18     2        2      A\n19     3        3      A\n20     4        4      A\n21     1        2      B\n22     2        4      B\n23     3        6      B\n24     4        8      B\n25     1       10      C\n26     2       14      C\n27     3       18      C\n28     4       22      C\n29     1       24      D\n30     2       30      D\n31     3       36      D\n32     4       42      D\n33     1        1      A\n34     2        2      A\n35     3        3      A\n36     4        4      A\n37     1        2      B\n38     2        4      B\n39     3        6      B\n40     4        8      B\n41     1       10      C\n42     2       14      C\n43     3       18      C\n44     4       22      C\n45     1       24      D\n46     2       30      D\n47     3       36      D\n48     4       42      D\n49     1        1      A\n50     2        2      A\n51     3        3      A\n52     4        4      A\n53     1        2      B\n54     2        4      B\n55     3        6      B\n56     4        8      B\n57     1       10      C\n58     2       14      C\n59     3       18      C\n60     4       22      C\n61     1       24      D\n62     2       30      D\n63     3       36      D\n64     4       42      D\n\nlibrary(ggplot2)\n\nggplot(data=df, aes(x=tempo, y=resposta)) +\n  geom_point(aes(shape=niveis, color=niveis)) +\n  geom_line(aes(linetype=niveis))\n\n\n\n\n\n\n\n\n      Note que cada elemento estético pode ser configurado para cada geom. Alternativamente, pode-se conferir os elementos estéticos combinando-os para o gráfico geral, bem como para cada camada:\n\ntempo &lt;- c(rep(rep(1:4, 4),4))\nresposta &lt;- c(1,2,3,4,2,4,6,8,10,14,18,22,24,30,36,42)\nniveis &lt;- c(rep(\"A\",4),rep(\"B\", 4), rep(\"C\", 4), rep(\"D\", 4)) # criação de dataframe com níveis\n\ndf &lt;-data.frame(tempo, resposta, niveis)\n\nlibrary(ggplot2)\nggplot(data=df, aes(x=tempo, y=resposta, shape=niveis, color=niveis)) +\n  geom_point(aes(size=5)) +\n  geom_line(aes(linetype=niveis))\n\n\n\n\n\n\n\n\n      Para um conjunto com visual sobreposição de pontos, pode-se também empregar a função jitter, como no graphics:\n\nggplot(data=df, aes(x=tempo, y=resposta)) +\n         geom_point() +\n         geom_jitter()\n\n\n\n\n\n\n\n\n\n\n\n      Como um recurso estético e analítico significativo, o faceting permite ao ggplot2 a visualização multivariada em paineis. Seguem exemplos para o dataset acima.\n\ntempo &lt;- c(rep(rep(1:4, 4),4))\nresposta &lt;- c(1,2,3,4,2,4,6,8,10,14,18,22,24,30,36,42)\nniveis &lt;- c(rep(\"A\",4),rep(\"B\", 4), rep(\"C\", 4), rep(\"D\", 4)) # criação de dataframe com níveis\n\ndf &lt;-data.frame(tempo, resposta, niveis)\nggplot(data=df, aes(x=tempo, y=resposta, shape=niveis, color=niveis)) +\n  geom_point(aes(size=5)) +\n  geom_line(aes(linetype=niveis))+\n  facet_grid(cols=vars(niveis)) # paineis verticais (útil para visualização da ordenada) \n\n\n\n\n\n\n\nggplot(data=df, aes(x=tempo, y=resposta, shape=niveis, color=niveis)) +\n  geom_point(aes(size=5)) +\n  geom_line(aes(linetype=niveis))+\n  facet_grid(rows=vars(niveis)) # paineis horizontais (útil para visualização na abscissa)\n\n\n\n\n\n\n\nggplot(data=df, aes(x=tempo, y=resposta, shape=niveis, color=niveis)) +\n  geom_point(aes(size=5)) +\n  geom_line(aes(linetype=niveis))+\n  facet_wrap(vars(niveis)) # paineis divididos (útil na visualização equilibrada de abscissa e ordenada)"
  },
  {
    "objectID": "ggplot2.html#ggplot2-sem-dor-interfaces-gráficas-na-web",
    "href": "ggplot2.html#ggplot2-sem-dor-interfaces-gráficas-na-web",
    "title": "Gráficos mais elaborados - pacote ggplot2",
    "section": "ggplot2 sem dor: interfaces gráficas na web",
    "text": "ggplot2 sem dor: interfaces gráficas na web\n      Se você chegou até aqui é porque teve alguma afinidade com o sistema gráfico em camadas do ggplot2, embora o enriquecimento de um gráfico também carregue consigo um conjunto mais extenso de linhas de comando. Para contornar essa dificuldade, alguns desenvolvedores produziram aplicativos de acesso online para o ggplot2, e que permitem a construção das camadas gráficas sem a necessidade de digitação de comandos, e sim por uso de cliques de mouse. Outra característica interessante, é que esses aplicativos fornecem o trecho de código para a reprodução do gráfico criado por mouse clicks.\n      Assim, vale a pena dar uma olhada nos aplicativos que seguem:\n\nggplotgui\n      O ggplotgui envolve um pacote que renderiza uma interface gráfica e interativa para o ggplot2.\n\n\n\n\n\nTela do aplicativo online ggplotgui para elaboração de gráficos pelo ggplot2 por cliques de mouse.\n\n\n      Outro sistema interativo e facilitado para o ggplot2 envolve um framework extremamente interativo chamado shiny. A interface ggplot2-shiny também permite, como o ggplotgui, a construção e customização de gráficos do pacote ggplot2 sem a necessidade de digitação de comandos.\n\n\n\n\nggplot-Shiny\n\n\n\nInterface gráfica do ggplot2-shiny, para renderização de gráficos do pacote ggplot2 sem o uso de linhas de comando."
  },
  {
    "objectID": "ggplot2.html#referência-do-pacote",
    "href": "ggplot2.html#referência-do-pacote",
    "title": "Gráficos mais elaborados - pacote ggplot2",
    "section": "Referência do pacote:",
    "text": "Referência do pacote:\n\nGeral\nManual:\nTutorial"
  },
  {
    "objectID": "inicio.html",
    "href": "inicio.html",
    "title": "Moléculas voadoras, animações, gráficos e mapas interativos",
    "section": "",
    "text": "Olá ! Seja muito bem-vindo a este Curso de Capacitação em ferramentas digitais para o Ensino Médio. A ideia central desta etapa do Curso é lhe oferecer ferramentas que possibilitem agregar valor à imagens de moléculas, gráficos e mapas observados durante o ensino médio, mas com interatividade.\n      Essa interatividade permitirá que você recrie e altere figuras que se apresentam estáticas em livros-texto do ensino médio para um objeto didático mais vivo. Daí a escolha do termo vivificando, que etiqueta o próprio website."
  },
  {
    "objectID": "inicio.html#saudação",
    "href": "inicio.html#saudação",
    "title": "Moléculas voadoras, animações, gráficos e mapas interativos",
    "section": "",
    "text": "Olá ! Seja muito bem-vindo a este Curso de Capacitação em ferramentas digitais para o Ensino Médio. A ideia central desta etapa do Curso é lhe oferecer ferramentas que possibilitem agregar valor à imagens de moléculas, gráficos e mapas observados durante o ensino médio, mas com interatividade.\n      Essa interatividade permitirá que você recrie e altere figuras que se apresentam estáticas em livros-texto do ensino médio para um objeto didático mais vivo. Daí a escolha do termo vivificando, que etiqueta o próprio website."
  },
  {
    "objectID": "inicio.html#o-por-quê-do-vivificando",
    "href": "inicio.html#o-por-quê-do-vivificando",
    "title": "Moléculas voadoras, animações, gráficos e mapas interativos",
    "section": "O por quê do “vivificando”…",
    "text": "O por quê do “vivificando”…\n      Por sua vez, tal vivificação para moléculas, gráficos e mapas deverá permitir uma visualização 3D e animações para modelos atômicos, bem como diversos graus de interatividade por cliques de mouse à gráficos e mapas - animações, seleção de pontos, zoom, simulações, mouse over (informações sobre o ponto gráfico por simples passagem do mouse), deslizadores, menus, e outros tantos.\n      O material contido aqui pretende ser autoinstucional e com curva suave de aprendizado. Nossa proposta é focar no potencial que as ferramentas podem oferecer ao ensino e aprendizagem como uma metodologia ativa, ilustrando seu emprego diretamente nos conteúdos do ensino médio. Dessa forma, não pretendemos explorar “a fundo” as capacidades das ferramentas propostas, pois isso exigiria um tempo e esforços mais significativos. Assim, você pode pensar nesse Curso metaforicamente, como um mapa panorâmico de pontos turísticos a visitar, sem a pretensão de conhecer em detalhes cada um."
  },
  {
    "objectID": "inicio.html#as-ferramentas",
    "href": "inicio.html#as-ferramentas",
    "title": "Moléculas voadoras, animações, gráficos e mapas interativos",
    "section": "As ferramentas",
    "text": "As ferramentas\n      Resumindo rapidamente, a caixa de ferramentas para este Curso possui somente dois utensílios: um programa para visualização tridimensional de moléculas, e um programa para criação de gráficos e mapas interativos. Ambos os programas são de distribuição livre (gratuitos) e permitem rodar em navegador de internete, sem necessidade de instalação em computador."
  },
  {
    "objectID": "inicio.html#políticas-públicas",
    "href": "inicio.html#políticas-públicas",
    "title": "Moléculas voadoras, animações, gráficos e mapas interativos",
    "section": "Políticas públicas",
    "text": "Políticas públicas\n     Este Curso pretende também atender a atuais iniciativas do Governo Federal junto ao [Plano Nacional de Educação (PNE) para o decênio 2024-2034 defendido na Conferência Nacional de Educação - CONAE 2024, tangentes à capacitação digital de professores e alunos (literacia digital). Nesse sentido, justifica-se também frente a alguns projetos como Escola em Tempo Integral do MEC, a Estratégia Nacional de Escolas Conectadas (Enec), o Programa Mais Ciência Na Escola, e à Chamada para a Apresentação de Propostas de Disseminação de Produtos de Inovação Tecnológica voltados a todos os níveis de educação da CAPES, do qual se origina.\n\n\nautoinstruci\nas ferramentas\nas leis"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "fenomenos.html",
    "href": "fenomenos.html",
    "title": "Fenômenos",
    "section": "",
    "text": "O Ambiente do R também permite a construção de objetos didáticos que possam “vivificar” o conteúdo de livros-texto. Como um exemplo, segue um script para a criação de um objeto que pode auxiliar no aprendizado de cinética de reações químicas, tais como o exemplificado à página 34 do volume 2 do livro-texto que segue.\n\n\n\nCinética de Reações, tal como apresentado no livro-texto\n\n\n      Ampliando um pouco a figura de cinética….\n\n\n\nAmpliação da imgem de cinética\n\n\n      Assim sendo, uma sugestão para um objeto que ajude na compreensão do tema poderia envolver a reação de formação de produtos com variação da constante de desligamento do reagente, como segue:\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\n\n\n\n      Se desejar observar como o código foi desenvolvido, e aplicá-lo diretamente no **RStudio Cloud* já visto, segue trecho:\n\n# Instale os pacotes necessários, caso ainda não os tenha\n# install.packages(\"ggplot2\")\n# install.packages(\"plotly\")\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Função para gerar os dados e o gráfico com base em taxa.dissociação.produto\ngenerate_plot_data &lt;- function(taxa.dissociação.produto) {\n  y.max &lt;- 1\n  x &lt;- seq(0.1, 10, length.out = 100)\n  y &lt;- y.max * x / (taxa.dissociação.produto + x)\n  data.frame(x, y)\n}\n\n# Inicialize o gráfico com taxa.dissociação.produto = 1\ninitial_taxa.dissociação.produto &lt;- 1\nplot_data &lt;- generate_plot_data(initial_taxa.dissociação.produto)\n\n# Crie o gráfico inicial usando ggplot2\np &lt;- ggplot(plot_data, aes(x = x, y = y)) +\n  geom_line() +\n  labs(title = paste(\"Formação de Produtos com Alteração da Taxa de Desligamento do Reagente:: y = y.max * x / (\", initial_taxa.dissociação.produto, \" + x)\"),\n       x = \"Tempo\",\n       y = \"Produto\") +\n  theme_minimal() +\n  ylim(0, 1)\n\n# Converta para um objeto plotly\nfig &lt;- ggplotly(p)\n\n# Adicione um slider para taxa.dissociação.produto utilizando plotly\nsteps &lt;- lapply(seq(0.1, 10, by = 0.1), function(taxa.dissociação.produto) {\n  list(\n    label = as.character(taxa.dissociação.produto),\n    method = \"restyle\",\n    args = list(\n      list(\n        x = list(generate_plot_data(taxa.dissociação.produto)$x),\n        y = list(generate_plot_data(taxa.dissociação.produto)$y)\n      ),\n      list(title = paste(\"Formação de Produtos com Alteração da Taxa de Desligamento do Reagente: y = y.max * x / (\", taxa.dissociação.produto, \" + x)\"))\n    )\n  )\n})\n\nfig &lt;- fig %&gt;%\n  layout(\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"taxa.dissociação.produto: \"),\n        steps = steps\n      )\n    )\n  )\n\n# Visualize o gráfico\nfig"
  },
  {
    "objectID": "fenomenos.html#exemplo-de-cinética-de-reações",
    "href": "fenomenos.html#exemplo-de-cinética-de-reações",
    "title": "Fenômenos",
    "section": "",
    "text": "O Ambiente do R também permite a construção de objetos didáticos que possam “vivificar” o conteúdo de livros-texto. Como um exemplo, segue um script para a criação de um objeto que pode auxiliar no aprendizado de cinética de reações químicas, tais como o exemplificado à página 34 do volume 2 do livro-texto que segue.\n\n\n\nCinética de Reações, tal como apresentado no livro-texto\n\n\n      Ampliando um pouco a figura de cinética….\n\n\n\nAmpliação da imgem de cinética\n\n\n      Assim sendo, uma sugestão para um objeto que ajude na compreensão do tema poderia envolver a reação de formação de produtos com variação da constante de desligamento do reagente, como segue:\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\n\n\n\n      Se desejar observar como o código foi desenvolvido, e aplicá-lo diretamente no **RStudio Cloud* já visto, segue trecho:\n\n# Instale os pacotes necessários, caso ainda não os tenha\n# install.packages(\"ggplot2\")\n# install.packages(\"plotly\")\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Função para gerar os dados e o gráfico com base em taxa.dissociação.produto\ngenerate_plot_data &lt;- function(taxa.dissociação.produto) {\n  y.max &lt;- 1\n  x &lt;- seq(0.1, 10, length.out = 100)\n  y &lt;- y.max * x / (taxa.dissociação.produto + x)\n  data.frame(x, y)\n}\n\n# Inicialize o gráfico com taxa.dissociação.produto = 1\ninitial_taxa.dissociação.produto &lt;- 1\nplot_data &lt;- generate_plot_data(initial_taxa.dissociação.produto)\n\n# Crie o gráfico inicial usando ggplot2\np &lt;- ggplot(plot_data, aes(x = x, y = y)) +\n  geom_line() +\n  labs(title = paste(\"Formação de Produtos com Alteração da Taxa de Desligamento do Reagente:: y = y.max * x / (\", initial_taxa.dissociação.produto, \" + x)\"),\n       x = \"Tempo\",\n       y = \"Produto\") +\n  theme_minimal() +\n  ylim(0, 1)\n\n# Converta para um objeto plotly\nfig &lt;- ggplotly(p)\n\n# Adicione um slider para taxa.dissociação.produto utilizando plotly\nsteps &lt;- lapply(seq(0.1, 10, by = 0.1), function(taxa.dissociação.produto) {\n  list(\n    label = as.character(taxa.dissociação.produto),\n    method = \"restyle\",\n    args = list(\n      list(\n        x = list(generate_plot_data(taxa.dissociação.produto)$x),\n        y = list(generate_plot_data(taxa.dissociação.produto)$y)\n      ),\n      list(title = paste(\"Formação de Produtos com Alteração da Taxa de Desligamento do Reagente: y = y.max * x / (\", taxa.dissociação.produto, \" + x)\"))\n    )\n  )\n})\n\nfig &lt;- fig %&gt;%\n  layout(\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"taxa.dissociação.produto: \"),\n        steps = steps\n      )\n    )\n  )\n\n# Visualize o gráfico\nfig"
  },
  {
    "objectID": "animacao.html",
    "href": "animacao.html",
    "title": "Animando a molécula",
    "section": "",
    "text": "Animações permitem a representação de moléculas de modo mais lúdico e representativo. Para agregar valor ainda maior à visualização tridimensional de estruturas moleculares, o Jmol conta com alguns comandos para o posicionamento espacial do modelo, bem como para a criação de animações, como:"
  },
  {
    "objectID": "animacao.html#alguns-comandos-de-animação-para-os-modelos",
    "href": "animacao.html#alguns-comandos-de-animação-para-os-modelos",
    "title": "Animando a molécula",
    "section": "",
    "text": "Animações permitem a representação de moléculas de modo mais lúdico e representativo. Para agregar valor ainda maior à visualização tridimensional de estruturas moleculares, o Jmol conta com alguns comandos para o posicionamento espacial do modelo, bem como para a criação de animações, como:"
  },
  {
    "objectID": "animacao.html#rotacionar-e-transladar",
    "href": "animacao.html#rotacionar-e-transladar",
    "title": "Animando a molécula",
    "section": "Rotacionar e transladar",
    "text": "Rotacionar e transladar\n      Essas ações constituem uma forma simples de reposicionar o modelo no espaço. Basta inserir o eixo e o ângulo em que se deseja o movimento (x,y,z). Ou apenas o ângulo, com o movimento padrão no eixo das abscissas (X). Seguem exemplos:\n\nrotate 20 # 20 graus\nrotate x 90 # eixo x\ntranslate y 50 # valor representa o percentual da janela (100 - fora; 0 - centro)\n\nObs: para retornar à posição original: `reset`"
  },
  {
    "objectID": "animacao.html#girar",
    "href": "animacao.html#girar",
    "title": "Animando a molécula",
    "section": "Girar",
    "text": "Girar\n      Essa ação, por sua vez, é mais “impactante”, já que permite a rotação do modelo a uma certa velocidade indefinidamente, até um comando de parada. Como na anterior, pode-se digitar somente o comando para a rotação padrão no eixo das abcissas, ou fornecer o eixo (x,y.z):\n\nspin 10 # rotacional, com velocidade de 10 graus por quadro\nspin z -15 # (eixo z)\nspin off # interrompe a rotação"
  },
  {
    "objectID": "animacao.html#ampliação-dos-modelos-zoom",
    "href": "animacao.html#ampliação-dos-modelos-zoom",
    "title": "Animando a molécula",
    "section": "Ampliação dos modelos (zoom)",
    "text": "Ampliação dos modelos (zoom)\n      É possível também ampliar ou reduzir o tamanho de uma molécula no ecrã combinando-se o comando zoom à quantidades, tal como segue:\n\nAmpliação 2x: zoom in\nAmpliação em 3x: zoom *3 \nRedução em 2x: zoom out \nRedução em 3x: zoom /3 \nEliminar ampliação: zoom off \nRestrição a um ligante e ampliação: restrict ligand; zoom 0\n\nObs: para retornar ao tamanho original: `zoom 0`\n\n      Com ampliações, reduções, rotações, translações, é possível que você queira retornar ao modelo na sua configuração de tamanho e coordenadas originais. Para isto:\n\ncenter; zoom 0 # centraliza e redimensiona o modelo a seu tamanho original\n\n\nAmpliação animada (zoomTo)\n      Esse recurso é bem mais “chique”, já que permite visualizar de forma ampliada temporalmente algumas partes de interesse do modelo. Isso é particularmente bacana com biomacromoléculas, como para sítios de interação de ligantes ou grupos prostéticos, ou sítios de reação em catálise enzimática. Mas também impacta a visualização de pequenas moléculas, posto que os modelos crescem ou reduzem de forma animada no ecrã; pode-se também focar num átomo específico para chamar a atenção na molécula. A sintaxe da expressão é:\n\nzoomto tempo tamanho #...ou, se quiser um grupo de átomos em especial (ligante, por ex)...\nzoomto tempo (expressão do átomo/grupo) tamanho\n\n      Experimente carregar moléculas pequenas e proteínas, ilustrando o comando zoomTo como segue:\n\nAumentar em 3x, meio segundo por vez: zoomto 0.5 *3 \nAumentar em 4x, meio segundo por vez: zoomto 0.5 400 \nFocar num ligante com ampliação de 2x: zoomto 2(ligand) 0\nFocar num ligante com ampliação de 4x, a meio segundo por vez: zoomto 0.5(ligand)* 4"
  },
  {
    "objectID": "animacao.html#pausa",
    "href": "animacao.html#pausa",
    "title": "Animando a molécula",
    "section": "Pausa",
    "text": "Pausa\n      Um comando muito interessante para o Jmol, bem como para outras linguagens de programação, é delay. Essa ação permite que o script interrompa uma ação por algum tempo, medido em segundos, e limitado ao mínimo de um segundo. Experimente:\n\nload $ribose # carrega uma ribose\nspin 50 # rotaciona no eixo X\ndelay 5 # aguarda 5s\nspin off # interrompe a rotação\nwireframe only # represeta em arame, somente\nwireframe 130 # espesssura do arame\ncolor translucent # cor translúcida"
  },
  {
    "objectID": "animacao.html#laço",
    "href": "animacao.html#laço",
    "title": "Animando a molécula",
    "section": "Laço",
    "text": "Laço\n      O Jmol possui alguns comandos normalmente utilizados em linguagens de programação, embora não seja esse o escopo do presente trabalho. Se quiser “ir fundo”, consulte o manual de referência de comandos do Jmol para os comandos de programação: if, ifelse, for, while, step, break, wait, pause, case, continue, quit, loop.\n      Mas entre esses comandos variados, o de laço iterativo (loop) pode ser de valia ao ensino, por exemplo, para quando se desejar chamar à atenção para uma ligação, um átomo ou grupo de átomos. Exemplificando:\n\nload $acetate # carrega um modelo de acetato\ncolor bonds red # coloração vermelha às ligações\ndelay 1 # aguarda 1 segundo\ncolor bonds green # troca a coloração para verde\nloop 1 # realiza o laço (efeito \"piscante\")\n\n      Para deixar o laço, ou seja, interromper a sequência em loop, digita-se quit."
  },
  {
    "objectID": "animacao.html#combinando-rotações-translações-e-ampliações-no-tempo",
    "href": "animacao.html#combinando-rotações-translações-e-ampliações-no-tempo",
    "title": "Animando a molécula",
    "section": "Combinando rotações, translações, e ampliações no tempo",
    "text": "Combinando rotações, translações, e ampliações no tempo\n      O Jmol oferece dois comandos básicos para isso: move e moveTo. A diferença é que move reorienta o modelo em relação à sua posição atual (movimento relativo), e moveTo o faz em relação à posição original do modelo (movimento absoluto).\n      Na prática, contudo, o comando move é mais simples de executar, dependendo somente de parâmetros de rotação e translação, ao passo que moveTo é bem mais complexo. Esse depende de parâmetros de orientação manualmente obtidos pelo Jmol.\n\nMove\n      Para o comando move bastam os parâmetros que se deseja modificar (nove no total). Dependendo do que se deseja não há necessidade de usar todos os parâmetros, e que são fornecidos abaixo:\n\nmove rotX rotY rotZ zoom dx dy dz slab time\n\nOnde:\n  rotX, Y ou Z = rotação no eixo X, Y, ou Z\n  zoom = ampliação ou redução\n  dX, Y ou Z = translação no eixo X, Y ou Z\n  slab = plano de fatiamento da molécula\n  time = tempo total envolvido no movimento\n\n      Seguem alguns exemplos:\n\nmove 90 180 0 0 0 0 0 0 21 # rotaciona o modelo por 45 graus em torno do eixo X e por 180 graus no eixo Y, e empregando um movimento gradual de 2 segundos\nmove 0 0 0 0 0 35 0 0 0.5 # reduz o modelo em 35% de seu tamanho, e com movimento gradual de 0,5 segundos\nmove 45 0 90 150 0 30 0 0 5 # rotaciona 45 graus no eixo X e 90 graus no eixo Z, ampliando o modelo em 150% e transladando-o por 30%, tudo ao longo de 5 segundos.\n\n\n\nMoveTo\n      Resulta em orientação absoluta do modelo, não dependendo de suas coordenadas anteriores. Sua inserção não é simples, pois depende dos dados da orientação do modelo quando carregado pela 1a. vez, e que pode ser obtida por:\n\nshow orientation\n\n      Um exemplo de resultado pelo comando é:\n\nmoveto /* time, axisAngle */ 1.0 { 616 -708 -346 47.68} /* zoom, translation */  400.0 0.0 0.0  /* center, rotationRadius */ {15.174467 28.719118 4.726837} 35.148052 /* navigation center, translation, depth */ {0 0 0} 0 0 0 /* cameraDepth, cameraX, cameraY */  3.0 0.0 0.0;\n#OR\n#Follows Z-Y-Z convention for Euler angles\nreset;center {15.174467 28.719118 4.726837}; rotate z 130.27; rotate y 44.57; rotate z -147.67; zoom 400.0;\n\n      Perceba que há dois conjuntos de comandos um pelo moveTo e outro por reset, center, rotate e translate. Para obter o modelo nas coordenadas originais, basta copiar um ou outro conjunto de dados.\n      Usando-se o 1o. conjunto (moveTo), copia-se a linha e altera-se o tempo de animação, no caso o valor 1.0 em “axisAngle */ 1.0”."
  },
  {
    "objectID": "animacao.html#comparando-dois-modelos-no-ecrã",
    "href": "animacao.html#comparando-dois-modelos-no-ecrã",
    "title": "Animando a molécula",
    "section": "Comparando dois modelos no ecrã",
    "text": "Comparando dois modelos no ecrã\n      Compara 2 modelos e reorienta as coordenadas do segundo para justapor-se ao primeiro, por um algoritmo de correlação.\n\nload files \"$tyrosine\" \"$epinephrine\";\nframe *;\ncompare {2.1} {1.1} rotate translate 5.0"
  },
  {
    "objectID": "animacao.html#navigate",
    "href": "animacao.html#navigate",
    "title": "Animando a molécula",
    "section": "Navigate",
    "text": "Navigate\n      O comando permite explorar o modelo simulando um passeio panorâmico ao interior da estrutura. Os parâmetros envolvem o tempo de percuro (ou 2s quando omitido). Exemplificando:\n\nnavigate depth 50 # imersão no modelo em 2s\nnavigate 3 rotate y 20 # rotaciona 20o no eixo y\nnavigate 4 trace # passeia pelo modelo em 4s\nnavigate 3 translate {30 50 70} modelo translada levemente por 3s\nnavigate 5 center {10 20 30} # sonda ao lado do modelo, e nas coordenadas x, y, z\nnavigate 2 depth 30 / 5 rotate 180 / depth 20 / translate X 10"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Saudações",
    "section": "",
    "text": "Olá ! Seja muito bem-vindo a este Curso de Capacitação em ferramentas digitais para o Ensino Médio. A ideia central desta etapa do Curso é lhe oferecer ferramentas que possibilitem agregar valor à imagens de moléculas, gráficos e mapas observados durante o ensino médio, mas com interatividade."
  },
  {
    "objectID": "index.html#o-por-quê-do-vivificando",
    "href": "index.html#o-por-quê-do-vivificando",
    "title": "Saudações",
    "section": "O por quê do “vivificando”…",
    "text": "O por quê do “vivificando”…\n      Por sua vez, tal vivificação para moléculas, gráficos e mapas deverá permitir uma visualização 3D e animações para modelos atômicos, bem como diversos graus de interatividade por cliques de mouse à gráficos e mapas - animações, seleção de pontos, zoom, simulações, mouse over (informações sobre o ponto gráfico por simples passagem do mouse), deslizadores, menus, e outros tantos.\n      O material contido aqui pretende ser autoinstucional e com curva suave de aprendizado. Nossa proposta é focar no potencial que as ferramentas podem oferecer ao ensino e aprendizagem como uma metodologia ativa, ilustrando seu emprego diretamente nos conteúdos do ensino médio. Dessa forma, não pretendemos explorar “a fundo” as capacidades das ferramentas propostas, pois isso exigiria um tempo e esforços mais significativos. Assim, você pode pensar nesse Curso metaforicamente, como um mapa panorâmico de pontos turísticos a visitar, sem a pretensão de conhecer em detalhes cada um."
  },
  {
    "objectID": "index.html#as-ferramentas",
    "href": "index.html#as-ferramentas",
    "title": "Saudações",
    "section": "As ferramentas",
    "text": "As ferramentas\n      Resumindo rapidamente, a caixa de ferramentas para este Curso possui somente dois utensílios: um programa para visualização tridimensional de moléculas, e um programa para criação de gráficos e mapas interativos. Ambos os programas são de distribuição livre (gratuitos) e permitem rodar em navegador de internete, sem necessidade de instalação em computador."
  },
  {
    "objectID": "index.html#políticas-públicas",
    "href": "index.html#políticas-públicas",
    "title": "Saudações",
    "section": "Políticas públicas",
    "text": "Políticas públicas\n     Este Curso pretende também atender a atuais iniciativas do Governo Federal junto ao [Plano Nacional de Educação (PNE) para o decênio 2024-2034 defendido na Conferência Nacional de Educação - CONAE 2024, tangentes à capacitação digital de professores e alunos (literacia digital). Nesse sentido, justifica-se também frente a alguns projetos como Escola em Tempo Integral do MEC, a Estratégia Nacional de Escolas Conectadas (Enec), o Programa Mais Ciência Na Escola, e à Chamada para a Apresentação de Propostas de Disseminação de Produtos de Inovação Tecnológica voltados a todos os níveis de educação da CAPES, do qual se origina."
  },
  {
    "objectID": "selecao.html",
    "href": "selecao.html",
    "title": "Seleção de partes da molécula",
    "section": "",
    "text": "Por vezes faz-se interessante ou necessário chamar a atenção para partes específicas de um modelo, como um átomo, grupo de átomos, uma molécula pequena no interior de uma maior, entre outras situações. Nessa seção serão vistos alguns comandos para isso.\n      O Jmol foi concebido para estruturas mais complexas, como proteínas e polímeros, razão pela qual a maior parte dos comandos de seleção refiram-se a partes de proteínas e ácidos nucleicos.Contudo, pode-se selecionar átomos ou grupo desses em moléculas pequenas, também.\n\n\n      Usando o mouse pode-se selecionar um átomo por vez ou grupo de átomos (esse no Jmol do computador), como segue:\n\n1. Átomo - basta clicar em algum no ecrã (modelo);\n2. Grupo de átomos - Shift + clique botão esquerdo + arraste pra agrupar os átomos # funciona no Jmol instalado no PC\n\n\n\n\n      Por digitação do código consegue-se uma operação bem mais abrangente que por clique de mouse, incluindo o agrupamento de átomos ou seleção daqueles com características comuns:\n\nselect \"propriedade do átomo\"\n\n      Essas características são listadas abaixo:\n\ntodos os átomos: all \nnenhum átomo: none\nsolvente: solvent\nágua: water ou hoh\níons: ions\nátomo por símbolo atômico: _N, _C, _Fe\nátomo por número atômico: elemNo=7\nátomo por identificação na sequência: atomNo&lt;50\n\n# Para biomoléculas:\nproteína: protein\nácido nucleico: nucleic\nDNA: dna\npurina: purine\npirimidina: pyrimidine\ncarboidrato: carbohydrate\naminoácido: amino\n\n\n# Para aminoácidos numa proteína:\nabreviação de 3 letras: his, tyr, leu, etc\ngrandes: large\npequenos: small\nácidos: acidic\nbásicos: basic\npolares: polar\napolares: hydrophobic\nalifáticos: aliphatic\nhidrofílicos: hydrophilic\naromáticos: aromatic\nneutros: neutral\ncarregados: charged\nna superfície: surface\nno interior: buried\ncistina: cystine\nhem - grupo heme de ferroproteínas\n\n# Para proteínas\nesqueleto carbônico de resíduos de aminoácidos: backbone ou spine\ncadeia lateral de resíduos de aminoácidos: sidechain\nátomos distintos dos presentes nos resíduos de aminoácidos: hetero\nestruturas secundárias: helix, sheet, turn"
  },
  {
    "objectID": "selecao.html#seleção-de-átomos-e-visualização",
    "href": "selecao.html#seleção-de-átomos-e-visualização",
    "title": "Seleção de partes da molécula",
    "section": "",
    "text": "Por vezes faz-se interessante ou necessário chamar a atenção para partes específicas de um modelo, como um átomo, grupo de átomos, uma molécula pequena no interior de uma maior, entre outras situações. Nessa seção serão vistos alguns comandos para isso.\n      O Jmol foi concebido para estruturas mais complexas, como proteínas e polímeros, razão pela qual a maior parte dos comandos de seleção refiram-se a partes de proteínas e ácidos nucleicos.Contudo, pode-se selecionar átomos ou grupo desses em moléculas pequenas, também.\n\n\n      Usando o mouse pode-se selecionar um átomo por vez ou grupo de átomos (esse no Jmol do computador), como segue:\n\n1. Átomo - basta clicar em algum no ecrã (modelo);\n2. Grupo de átomos - Shift + clique botão esquerdo + arraste pra agrupar os átomos # funciona no Jmol instalado no PC\n\n\n\n\n      Por digitação do código consegue-se uma operação bem mais abrangente que por clique de mouse, incluindo o agrupamento de átomos ou seleção daqueles com características comuns:\n\nselect \"propriedade do átomo\"\n\n      Essas características são listadas abaixo:\n\ntodos os átomos: all \nnenhum átomo: none\nsolvente: solvent\nágua: water ou hoh\níons: ions\nátomo por símbolo atômico: _N, _C, _Fe\nátomo por número atômico: elemNo=7\nátomo por identificação na sequência: atomNo&lt;50\n\n# Para biomoléculas:\nproteína: protein\nácido nucleico: nucleic\nDNA: dna\npurina: purine\npirimidina: pyrimidine\ncarboidrato: carbohydrate\naminoácido: amino\n\n\n# Para aminoácidos numa proteína:\nabreviação de 3 letras: his, tyr, leu, etc\ngrandes: large\npequenos: small\nácidos: acidic\nbásicos: basic\npolares: polar\napolares: hydrophobic\nalifáticos: aliphatic\nhidrofílicos: hydrophilic\naromáticos: aromatic\nneutros: neutral\ncarregados: charged\nna superfície: surface\nno interior: buried\ncistina: cystine\nhem - grupo heme de ferroproteínas\n\n# Para proteínas\nesqueleto carbônico de resíduos de aminoácidos: backbone ou spine\ncadeia lateral de resíduos de aminoácidos: sidechain\nátomos distintos dos presentes nos resíduos de aminoácidos: hetero\nestruturas secundárias: helix, sheet, turn"
  },
  {
    "objectID": "selecao.html#sec-selecao",
    "href": "selecao.html#sec-selecao",
    "title": "Seleção de partes da molécula",
    "section": "E depois de selecionar átomos, o que é que eu faço ?!",
    "text": "E depois de selecionar átomos, o que é que eu faço ?!\n      Muuiiiitaaa coisa, também ! As instruções sequenciais abaixo (scripts) ilustram algumas possibilidades de se observar detalhes de um modelo molecular com o Jmol. Você pode copiar e colar no Console para observar os resultados.\n\n# Para colorir ligações as do metano\n\nload $methane # carrega o modelo ...ou load $C\ncolor bonds yellow # coloração para as ligações\n\n\n\n# Para nomear os átomos do tylenol e padronizar uma cor\n\nload $tylenol # carrega o fármaco\nlabel %e \ncolor shapely # coloração única \n\n | Aqui vale uma observação sobre a etiquetagem dos átomos (nomes de cada no ecrã). Veja que não há comentário seguindo a instrução. Isso é necessário para que o comentário não seja a própria etiquetagem, e sim o símbolo do elemento.\n\n# Para selecionar e colorir os átomos de H\n\nload $cyclopropane # carrega o modelo\nselect _H # seleciona os átomos de hidrogênio\nlabel %e\ncolor AlcianBlue\n\n\n\n# Para selecionar e esconder os átomos de H de um propeno\n\nload $propene # carrega o modelo\nselect _H # seleciona os átomos de H\nhide selected # esconde os átomos de H selecionados\n\n\n\n# Para selecionar um átomo específico no modelo e apresentar sua área acessível ao solvente (SAS)\n\nload $urea\nselect atomno=2 # seleciona o carbono\nlabel %e \nisosurface sasurface # apresenta a superfície de interação com água\n\n\n\n# Para ressaltar os carbonos de um hexadecano\n\nload $hexadecane # carrega o modelo (ou...load $CCCCCC)\nselect carbon # seleciona os C\ncolor blue # coloração azul\nselect hydrogen # seleciona os H\ncolor transparent # reduz a visualização dos H\n\n\n\nload=1crn # carrega um modelo da proteína crambina\ncalculate hbonds # apresenta as ligações de H presentes na estrutura\ncolor hbonds Cyan # coloração\nhbonds 0.5 # espessura da ligação de H\n\n\n\n# Superfíciel de potencial eletrostático para o fenol\n\nload $phenol # carrega o modelo\nisosurface solvent color range -0.05 0.05 map mep # gera a superfície\ncolor isosurface translucent 0.5 # mantém a estrutura no interior"
  },
  {
    "objectID": "gganimate.html",
    "href": "gganimate.html",
    "title": "Animando gráficos do ggplot2 - o pacote gganimate",
    "section": "",
    "text": "A biblioteca gganimate permite criar diversos efeitos de animação em gráficos construídos com o ggplot2. Para ilustrar seu potencial no ensino médio, vamos utilizar o exemplo mencionado no MAPA, especificamente à página 12 do 1o. Bimestre do 3o. Ano, como segue:\n.\ndados &lt;- structure(list(ano = c(2009L, 2010L, 2011L, 2012L, 2013L, 2014L, \n                                2015L, 2016L, 2017L, 2018L, 2009L, 2010L, 2011L, 2012L, 2013L, \n                                2014L, 2015L, 2016L, 2017L, 2018L, 2009L, 2011L, 2012L, 2013L, \n                                2014L, 2015L, 2016L, 2017L, 2018L, 2009L, 2010L, 2011L, 2012L, \n                                2013L, 2014L, 2015L, 2016L, 2017L, 2018L, 2009L, 2010L, 2011L, \n                                2012L, 2013L, 2014L, 2015L, 2016L, 2017L, 2018L, 2009L, 2010L, \n                                2011L, 2012L, 2013L, 2014L, 2015L, 2016L, 2017L, 2018L), interna = c(56.5, \n                                                                                                     74.9, 57.9, 43.8, 45.2, 38.1, 36.7, 48, 22.6, 28.2, 142.7, 152.5, \n                                                                                                     107.3, 97.5, 91.8, 81.9, 81.9, 76.3, 63.6, 46.6, 183.6, 161, \n                                                                                                     134.2, 132.8, 110.2, 111.6, 103.1, 63.6, 63.6, 226, 317.8, 161, \n                                                                                                     148.3, 169.5, 137, 139.8, 115.8, 76.3, 76.3, 311, 343.2, 289.5, \n                                                                                                     248.6, 233.1, 187.9, 187.9, 187.9, 134.2, 120.1, 450.6, 488.7, \n                                                                                                     384.2, 305.1, 265.5, 223.2, 226, 170.9, 134.2, 108.8), regiao = c(\"Sudeste\", \n                                                                                                                                                                       \"Sudeste\", \"Sudeste\", \"Sudeste\", \"Sudeste\", \"Sudeste\", \"Sudeste\", \n                                                                                                                                                                       \"Sudeste\", \"Sudeste\", \"Sudeste\", \"Sul\", \"Sul\", \"Sul\", \"Sul\", \n                                                                                                                                                                       \"Sul\", \"Sul\", \"Sul\", \"Sul\", \"Sul\", \"Sul\", \"Brasil\", \"Brasil\", \n                                                                                                                                                                       \"Brasil\", \"Brasil\", \"Brasil\", \"Brasil\", \"Brasil\", \"Brasil\", \"Brasil\", \n                                                                                                                                                                       \"Centro-oeste\", \"Centro-oeste\", \"Centro-oeste\", \"Centro-oeste\", \n                                                                                                                                                                       \"Centro-oeste\", \"Centro-oeste\", \"Centro-oeste\", \"Centro-oeste\", \n                                                                                                                                                                       \"Centro-oeste\", \"Centro-oeste\", \"Nordeste\", \"Nordeste\", \"Nordeste\", \n                                                                                                                                                                       \"Nordeste\", \"Nordeste\", \"Nordeste\", \"Nordeste\", \"Nordeste\", \"Nordeste\", \n                                                                                                                                                                       \"Nordeste\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \n                                                                                                                                                                       \"Norte\", \"Norte\", \"Norte\", \"Norte\")), class = \"data.frame\", row.names = c(NA, \n                                                                                                                                                                                                                                                 -59L))\nlibrary(ggplot2)  # carrega a biblioteca\n\nggplot(data=dados, aes(x=ano, y=interna))+ # elabora o gráfico\n  geom_point(aes(size=interna,col=regiao)) +\n  labs(x=\"\",y=\"internação/100 mil hab\")\n\n\n\n\nGráfico de internações por carência no saneamento básico criado pelo ggplot2.\nlibrary(gganimate) # carrega a biblioteca\n\ninterna_anim &lt;- ggplot(data=dados, aes(x=ano, y=interna))+ \n  geom_point(aes(size=interna,col=regiao)) +\n  labs(y=\"internação/100 mil hab\")   # repete-se a construção do gráfico\n\n# p &lt;- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +\n#   geom_point()\n# plot(p)\n\nanim &lt;- interna_anim + transition_states(ano,   # comando para rodar a animação\n                              transition_length = 2,\n                              state_length = 1)\nanim   # a animação\nanim &lt;- interna_anim + transition_states(regiao,\n                              transition_length = 2,\n                              state_length = 1)\nanim"
  },
  {
    "objectID": "gganimate.html#outras-animações-simples-com-o-pacote-gganimate",
    "href": "gganimate.html#outras-animações-simples-com-o-pacote-gganimate",
    "title": "Animando gráficos do ggplot2 - o pacote gganimate",
    "section": "Outras animações simples com o pacote gganimate",
    "text": "Outras animações simples com o pacote gganimate\n      O gganimate possui diversos comandos, assim como os demais pacotes do R. Mas algumas alterações simples podem resultar em efeitos visuais significativos. Tomando-se os dados de internações por carência de saneamento básico anteriores, experimente uma transição mais fluida com o trecho abaixo:\n\ninterna_anim + transition_time(ano) +\n  labs(title = \"regiao: {frame_time}\")\n\n      Ou esse…\n\ninterna_anim + transition_reveal(interna)"
  },
  {
    "objectID": "gganimate.html#referência-do-pacote",
    "href": "gganimate.html#referência-do-pacote",
    "title": "Animando gráficos do ggplot2 - o pacote gganimate",
    "section": "Referência do pacote:",
    "text": "Referência do pacote:\n\nGeral\nManual:\nTutorial"
  },
  {
    "objectID": "flexdashboard.html",
    "href": "flexdashboard.html",
    "title": "Tudo junto agora - o pacote flexdashboards",
    "section": "",
    "text": "Até agora vimos algumas características de bibiliotecas gráficas e interativas do R, e voltadas à visulização, simulação, e animação de conteúdos. Cada biblioteca (ou package) possui uma sintaxe particular, e um produto de renderização específico."
  },
  {
    "objectID": "flexdashboard.html#referência-do-pacote",
    "href": "flexdashboard.html#referência-do-pacote",
    "title": "Tudo junto agora - o pacote flexdashboards",
    "section": "Referência do pacote:",
    "text": "Referência do pacote:\n\nGeral\nManual\nTutorial"
  }
]