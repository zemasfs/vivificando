---
title: "Matemática"
---

<div class="mat-fundo">

**Comparação: área superficial e volume de uma esfera (EM13MT05)**

::: {.grid}

::: {.g-col-6}

```{r, echo=FALSE}
library(plotly)

plot_ly() %>%
  add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Superfície') %>%
  add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%
  layout(
    title = 'Superfície e Volume de uma Esfera',
    xaxis = list(title = 'Raio'), 
    yaxis = list(title = 'Valor')
  )
```
:::

::: {.g-col-6}

```{r, eval=FALSE, message=FALSE, warning=FALSE}
library(plotly)

plot_ly() %>%
  add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Superfície') %>%
  add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%
  layout(
    title = 'Superfície e Volume de uma Esfera',
    xaxis = list(title = 'Raio'), 
    yaxis = list(title = 'Valor')
  )
```

:::

:::

</div>


<!-- ###############################################################-->


<div class="mat-fundo">

**Regressão linear (EM13MT10)**

::: {.grid}

::: {.g-col-6}

```{r, echo=FALSE}
library(plotly)

dados <- function(ruido_func) {
  set.seed(123)
  x <- seq(0, 5, length.out = 50)
  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)
  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))
  list(x = x, desvio = desvio, y_esperado = y_esperado)
}

plot_ly() %>%
  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = "scatter", name = "Dados") %>%
  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = "scatter", name = "Linha de Regressão") %>%
  layout(
    title = 'Regressão Linear',
    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),
    sliders = list(list(
      currentvalue = list(prefix = "Desvio: "),
      steps = lapply(seq(0, 5, 1), function(sd_value) {
        list(label = as.character(sd_value),
             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))
      })
    ))
  )
```
:::

::: {.g-col-6}

```{r, eval=FALSE, message=FALSE, warning=FALSE}
library(plotly)

dados <- function(ruido_func) {
  set.seed(123)
  x <- seq(0, 5, length.out = 50)
  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)
  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))
  list(x = x, desvio = desvio, y_esperado = y_esperado)
}

plot_ly() %>%
  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = "scatter", name = "Dados") %>%
  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = "scatter", name = "Linha de Regressão") %>%
  layout(
    title = 'Regressão Linear',
    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),
    sliders = list(list(
      currentvalue = list(prefix = "Desvio: "),
      steps = lapply(seq(0, 5, 1), function(sd_value) {
        list(label = as.character(sd_value),
             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))
      })
    ))
  )
```

:::

:::

</div>


